<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sprintmvc 数据处理</title>
    <url>/2020/10/06/blog/java/ssm/springMVC/date/</url>
    <content><![CDATA[<h2 id="Json-拦截器-异常-文件-流程"><a href="#Json-拦截器-异常-文件-流程" class="headerlink" title="Json,拦截器,异常,文件,流程"></a><center>Json,拦截器,异常,文件,流程</center></h2><h3 id="JSON与数据传递："><a href="#JSON与数据传递：" class="headerlink" title="JSON与数据传递："></a>JSON与数据传递：</h3><h4 id="1-了解javascript对象与json字符串之间的转换："><a href="#1-了解javascript对象与json字符串之间的转换：" class="headerlink" title="1. 了解javascript对象与json字符串之间的转换："></a>1. 了解javascript对象与json字符串之间的转换：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">pass</span>:<span class="number">111</span>&#125;;</span><br><span class="line"><span class="comment">// stringify：对象转json字符串</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(o);</span><br><span class="line"><span class="built_in">console</span>.log(json); <span class="comment">// &#123;&quot;name&quot;:&quot;test&quot;,&quot;age&quot;:18,&quot;pass&quot;:111&#125;</span></span><br><span class="line"><span class="comment">// parse：json字符串转对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;name: &quot;test&quot;, age: 18, pass: 111&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-了解-Jackson："><a href="#2-了解-Jackson：" class="headerlink" title="2. 了解 Jackson："></a>2. 了解 Jackson：</h4><ol>
<li>导入依赖，<a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind">依赖地址</a>：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 Jackson：</li>
</ol>
<ul>
<li>SpringMvc中使用Jackson如果@ResponseBody标识的方法返回的是对象，jack会自动将该对象转为json字符串。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// produces解决乱码问题</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/hello&quot;,produces=&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="comment">// 使该方法不通过视图解析器，直接返回字符串</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">// 对json处理都依赖于此对象</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">// 将传入的java任意对象（包括集合，数组等）转换为json字符串</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> User(<span class="string">&quot;test&quot;</span>,<span class="number">111</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>统一解决方案</li>
</ol>
<ul>
<li>在springmvc配置文件中对返回的字符串进行编码设置：省去对每一个方法设置编码的步骤</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对于专返回json字符串的类在类上使用 <strong>@RestController</strong> 注解即可，此类中所有的方法都不用在添加**@ResponseBody<strong>注解。此两注解中的方法可直接 **返回java对象类型，会被自动按默认方式解析为json字符串</strong> 响应给前端。</li>
<li><strong>@RequestBody</strong>注解能获取到本次请求的请求体，get没有请求体所以会获取到空。如果请求体是一个对象的json字符串它还能将请求体映射到对应的对象上，但需要给ajax设置<code>contentType: &quot;application/json&quot;</code>内容格式为json字符串类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>传输时间对象（Date）：</li>
</ol>
<p>当然我们可以将格式化后的时间对象传递外，还可以通过设置 ObjectMapper 时间格式处理Date对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对json处理都依赖于此对象</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">//不使用时间戳的方式</span></span><br><span class="line">mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//自定义日期格式对象</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//指定日期格式</span></span><br><span class="line">mapper.setDateFormat(sdf);</span><br><span class="line"><span class="comment">// 传入Date对象，返回指定时间格式字符串</span></span><br><span class="line"><span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> Date());</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 使用注解指定pojo对象（Date成员）转为json字符串的时间格式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a><strong>常用方法：</strong></h6><ol>
<li>jackson 对象：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>java对象序列化为json：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对java象转化为json字符串</span></span><br><span class="line">String json = mapper.writeValueAsString(<span class="keyword">new</span> User());</span><br><span class="line"><span class="comment">// 将java对象转化为json字符串并序列化为json文件</span></span><br><span class="line">mapper.writeValue(<span class="keyword">new</span> File(<span class="string">&quot;json/js.json&quot;</span>),<span class="keyword">new</span> User());</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>json反序列化为java对象：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json字符串转java对象</span></span><br><span class="line">User user = mapper.readValue(json, User.class);</span><br><span class="line"><span class="comment">// 将读取的json文件（或者url）转化为java对象</span></span><br><span class="line">User user2 = mapper.readValue(<span class="keyword">new</span> File(<span class="string">&quot;json/js.json&quot;</span>), User.class);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过<code>TypeReference</code>反序列化为集合(list，map)：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用TypeReference将json字符串转化为集合（list,map）</span></span><br><span class="line">ArrayList&lt;String&gt; list =</span><br><span class="line">        mapper.readValue(json,<span class="keyword">new</span> TypeReference&lt;ArrayList&lt;String&gt;&gt;()&#123;&#125;);</span><br><span class="line">HashMap&lt;String, Object&gt; map =</span><br><span class="line">        mapper.readValue(json,<span class="keyword">new</span> TypeReference&lt;HashMap&lt;String, Object&gt;&gt;()&#123;&#125;);</span><br><span class="line"><span class="comment">// 使用TypeReference是为了保证数据准确性和安全，也可以直接转换但不准确</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>JsonNode 对象读取json：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ObjectMapper将json字符串转化为JsonNode对象</span></span><br><span class="line">JsonNode jsonNode = mapper.readTree(json);</span><br><span class="line"><span class="comment">// 通过json的key获取value的JsonNode对象</span></span><br><span class="line">JsonNode name = jsonNode.get(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="comment">// JsonNode 获取该节点的json字符串</span></span><br><span class="line">String s = name.toString();</span><br><span class="line"><span class="comment">// 或将该节点转化为某值</span></span><br><span class="line">String s1 = name.asText();</span><br></pre></td></tr></table></figure>

<h4 id="3-了解-fastjson："><a href="#3-了解-fastjson：" class="headerlink" title="3. 了解 fastjson："></a>3. 了解 fastjson：</h4><ol>
<li>导入依赖，<a href="https://mvnrepository.com/artifact/com.alibaba/fastjson">依赖地址</a>：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>fastjson常用方法：</li>
</ol>
<p>fastjson 三个主要的类：<strong>JSONObject  代表 json 对象</strong> ，<strong>JSONArray  代表 json 对象数组</strong>，<strong>JSON代表 JSONObject和JSONArray的转化</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">User user1 = <span class="keyword">new</span> User(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(user1);</span><br><span class="line">list.add(user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java对象 转 JSON字符串</span></span><br><span class="line">String str1 = JSON.toJSONString(list);</span><br><span class="line">String str2 = JSON.toJSONString(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON字符串 转 Java对象</span></span><br><span class="line">User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java对象 转 JSON对象</span></span><br><span class="line">JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line"><span class="comment">// 根据key获取json对象中的值</span></span><br><span class="line">jsonObject1.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON对象 转 Java对象</span></span><br><span class="line">User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br></pre></td></tr></table></figure>

<h3 id="数据校验："><a href="#数据校验：" class="headerlink" title="数据校验："></a>数据校验：</h3><p>Java中自带 <strong>JSR 303</strong> , <strong>Hibernate Validator</strong> 是JSR 303 的一种参考实现，除jsr本身注解外它还支持额外的一些注解：</p>
<ul>
<li>maven添加依赖支持：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常用注解（它们有一个message属性，自定义错误信息）：</li>
</ul>
<table>
<thead>
<tr>
<th>Constraint</th>
<th>详细信息</th>
<th>作用类型</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>被注释的元素必须为 null</td>
<td>引用类型</td>
</tr>
<tr>
<td>@NotNull</td>
<td>被注释的元素必须不为 null</td>
<td>引用类型</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>被注释的元素必须为 true</td>
<td>boolean</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>被注释的元素必须为 false</td>
<td>boolean</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
<td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
<td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
<td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger、String</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
<td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger、String</td>
</tr>
<tr>
<td>@Size(max, min)</td>
<td>被注释的元素的大小必须在指定的范围内</td>
<td>String、Collection、Map和数组</td>
</tr>
<tr>
<td>@Digits (integer, fraction)</td>
<td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td>
<td>byte、short、int、long及各自的包装类型以及BigDecimal、BigInteger、String</td>
</tr>
<tr>
<td>@Past</td>
<td>被注释的元素必须是一个过去的日期</td>
<td>java.util.Date,java.util.Calendar</td>
</tr>
<tr>
<td>@Future</td>
<td>被注释的元素必须是一个将来的日期</td>
<td>java.util.Date,java.util.Calendar</td>
</tr>
<tr>
<td>@Pattern(regex=)</td>
<td>被注释的元素必须符合指定的正则表达式</td>
<td>String</td>
</tr>
<tr>
<td>@Valid</td>
<td>被注释的元素需要递归验证</td>
<td>引用对象</td>
</tr>
<tr>
<td>以下是Hibernate Validator新增的</td>
<td></td>
<td></td>
</tr>
<tr>
<td>@Email</td>
<td>被注释的元素必须是电子邮箱地址</td>
<td>String</td>
</tr>
<tr>
<td>@Length(min=下限, max=上限)</td>
<td>被注释的字符串的大小必须在指定的范围内</td>
<td>String</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>被注释的元素的必须非空并且size大于0</td>
<td>String、Collection、Map和数组</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>被注释的元素必须不为空且不能全部为’ ‘(空字符串)</td>
<td>String</td>
</tr>
<tr>
<td>@Range(min=最小值, max=最大值)</td>
<td>被注释的元素必须在合适的范围内</td>
<td>byte、short、int、long及各自的包装类型以及BigDecimal、BigInteger、String</td>
</tr>
</tbody></table>
<ul>
<li>为 pojo 类添加按需求给字段添加注解。controller中使用时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="comment">// Valid 标注需要验证,后紧跟BindingResult对象它封装了前一个bean的校验结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult result)</span></span>&#123;</span><br><span class="line">    result.hasErrors(); <span class="comment">// 是否有校验错误</span></span><br><span class="line">    <span class="comment">// 获取所有验证错误的对象</span></span><br><span class="line">    List&lt;ObjectError&gt; allErrors =result.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">        allError.getDefaultMessage(); <span class="comment">// 错误信息</span></span><br><span class="line">        allError.getObjectName(); <span class="comment">// 错误字段名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拦截器："><a href="#拦截器：" class="headerlink" title="拦截器："></a>拦截器：</h3><p>SpringMVC的拦截器类似于Servlet中的过滤器Filter,区别在于 <strong>拦截器是AOP思想的具体应用</strong>。</p>
<ul>
<li>自定义拦截器必须继承 <strong>HandlerInterceptor</strong> 接口。源码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 目标方法运行之前,此方法的返回值表示对请求是否放行</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 默认请求放行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标方法运行之后</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 整个请求完成后，来到目标页面（preHandle放行，资源响应之后）</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义拦截器后需要在spring-mvc.xml中配置拦截器：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器管理配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置当个bean默认拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean class=&quot;ruoxijun.config.MyInterceptor&quot;/&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 单个拦截器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截的请求路径，**表示此请求下的所有请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定拦截器类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可配置多个interceptor（拦截器） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>拦截器可用于用户的登录等权限管理操作，常搭配 <strong>Session</strong> 与 <strong>Cookie</strong> 一同使用（详情见javawab章）。</li>
<li><strong>mvc单拦截器运行流程：</strong><ol>
<li>preHandle：目标方法运行前</li>
<li>目标方法执行</li>
<li>postHandle：目标方法运行后</li>
<li>页面加载完成</li>
<li>afterCompletion：请求完成后</li>
</ol>
</li>
<li><strong>mvc多拦截器运行流程：</strong><ol>
<li>先拦截范围大的preHandle，后范围小的preHandle，后目标方法运行</li>
<li>先范围小postHandle，后大的postHandle，后页面加载</li>
<li>先小afterCompletion，后大afterCompletion</li>
</ol>
</li>
</ul>
<h3 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h3><h4 id="1-ExceptionHandler异常处理方法："><a href="#1-ExceptionHandler异常处理方法：" class="headerlink" title="1. ExceptionHandler异常处理方法："></a>1. ExceptionHandler异常处理方法：</h4><p>value中为可处理的异常，当有多个 ExceptionHandler 方法时，异常发生后该异常归包含该异常且范围更小的方法处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标注此方法专处理该类中发生的某些异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">err</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;err&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-ControllerAdvice异常处理类："><a href="#2-ControllerAdvice异常处理类：" class="headerlink" title="2.ControllerAdvice异常处理类："></a>2.ControllerAdvice异常处理类：</h4><p>被ControllerAdvice标注的类被自动到spring的ioc容器中，该类中被ExceptionHandler标注的方法可管理项目中发生的所有异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Err</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">err</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;err&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-ResponseStatus自定义异常："><a href="#3-ResponseStatus自定义异常：" class="headerlink" title="3.ResponseStatus自定义异常："></a>3.ResponseStatus自定义异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(reason = &quot;自定义异常发生&quot; ,</span></span><br><span class="line"><span class="meta">                code = HttpStatus.NOT_ACCEPTABLE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传与下载："><a href="#文件上传与下载：" class="headerlink" title="文件上传与下载："></a>文件上传与下载：</h3><h4 id="文件上传注意事项："><a href="#文件上传注意事项：" class="headerlink" title="文件上传注意事项："></a>文件上传注意事项：</h4><ol>
<li>为保证服务器安全，上传文件应放在外界无法访问的目录下，如WEB-INF目录。</li>
<li>为防止文件覆盖现象应为上传文件产生一个唯一文件名。</li>
<li>限制上传文件的最大值，限制上传文件的类型。</li>
</ol>
<h4 id="上传文件具体实现："><a href="#上传文件具体实现：" class="headerlink" title="上传文件具体实现："></a>上传文件具体实现：</h4><ul>
<li>添加<code>commons-fileupload</code>依赖，maven会自动导入它的依赖包<code>commons-io</code>。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>前端文件上传表单配置：</li>
</ul>
<ol>
<li>form 属性 <code>method</code> 需要设置为 <code>post</code> ，<code>get</code> 不能传输文件，但会接收到文件名。</li>
<li>form 属性 <code>enctype</code> 设置为 <code>multipart/form-data</code> (文件传输必须设置，表示已二进制流方式处理表单数据)</li>
<li>input 的 <code>type</code> 设置为 <code>file</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/download&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>springmvc配置：</li>
</ul>
<p>springmvc提供了即插即用的 <strong>MultipartResolver（CommonsMultipartResolver类）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc文件上传配置，id必须为multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传大小上限，10MB=10485760字节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*10&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>CommonsMultipartFile 的 常用方法：</li>
</ul>
<ol>
<li><p><strong>String getOriginalFilename()：获取上传文件的原名</strong></p>
</li>
<li><p><strong>InputStream getInputStream()：获取文件流</strong></p>
</li>
<li><p><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></p>
</li>
</ol>
<ul>
<li>使用流（getInputStream）获取保存文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="comment">// 将input的name为file的值传递给CommonsMultipartFile对象</span></span><br><span class="line"><span class="comment">// 也可以使用它的父类MultipartFile，接受到的都是CommonsMultipartFile对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> CommonsMultipartFile file,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    String fileName = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 创建存放文件的未文件夹</span></span><br><span class="line">    File path = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())&#123;</span><br><span class="line">        path.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取上传文件的文件流</span></span><br><span class="line">    InputStream in = file.getInputStream();</span><br><span class="line">    <span class="comment">// 存放文件</span></span><br><span class="line">    File filePath = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">    OutputStream out = <span class="keyword">new</span> FileOutputStream(filePath);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<strong>transferTo</strong>方法保存文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> CommonsMultipartFile file,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    String fileName = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 创建存放文件的未文件夹</span></span><br><span class="line">    File path = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())&#123;</span><br><span class="line">        path.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存放文件</span></span><br><span class="line">    File filePath = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">    <span class="comment">// 定义文件对象后使用transferTo方法，直接保存文件</span></span><br><span class="line">    file.transferTo(filePath);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多文件上传："><a href="#多文件上传：" class="headerlink" title="多文件上传："></a>多文件上传：</h5><p>HTML中表单设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%--</span> 文件控件同名 <span class="attr">--</span>%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>controller中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span> <span class="comment">// 将MultipartFile设置为数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile[] file)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!multipartFile.isEmpty())&#123; <span class="comment">// 当文件不为空时保存起来</span></span><br><span class="line">            multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;E:\\&quot;</span>,</span><br><span class="line">                multipartFile.getOriginalFilename()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h4><p>文件下载注意配置 response 响应头和一些必要配置，都是一些固定设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">file</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 设置页面不缓存,清空buffer</span></span><br><span class="line">    response.reset();</span><br><span class="line">    <span class="comment">// 设置字符编码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 二进制传输数据</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;fileName=&quot;</span>+</span><br><span class="line">            URLEncoder.encode(<span class="string">&quot;wallhaven-eyg6l8.jpg&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    File path = <span class="keyword">new</span> File(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    File filePath = <span class="keyword">new</span> File(path,<span class="string">&quot;wallhaven-eyg6l8.jpg&quot;</span>);</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">    <span class="comment">// 获取传输文件输出流</span></span><br><span class="line">    OutputStream out = response.getOutputStream();</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpringMvc-运行流程："><a href="#SpringMvc-运行流程：" class="headerlink" title="SpringMvc 运行流程："></a>SpringMvc 运行流程：</h3><ol>
<li>发起请求，前端控制器（DispatcherServlet）接受请求，调用doDispatch进行处理</li>
<li>根据HandlerMapper中保存的请求映射信息找到，处理当前请求的处理器执行链（包含拦截器）</li>
<li>根据当前处理器找到它的HandlerAdapter（适配器）</li>
<li>拦截器的preHandle先执行</li>
<li>适配器执行目标方法，并返回ModelAndView<ol>
<li>ModelAttribute注解标注的方法提前运行</li>
<li>执行目标方法时确定目标方法用的参数，根据参数前有无注解和参数类型(如Model)执行不同。<ul>
<li>如果是自定义类型：<ol>
<li>看隐含模型中有没有，有就从隐含模型中取</li>
<li>否则再看是否为SessionAttributes标注的属性，是则拿，拿不到则报错</li>
<li>以上都不满足利用反射创建对象</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li>拦截器的postHandle执行</li>
<li>处理结果；（页面渲染流程）<ol>
<li>如果有异常使用异常解析器处理，处理完成后返回ModelAndView</li>
<li>调用render进行页面渲染<ol>
<li>视图解析器根据视图名得到视图对象</li>
<li>视图对象调用render方法</li>
</ol>
</li>
<li>执行拦截器的afterCompletion</li>
</ol>
</li>
</ol>
<p>==掌握1-7（7.1-7.3）==</p>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
        <tag>fastjson</tag>
        <tag>Jackson</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 注解开发与 Aop</title>
    <url>/2020/10/06/blog/java/ssm/spring/aop/</url>
    <content><![CDATA[<h2 id="注解开发与Aop"><a href="#注解开发与Aop" class="headerlink" title="注解开发与Aop"></a><center>注解开发与Aop</center></h2><h3 id="注解开发："><a href="#注解开发：" class="headerlink" title="注解开发："></a>注解开发：</h3><h4 id="1-注解实现自动装配："><a href="#1-注解实现自动装配：" class="headerlink" title="1. 注解实现自动装配："></a>1. 注解实现自动装配：</h4><p>在使用注解之前我们还需要在bean文件中加入注解驱动（在spring4之后使用注解开发要保证<strong>aop</strong>包导入了）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Cat&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;猫&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狗&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>使用**@Autowired**注解：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Autowired表示自动装配，它有个required属性默认为true</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 该成员无get,set等方法也能自动装配</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="comment">// required为false时表示该属性可以为null，即bean文件中没有该对象时不会报错</span></span><br><span class="line">    <span class="meta">@Autowired(required=false)</span> </span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong> ：先按照类型在<strong>容器</strong>中寻找相应组件，找到多个时根据<strong>bean id</strong>匹配（默认使用变量名与id进行匹配），未找到时报错。</p>
<ol start="2">
<li><strong>@Autowired</strong> 和 <strong>@Qualifier(value = “id”)</strong> 结合使用可指定装配某一个bean：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;cat&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure>

<p>扩展：**@Autowired** 和 <strong>@Qualifier(value = “id”)</strong> 还能为方法使用，注意使用Autowired注解的方法会装配后自动运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="comment">// 为方法的每一个参数自动赋值，原理一样</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="meta">@Qualifier(&quot;a&quot;)</span> A a)</span></span>&#123; <span class="comment">// 为某参数指定bean</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>java中jdk自带有一个和**@Autowired<strong>类似的注解 **@Resource</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="comment">// 自动匹配</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog&quot;)</span> <span class="comment">// 指定对象，也可指定类型type = Dog.class</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意Resource与Autowired的区别：Resource先按照名称装配，其次按照类型装配。标注在属性的set方法上，即默认取属性名作为bean名称寻找依赖对象。</p>
<h4 id="2-注解实现bean功能："><a href="#2-注解实现bean功能：" class="headerlink" title="2. 注解实现bean功能："></a>2. 注解实现bean功能：</h4><p>在使用这些注解之前还需要在bean文件中添加下面这句，spring会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启包注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 类排除： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type=&quot;annotation&quot;：按照指定注解排除，assignable：排除指定类</span></span><br><span class="line"><span class="comment">             expression：给出全类名即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;注解全类名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 类指定：（使用与类排除基本一致）</span></span><br><span class="line"><span class="comment">         use-default-filters=&quot;false&quot;：必须禁用默认规则才会生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;指定类全类名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 此注解同时启用了注释驱动自动注入的功能即可以省去<code>&lt;context:annotation-config/&gt;</code>配置</p>
<ul>
<li>注解实现bean（**@Component<strong>）与属性值注入（</strong>@value**）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件，等价于：&lt;bean id=&quot;cat&quot; class=&quot;ruoxijun.pojo.cat&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 默认id类名首字母小写，可传入字符串更改为指定id</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性注入,等价于：&lt;property name=&quot;name&quot; value=&quot;猫&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;猫&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@Component</strong> 衍生注解：</li>
</ul>
<p>java中web开发按照MVC分为dao，service，controller层。</p>
<table>
<thead>
<tr>
<th>包层</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td><strong>dao</strong></td>
<td><strong><code>@Repository</code></strong></td>
</tr>
<tr>
<td><strong>service</strong></td>
<td><strong><code>@Service</code></strong></td>
</tr>
<tr>
<td><strong>controller</strong></td>
<td><strong><code>@Controller</code></strong></td>
</tr>
</tbody></table>
<p>这三个注解的作用与**@Component**一样只是表达的含义不同而已。</p>
<ul>
<li>作用域，在类的上方使用注解**@Scope**：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定作用域，等价于：&lt;bean id=&quot;cat&quot; class=&quot;ruoxijun.pojo.cat&quot; scope=&quot;singleton&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">//单例模式，默认</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">//原型模式</span></span><br></pre></td></tr></table></figure>

<h4 id="3-注解实现配置类（bean文件）："><a href="#3-注解实现配置类（bean文件）：" class="headerlink" title="3. 注解实现配置类（bean文件）："></a>3. 注解实现配置类（bean文件）：</h4><ul>
<li>java类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;若惜君&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>利用**@Configuration**实现一个bean文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 代表这是一个配置类，等同与beans.xml文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 等同于一个 bean标签，方法名就是id，返回值就是class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>AnnotationConfigApplicationContext</code>构造器获取Spring上下文对象：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<ul>
<li>此外还有两个注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扫描包注解，等同于：&lt;context:component-scan base-package=&quot;ruoxijun&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;ruoxijun&quot;)</span></span><br><span class="line"><span class="comment">// 导入其它配置类的bean</span></span><br><span class="line"><span class="meta">@Import(Config.class)</span></span><br></pre></td></tr></table></figure>

<h3 id="AOP知识储备："><a href="#AOP知识储备：" class="headerlink" title="AOP知识储备："></a>AOP知识储备：</h3><p>AOP专业术语（了解）：</p>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/AOP%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD.jpg" alt="AOP专业术语"></p>
<h4 id="1-代理模式："><a href="#1-代理模式：" class="headerlink" title="1. 代理模式："></a>1. 代理模式：</h4><p>客户类与目标类之间存在中介类，中介类就称之为代理类。</p>
<ul>
<li>优点：可以限制客户类直接访问目标类，实现了解耦。同时完成业务时可再在其中附加一些功能，完成功能增强。</li>
<li>缺点：目标类较多时会产生大量的代理类。</li>
</ul>
<h4 id="2-动态代理（了解原理）："><a href="#2-动态代理（了解原理）：" class="headerlink" title="2. 动态代理（了解原理）："></a>2. 动态代理（了解原理）：</h4><p>利用jdk反射机制创建代理对象，并动态的指定要代理的目标类。我们只需创建目标对象，后利用如下两个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InvocationHandler：实现动态代理的接口，invoke方法，表示代理对象要执行的方法，如下参数：</span><br><span class="line">    Object proxy：代理对象</span><br><span class="line">    Method method：method.invoke(目标对象实例, args) <span class="comment">// 执行目标对象方法</span></span><br><span class="line">    <span class="comment">// 在目标对象方法执行前后我们可以定义我们需要的方法</span></span><br><span class="line">    Object[] args：目标对象方法的参数</span><br><span class="line">    <span class="comment">// invoke的返回值就是代理对象执行方法后的返回值</span></span><br><span class="line">    </span><br><span class="line">Proxy：创建动态代理对象，通过它静态的 newProxyInstance 方法，如下参数：</span><br><span class="line">    ClassLoader loader：通过反射获取类加载器:目标类对象.getClass().getClassLoader()</span><br><span class="line">    Class&lt;?&gt;[] interfaces：目标对象实现的所有接口数组:目标类对象.getClass().getInterfaces()</span><br><span class="line">    InvocationHandler h：代理类要完成功能（上方实现的 InvocationHandler 接口类）</span><br></pre></td></tr></table></figure>

<h4 id="3-动态代理实现案例："><a href="#3-动态代理实现案例：" class="headerlink" title="3. 动态代理实现案例："></a>3. 动态代理实现案例：</h4><p>jdk动态代理的弊端时目标类必须有实现的接口，所以需要为目标类编写接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;A的show方法执行了&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 目标对象(需要被代理的对象)</span></span><br><span class="line">        A a = <span class="keyword">new</span> B();</span><br><span class="line">        <span class="comment">// 添加功能</span></span><br><span class="line">        InvocationHandler in = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;方法执行之前&quot;</span>);</span><br><span class="line">                Object o = method.invoke(a,args);</span><br><span class="line">                System.out.println(<span class="string">&quot;方法执行之后&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 获取目标类加载器</span></span><br><span class="line">        ClassLoader loader = a.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获取目标类的实现接口数组</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = a.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 创建动态代理对象</span></span><br><span class="line">        A o = (A) Proxy.newProxyInstance(loader,interfaces,in);</span><br><span class="line">        <span class="comment">// 调用动态代理对象的实现方法</span></span><br><span class="line">        o.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOP的实现："><a href="#AOP的实现：" class="headerlink" title="AOP的实现："></a>AOP的实现：</h3><p>Spring使用AOP需要导入 <strong><em>aspectjweaver</em></strong> 依赖包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring简化了动态代理并且更加强大，可以使我们将某段代码动态的切入到指定方法的指定位置（方法的开始 结束 异常…）。</p>
<p>Spring AOP 执行流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 方法前置</span></span><br><span class="line">    pjp.procced(args) <span class="comment">// 方法执行</span></span><br><span class="line">    <span class="meta">@AfterReturning</span> <span class="comment">// 方法正常返回</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception exception) &#123;</span><br><span class="line">    <span class="meta">@AfterThrowing</span> <span class="comment">// 方法抛出异常时</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 方法执行完成后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-API接口方式实现："><a href="#1-API接口方式实现：" class="headerlink" title="1. API接口方式实现："></a>1. API接口方式实现：</h4><ul>
<li>Spring实现AOP主要有以下接口：</li>
</ul>
<ol>
<li>MthodBeforeAdvice：目标方法实施前</li>
<li>AfterReturningAdvice：目标方法实施后</li>
<li>ThrowsAdvice 异常抛出</li>
<li>IntroductionAdvice 为目标类添加新的属性和方法。可以构建组合对象来实现多继承</li>
<li>MethodInterceptor 方法拦截器，环绕在方法执行前之前，在方法执行后之前</li>
</ol>
<ul>
<li><strong>定义目标接口和实现类</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123; <span class="comment">// 目标接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123; <span class="comment">// 目标类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;add User&quot;</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">&quot;delete User&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>代理类功能实现准备：</strong></li>
</ul>
<p><strong>MethodBeforeAdvice接口</strong> 根据需求在方法执行前实现额外功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBefore</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123; <span class="comment">// 方法执行前接口</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 参数解析：参1：目标方法对象，参2：目标方法参数，参3：目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MethodBeforeAdvice：&quot;</span>+o.getClass().getName()+</span><br><span class="line">                <span class="string">&quot;类&quot;</span>+method.getName()+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AfterReturningAdvice接口</strong> 根据需求在方法执行后实现额外功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAfter</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123; <span class="comment">// 方法执行后接口</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">// 参数解析：参1：目标方法返回值，参2：目标方法对象，参3：目标方法参数，参4：目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturningAdvice：&quot;</span>+o1.getClass().getName()+</span><br><span class="line">                <span class="string">&quot;类&quot;</span>+method.getName()+<span class="string">&quot;方法,返回&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>bean文件完成代理类配置</strong>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 先将所有类注册为bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserBefore&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userAfter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserAfter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP需要在beans标签中导入aop约束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点配置：</span></span><br><span class="line"><span class="comment">         id：取名，expression：表达式（指定要执行的aop方法） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 执行环绕增加：</span></span><br><span class="line"><span class="comment">         advice-ref：实现了接口的类</span></span><br><span class="line"><span class="comment">         pointcut-ref：切入点（pointcut）的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;userBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不使用配置的切入点，pointcut：直接指定切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;userAfter&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span></span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 这里看似获取目标类，实则获取到的是代理类。     </span></span><br><span class="line"><span class="comment">// 因为返回的是代理类，所以这里只能使用接口类型接受对象。使用目标类型会报错</span></span><br><span class="line">UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.add();</span><br></pre></td></tr></table></figure>

<h4 id="2-自定义类实现："><a href="#2-自定义类实现：" class="headerlink" title="2. 自定义类实现："></a>2. 自定义类实现：</h4><p>之前我们分别使用两个类分别实现两个接口的方式，在目标方法执行前后的额外功能实现，再在bean文件中配置组合成了代理类。现在我们需要在一个自定义类中，定义在目标方法执行前后的额外功能实现，通过这个自定义类和bean文件配置来实现代理类。</p>
<ul>
<li>自定义类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义方法，实现目标方法执行前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义方法，实现目标方法执行后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置bean文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserProxy&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面，ref自定义的切面类bean id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;userProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:后跟切入点，指定目标方法执行前需要执行的方法，method值指定方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定目标方法执行后需要执行的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>高级配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- order：多切面时指定当前切面的优先执行等级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;countAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- after-returning：目标方法正常执行结束返回之后</span></span><br><span class="line"><span class="comment">                returning：指定通知方法接收返回值的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span> = <span class="string">&quot;aspectAfterReturning&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">pointcut-ref</span> = <span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">returning</span> = <span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- after-throwing：目标方法抛出异常之后</span></span><br><span class="line"><span class="comment">                throwing：指定通知方法接收产生异常的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span> = <span class="string">&quot;aspectAfterThrowing&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">pointcut-ref</span> = <span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">throwing</span> = <span class="string">&quot;exception&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-注解实现AOP："><a href="#3-注解实现AOP：" class="headerlink" title="3. 注解实现AOP："></a>3. 注解实现AOP：</h4><ul>
<li>使用注解之前需要开启AOP的注解支持：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启对aop注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将该自定义类注册为bean，也可在类中使用注解注册 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserProxy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将自定义类修改为注解注册的aop类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @Before定义目标方法执行前的操作，参数为execution表达式指定给那些方法添加</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @After定义目标方法执行后的操作</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @Around 环绕通知，类似于一个完整的动态代理</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕开始&quot;</span>);</span><br><span class="line">        Object re = pjp.proceed(); <span class="comment">// 让目标开始执行方法，并方法返回方法返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> re; <span class="comment">// 返回方法执行后的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用注解如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"><span class="meta">@Before</span> <span class="comment">// 在目标方法之前</span></span><br><span class="line"><span class="meta">@After</span> <span class="comment">// 在目标方法结束后</span></span><br><span class="line"><span class="meta">@AfterReturning</span> <span class="comment">// 在目标方法正常返回之后</span></span><br><span class="line"><span class="meta">@AfterThrowing</span> <span class="comment">// 在目标方法抛出异常之后运行</span></span><br><span class="line"><span class="meta">@Around</span> <span class="comment">// 定义目标方法执行时环绕的操作</span></span><br></pre></td></tr></table></figure>

<p>正常执行顺序：<code>Before -&gt; After -&gt;AfterReturning</code></p>
<p>异常执行顺序：<code>Before -&gt; After -&gt;AfterThrowing</code></p>
<p>添加环绕通知(环绕优先)：<code>环绕前置 -&gt; Before -&gt;方法执行 -&gt; 环绕后置 -&gt; After -&gt; AfterReturning</code></p>
<h3 id="AOP细节："><a href="#AOP细节：" class="headerlink" title="AOP细节："></a>AOP细节：</h3><p>spring注解实现AOP只对通知方法内的参数做检查，对通知方法的修饰符,返回值,方法名都无要求可以任意。但配置（xml）实现AOP时必须保证方法的修饰符是可以让配置文件访问到的。</p>
<h4 id="1-获取方法基本信息："><a href="#1-获取方法基本信息：" class="headerlink" title="1. 获取方法基本信息："></a>1. 获取方法基本信息：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;)</span></span><br><span class="line"><span class="comment">// 在切面类的通知方法的参数中添加一个JoinPoint参数，这个参数能拿到方法信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspectBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取方法参数</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    <span class="comment">// 方法签名</span></span><br><span class="line">    Signature signature = joinPoint.getSignature();</span><br><span class="line">    signature.getName(); <span class="comment">// 方法名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-获取方法返回值："><a href="#2-获取方法返回值：" class="headerlink" title="2. 获取方法返回值："></a>2. 获取方法返回值：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;,</span></span><br><span class="line"><span class="meta">        returning = &quot;result&quot;)</span></span><br><span class="line"><span class="comment">// AfterReturning的returning属性指定接收方法返回值的参数，并添加同名的参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspectAfterReturning</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法的返回值：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-方法产生异常后获取异常："><a href="#3-方法产生异常后获取异常：" class="headerlink" title="3. 方法产生异常后获取异常："></a>3. 方法产生异常后获取异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;,</span></span><br><span class="line"><span class="meta">        throwing = &quot;exception&quot;)</span></span><br><span class="line"><span class="comment">// AfterThrowing的throwing属性指定接收方法产生异常的参数，并添加Exception类型的同名参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspectAfterThrowing</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在目标方法抛出异常之后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-简化切入点表达式："><a href="#4-简化切入点表达式：" class="headerlink" title="4. 简化切入点表达式："></a>4. 简化切入点表达式：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;)</span> <span class="comment">// 切入点写入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 填写上方方法</span></span><br><span class="line"><span class="meta">@Before(value = &quot;init()&quot;)</span></span><br></pre></td></tr></table></figure>

<h4 id="5-expression表达式："><a href="#5-expression表达式：" class="headerlink" title="5. expression表达式："></a>5. expression表达式：</h4><p>原型：<code>execution(访问权限 返回值类型 方法全类名(参数列表))</code></p>
<p>统配符：<code>*</code>：任意个字符(在方法参数中表示任意一个参数)，<code>..</code>：任意个参数</p>
<p><code>execution(* ruoxijun.service.UserServiceImpl.*(..))</code></p>
<p> expression表达式分为4个部分加上expression关键字为5个部分：</p>
<ol>
<li>第一部分“ * ”号表示返回值，这里表示可以为任何类型</li>
<li>第二部分为包名</li>
<li>第三部分为类名，我们这里是<code>UserServiceImpl</code>这个类，也可以 <strong><code>service.*</code></strong> 表示service包中的<strong>所有类</strong></li>
<li>第四部分为方法名和参数，“ * ”号表示所有方法括号内的 “ .. “ 表示任何参数。</li>
</ol>
<h4 id="6-指定动态代理的实现方式："><a href="#6-指定动态代理的实现方式：" class="headerlink" title="6. 指定动态代理的实现方式："></a>6. 指定动态代理的实现方式：</h4><p>开启对aop注解的支持标签中 <strong><code>proxy-target-class</code></strong> 属性能控制动态代理的实现方式，Spring <strong>默认使用JDK基于接口的代理实现即属性值为false</strong> ， <strong>属性值修改为true则使用cglib基于类的代理</strong> 实现动态代理：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启对aop注解的支持，并使用cglib实现动态代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>动态代理的目标类都需要有接口的实现，并使用时需要利用接口类型接受bean这是因为此时得到的类时一个Porxy类它也实现了该接口，这都是使用jdk实现动态代理。使用cglib进行代理便可以不需要接口给任意类添加代理，返回的bean也是本类型。</p>
<h4 id="7-多切面运行："><a href="#7-多切面运行：" class="headerlink" title="7. 多切面运行："></a>7. 多切面运行：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">// 当有多个切面时可添加此注解，设置当前切面的优先级，值小的优先级高</span></span><br></pre></td></tr></table></figure>

<p>优先级高的切面前置方法先执行，后置方法越后执行。</p>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 与 mybatis 整合</title>
    <url>/2020/10/06/blog/java/ssm/spring/sm/</url>
    <content><![CDATA[<h2 id="事务管理-SM整合-代码生成器"><a href="#事务管理-SM整合-代码生成器" class="headerlink" title="事务管理,SM整合,代码生成器"></a><center>事务管理,SM整合,代码生成器</center></h2><h3 id="事务控制："><a href="#事务控制：" class="headerlink" title="事务控制："></a>事务控制：</h3><p>Spring事务控制是基于AOP(切面编程)的，需要AOP所需要的包。</p>
<h4 id="1-注解开启事务："><a href="#1-注解开启事务：" class="headerlink" title="1. 注解开启事务："></a>1. 注解开启事务：</h4><ul>
<li>spring-service.xml中添加开启事务配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 开启基于注解的事务控制模式，依赖tx名称空间</span></span><br><span class="line"><span class="comment">     transaction-manager：值默认为transactionManager</span></span><br><span class="line"><span class="comment">     当与事务管理器 bean id 同时可以不用配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>业务类的业务方法(对数据库的增删改方法)上添加 <strong>Transactional</strong> 开启事务：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> * add(..) &#123;</span><br><span class="line">    <span class="comment">// 数据库cud操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Transactional属性取值：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">事务传播行为：（！多事务方法嵌套是否回滚问题）</span><br><span class="line"><span class="function">Propagation <span class="title">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED</span>;</span><br><span class="line"> </span><br><span class="line">事务隔离级别：（！数据库脏读，不可重复读，幻读）</span><br><span class="line"><span class="function">Isolation <span class="title">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务方法执行超出指定时长后回滚</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">// 秒为单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否设置事务为只读，增加数据库的查询速度，存在更改数据方法时报错</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">异常回滚分类：运行时异常不用处理默认回滚，编译时异常tyr-<span class="keyword">catch</span>或<span class="keyword">throws</span>处理后不再回滚。</span><br><span class="line">这时我们可以选择使用如下方法进行操作：</span><br><span class="line"></span><br><span class="line">指定那些需要回滚：</span><br><span class="line">Class&lt;? extends Throwable&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类对象</span></span><br><span class="line">String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类全类名</span></span><br><span class="line">案例：</span><br><span class="line">    <span class="comment">// 抛出找不到文件异常时需要回滚,多个异常使用逗号隔开</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = &#123;FileNotFoundException.class&#125;)</span></span><br><span class="line"></span><br><span class="line">指定那些事务不需要回滚：</span><br><span class="line">Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类对象</span></span><br><span class="line">String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类全类名</span></span><br><span class="line">案例：</span><br><span class="line">    <span class="comment">// 假如此计算不影响数据，指定抛出算数异常时不需要回滚</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = &#123;ArithmeticException.class&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="2-xml配置事务："><a href="#2-xml配置事务：" class="headerlink" title="2. xml配置事务："></a>2. xml配置事务：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用切面编程添加事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置事务传播特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method指明那些方法是事务方法，</span></span><br><span class="line"><span class="comment">                属性设置请参考注解中的属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有以query开头的方法添加事务，且设置为只读属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &quot;*&quot;：为所有属性添加事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Spring-整合-MyBatis："><a href="#Spring-整合-MyBatis：" class="headerlink" title="Spring 整合 MyBatis："></a>Spring 整合 MyBatis：</h3><h4 id="1-导入整合需要的依赖："><a href="#1-导入整合需要的依赖：" class="headerlink" title="1. 导入整合需要的依赖："></a>1. 导入整合需要的依赖：</h4><p>Spring整合Mybatis除了它们自身需要的包以外，还需要 <strong>mybatis-spring</strong> 包和 <strong>spring-jdbc</strong> 包来操作数据库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis 结合 spring 使用需要导入此包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring操作数据库需要此包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-新建-spring-dao-xml-对-mybatis-进行配置："><a href="#2-新建-spring-dao-xml-对-mybatis-进行配置：" class="headerlink" title="2. 新建 spring-dao.xml 对 mybatis 进行配置："></a>2. 新建 <code>spring-dao.xml</code> 对 mybatis 进行配置：</h4><h5 id="扩展：在-SSM-框架中Mybatis和springMVC的配置文件都会整合到一个总的配置文件-applicationContext-xml-中。"><a href="#扩展：在-SSM-框架中Mybatis和springMVC的配置文件都会整合到一个总的配置文件-applicationContext-xml-中。" class="headerlink" title="扩展：在 SSM 框架中Mybatis和springMVC的配置文件都会整合到一个总的配置文件 applicationContext.xml 中。"></a>扩展：在 SSM 框架中Mybatis和springMVC的配置文件都会整合到一个总的配置文件 <code>applicationContext.xml</code> 中。</h5><ol>
<li>datasource：使用spring的原生数据源替换mybatis的配置，这里使用spring的jdbc。在<code>mybatis-config.xml</code>中省去对 **environments **环境标签的配置。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">            useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;991314&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring中可以使用 ==&lt;context:property-placeholder location=”classpath:database.properties”/&gt;== 引用外部属性文件。常用于spring管理数据库连接池。</p>
<ol start="2">
<li>在MyBatis-Spring中，可使用SqlSessionFactoryBean来创建SqlSessionFactory。将配置的数据源DriverManagerDataSource对象赋值给SqlSessionFactoryBean的dataSource</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定mybatis配置文件，spring才能读取到配置文件。</span></span><br><span class="line"><span class="comment">         否则在此利用SqlSessionFactoryBean属性代替mybatis配置所有设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 它的属性还能替换mybatis中的配置，例如下为代替mybatis注册Mapper.xml文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:ruoxijun/mapper/*.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 MyBatis-Spring 中 SqlSessionTemplate 就是 SqlSession，需要利用构造函数传入我们配置好的sqlSessionFactory</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 官方推荐使用 index=&quot;0&quot;，此处我们使用name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在spring的总配置文件<code>applicationContext.xml</code>中导入mybatis的spring配置：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入对mybatis的配置，与正常的导入一个beans.xml文件一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-编写-MapperImpl-实现类："><a href="#3-编写-MapperImpl-实现类：" class="headerlink" title="3. 编写 MapperImpl 实现类："></a>3. 编写 MapperImpl 实现类：</h4><p>对数据库进行操作除编写 Mapper接口 定义方法和配置 Mapper.xml 以外，spring中新增一项那就是还需要给Mapper接口编写<strong>MapperImpl实现类</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123; <span class="comment">// 实现Mapper接口</span></span><br><span class="line">    <span class="comment">// 此类中需要获取SqlSession，之前说过MyBatis-Spring中SqlSessionTemplate就是SqlSession</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 在实现的方法中：获取Mapper实现类调用方法并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-将MapperImpl实现类配置为bean："><a href="#4-将MapperImpl实现类配置为bean：" class="headerlink" title="4. 将MapperImpl实现类配置为bean："></a>4. 将MapperImpl实现类配置为bean：</h4><p>在 <code>applicationContext.xml</code> 中配置MapperImpl类并将sqlSession注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-测试："><a href="#5-测试：" class="headerlink" title="5. 测试："></a>5. 测试：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserMapper userMapper = (UserMapper) context.getBean(<span class="string">&quot;userMapper&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.getUserList();</span><br></pre></td></tr></table></figure>

<h4 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h4><ul>
<li>除4中那样直接实现Mapper接口外，还提供了一种继承<strong>SqlSessionDaoSupport</strong>类+实现Mapper接口的方式，这样我们不必再自己去获取写获取sqlsession方法，它的内部提供了**<code>getSqlSession</code>**方法获取SqlSession。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>applicationContext.xml</code> 中配置MapperImpl的bean时，可以选择只注入sqlSessionFactory表示我们连<code>spring-dao.xml</code>的第2步的第3小步也可省略：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两参数注入择一即可，也可同时注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事务管理："><a href="#事务管理：" class="headerlink" title="事务管理："></a>事务管理：</h4><p>spring中事务 <strong>利用 AOP 给指定方法配置事务</strong> ，当方法中的语句出错时，那么此方法中所有有关数据库数据的操作的事务都不会提交。并且对某方法增加事务只需在 beans.xml 进行配置，不用改动原程序这正是aop的概念。</p>
<p><strong>实例</strong>：在 <code>spring-dao.xml</code>  对 mybatis 进行新增事务配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.要开启Spring的事务处理功能，在Spring配置文件中创建DataSourceTransactionManager对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据源，构造方法和set注入二选一即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.结合aop实现事务的置入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.1 配置事务通知(配置事务的类，由spring提供) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定给SQL的那些方法提供事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 常用，一般使用下一项即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.2 配置事务切入，给指定方法设置事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.mapper.UserMapperImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis逆向工程（mybatis-generator）："><a href="#mybatis逆向工程（mybatis-generator）：" class="headerlink" title="mybatis逆向工程（mybatis.generator）："></a>mybatis逆向工程（mybatis.generator）：</h3><ul>
<li>导入依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在项目根目录下新建xml配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 去除注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_crud?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;991314&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定javabean生成（pojo）的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.bean&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定SQL映射文件生成位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.dao&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper接口生成位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.dao&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定每个表的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新建测试类运行代码生成文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 指定配置文件</span></span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">&quot;mbg.xml&quot;</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mybatis</tag>
        <tag>mybatis逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm 整合</title>
    <url>/2020/08/29/blog/java/ssm/ssm/</url>
    <content><![CDATA[<h1 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a><center>SSM 整合</center></h1><h3 id="依赖归纳与资源过滤："><a href="#依赖归纳与资源过滤：" class="headerlink" title="依赖归纳与资源过滤："></a>依赖归纳与资源过滤：</h3><h4 id="1-依赖：更新于：2020年8月29日16-56-27"><a href="#1-依赖：更新于：2020年8月29日16-56-27" class="headerlink" title="1.依赖：更新于：2020年8月29日16:56:27"></a>1.依赖：<em>更新于：2020年8月29日16:56:27</em></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring springmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring aop切面编程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis整合spring的适配包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet 与 jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jackson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-pom-xml中Maven资源过滤设置："><a href="#2-pom-xml中Maven资源过滤设置：" class="headerlink" title="2. pom.xml中Maven资源过滤设置："></a>2. pom.xml中Maven资源过滤设置：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-基本包结构："><a href="#3-基本包结构：" class="headerlink" title="3. 基本包结构："></a>3. 基本包结构：</h4><ul>
<li>pojo</li>
<li>mapper（dao）</li>
<li>service</li>
<li>controller</li>
</ul>
<hr>
<h3 id="Mybatis-层："><a href="#Mybatis-层：" class="headerlink" title="Mybatis 层："></a>Mybatis 层：</h3><h4 id="1-在resources中新建database-properties文件，准备连接数据库的数据（数据源）："><a href="#1-在resources中新建database-properties文件，准备连接数据库的数据（数据源）：" class="headerlink" title="1. 在resources中新建database.properties文件，准备连接数据库的数据（数据源）："></a>1. 在resources中新建database.properties文件，准备连接数据库的数据（数据源）：</h4><p>为了不引起配置混乱与数据源有关的配置都会添加 <strong>jdbc</strong>  的前缀。主要原因是<strong>username</strong>为Spring的key中的一个关键字（系统用户名）。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">991314</span></span><br></pre></td></tr></table></figure>

<h4 id="2-resources中新建mybatis-config-xml配置mybatis："><a href="#2-resources中新建mybatis-config-xml配置mybatis：" class="headerlink" title="2. resources中新建mybatis-config.xml配置mybatis："></a>2. resources中新建mybatis-config.xml配置mybatis：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名自动映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给pojo包的所有类取别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ruoxijun.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册Mapper.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.BookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-为数据库表编写pojo类。"><a href="#3-为数据库表编写pojo类。" class="headerlink" title="3. 为数据库表编写pojo类。"></a>3. 为数据库表编写pojo类。</h4><h4 id="4-编写Mapper接口和Mapper-xml书写数据语句。"><a href="#4-编写Mapper接口和Mapper-xml书写数据语句。" class="headerlink" title="4. 编写Mapper接口和Mapper.xml书写数据语句。"></a>4. 编写Mapper接口和Mapper.xml书写数据语句。</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;绑定接口&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-编写service层："><a href="#5-编写service层：" class="headerlink" title="5. 编写service层："></a>5. 编写service层：</h4><p>首先需要定义service接口，接口中定义与Mapper接口对应的方法。再编写ServiceImpl类（service接口的实现类），类中关联Mapper对象（定义一个Mapper成员变量，并添加set方法）实现方法中利用Mapper调用具体方法。</p>
<hr>
<h3 id="Spring-层："><a href="#Spring-层：" class="headerlink" title="Spring 层："></a>Spring 层：</h3><h4 id="1-resources中新建spring-dao-xml配置Spring整合Mybatis："><a href="#1-resources中新建spring-dao-xml配置Spring整合Mybatis：" class="headerlink" title="1. resources中新建spring-dao.xml配置Spring整合Mybatis："></a>1. resources中新建spring-dao.xml配置Spring整合Mybatis：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.连接池，这里使用c3p0。</span></span><br><span class="line"><span class="comment">        spring文章中使用了spring原生数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao包，动态实现Mapper接口的实现注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描Mapper接口的实现，并注入到ioc容器中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ruoxijun.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之前spring的文章中整合mybatis时需要新建类MapperImpl实现Mapper接口，这里的第 <strong>4</strong> 步扫描包便是帮我们做好了此步。也可以选择手动实现。</p>
<h4 id="2-resources中新建spring-service-xml配置service层："><a href="#2-resources中新建spring-service-xml配置service层：" class="headerlink" title="2. resources中新建spring-service.xml配置service层："></a>2. resources中新建spring-service.xml配置service层：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Spring-MVC-层："><a href="#Spring-MVC-层：" class="headerlink" title="Spring MVC 层："></a>Spring MVC 层：</h3><h4 id="1-resources中新建spring-mvc-xml配置mvc："><a href="#1-resources中新建spring-mvc-xml配置mvc：" class="headerlink" title="1. resources中新建spring-mvc.xml配置mvc："></a>1. resources中新建spring-mvc.xml配置mvc：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JstlView可以解析jsp页面中的JSTL标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-resources中新建applicationContext-xml配置Spring整合文件："><a href="#2-resources中新建applicationContext-xml配置Spring整合文件：" class="headerlink" title="2. resources中新建applicationContext.xml配置Spring整合文件："></a>2. resources中新建applicationContext.xml配置Spring整合文件：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-配置web-xml："><a href="#3-配置web-xml：" class="headerlink" title="3. 配置web.xml："></a>3. 配置web.xml：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springmvc控制器，拦截请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动spring容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 载入spring总配置文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置拦截所有的请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字符编码过滤器，必须放在所有过滤器之前 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定要使用的字符编码级 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 响应编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截所有请求设置编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于springmvc控制器中的<strong>启动spring容器</strong>配置可单独分离出来配置(不推荐)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="comment">&lt;!-- 设置配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="comment">&lt;!-- 配置spring监听器，默认加载WEB-INF目录下的applicationContext.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>springmvc</tag>
        <tag>mybatis</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>spring mvc 基础</title>
    <url>/2020/08/19/blog/java/ssm/springMVC/index/</url>
    <content><![CDATA[<h2 id="Spring-MVC-入门"><a href="#Spring-MVC-入门" class="headerlink" title="Spring MVC 入门"></a><center>Spring MVC 入门</center></h2><h3 id="MVC-简介："><a href="#MVC-简介：" class="headerlink" title="MVC 简介："></a>MVC 简介：</h3><p>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范：</p>
<ul>
<li><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
</li>
<li><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
</li>
<li><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
</li>
</ul>
<h3 id="Spring-MVC-简单实例："><a href="#Spring-MVC-简单实例：" class="headerlink" title="Spring MVC 简单实例："></a>Spring MVC 简单实例：</h3><h4 id="1-导入所需依赖："><a href="#1-导入所需依赖：" class="headerlink" title="1. 导入所需依赖："></a>1. 导入所需依赖：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springmvc核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可能会使用servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还有可能使用jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>servlet的maven依赖分为 <code>javax.servlet-api</code> 和 <code>servlet-api</code> 带<strong>javax</strong>前缀表示最新版本。</p>
<h4 id="2-配置web-xml-，-注册DispatcherServlet："><a href="#2-配置web-xml-，-注册DispatcherServlet：" class="headerlink" title="2. 配置web.xml  ， 注册DispatcherServlet："></a>2. 配置web.xml  ， 注册DispatcherServlet：</h4><p>SpringMVC思想是用一个前端控制器能拦截所有请求，并智能派发。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。**DispatcherServlet实际是一个Servlet (它继承自HttpServlet)**。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet SpringMvc的请求拦截分发器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> <span class="comment">&lt;!-- 指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当没有指定配置文件时，会默认寻找：</span></span><br><span class="line"><span class="comment">            /WEB-INF/控制器名-servlet.xml文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet启动加载：</span></span><br><span class="line"><span class="comment">             servlet原本是第一次访问时创建对象。</span></span><br><span class="line"><span class="comment">             springmvc中服务器启动时创建对象，值越小越先创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!-- / 拦截所有请求(不包含jsp)，/* 会拦截jsp页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-编写springmvc的配置文件（推荐名：springmvc-servlet-xml）："><a href="#3-编写springmvc的配置文件（推荐名：springmvc-servlet-xml）：" class="headerlink" title="3. 编写springmvc的配置文件（推荐名：springmvc-servlet.xml）："></a>3. 编写springmvc的配置文件（推荐名：springmvc-servlet.xml）：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.添加处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.添加处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.添加视图解析器:拼接目标地址字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的<strong>处理器映射器和处理器适配器</strong>是使用了显示的方式去指定，实际1、2也可<strong>省略</strong>springmvc会采用默认的<strong>处理器映射器和处理器适配器</strong>。</p>
<h4 id="4-编写控制类Controller-，实现Controller接口："><a href="#4-编写控制类Controller-，实现Controller接口：" class="headerlink" title="4. 编写控制类Controller ，实现Controller接口："></a>4. 编写控制类Controller ，实现Controller接口：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：这里导入的是Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// springmvc方法中允许我们传入原生的API</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ModelAndView 模型和视图类</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">// 封装对象，放在ModelAndView中。</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">// 封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ModelAndView 的 <code>setViewName</code> 方法和配置文件中的视图解析器，决定了要跳转的视图和视图的具体位置（通过拼接字符串）。如上表示跳转到 /WEB-INF/jsp/hello.jsp 视图（页面）。hello.jsp中的内容为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>$&#123;msg&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-将Controller的实现类注册到springmvc-servlet-xml中："><a href="#5-将Controller的实现类注册到springmvc-servlet-xml中：" class="headerlink" title="5. 将Controller的实现类注册到springmvc-servlet.xml中："></a>5. 将Controller的实现类注册到springmvc-servlet.xml中：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意此处的id表示访问时的url后缀，”/“ 不能舍去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.ruoxijun.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>到此启动项目浏览器中输入：<strong>localhost:8080/springmvc_demo01/hello</strong> 访问，浏览器显示**HelloSpringMVC!**的字样表示成功了。</p>
<h3 id="实例改写注解开发："><a href="#实例改写注解开发：" class="headerlink" title="实例改写注解开发："></a>实例改写注解开发：</h3><h4 id="1-springmvc-servlet-xml优化与添加注解支持："><a href="#1-springmvc-servlet-xml优化与添加注解支持：" class="headerlink" title="1. springmvc-servlet.xml优化与添加注解支持："></a>1. springmvc-servlet.xml优化与添加注解支持：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.ruoxijun&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源(如.css、.js等)</span></span><br><span class="line"><span class="comment">         除我们添加的映射请求，其它请求交给Tomcat处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加静态处理后我们映射的动态请求也会被Tomcat静态处理，需要加上此句 </span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入</span></span><br><span class="line"><span class="comment">        省略了手动注册以上两个bean的实例的步骤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可指定视图类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-使用注解实现Controller类："><a href="#2-使用注解实现Controller类：" class="headerlink" title="2. 使用注解实现Controller类："></a>2. 使用注解实现Controller类：</h4><p><strong><code>@Controller </code>**注解的类中使用 **<code>@RequestMapping</code></strong> 注解的方法就相当于一个 handleRequest 方法。被注解类中的所有方法如果返回值为 <strong>String</strong> ，并且有具体的页面可以跳转那么就会被视图解析器解析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Controller注解不用再继承Controller接口，且自动注册为bean</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 实现Controller接口是一种较老的方法，推荐使用注解实现</span></span><br><span class="line"><span class="comment">// 可在类上再加一层请求路径的映射,也可省略</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 映射请求路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="comment">// localhost:8080/springmvc_demo02/controller/hello</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123; <span class="comment">// 参数可自定义，此处的Model存储传递数据</span></span><br><span class="line">        <span class="comment">// 向模型存入数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springmvc&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回的字符串表示视图：/WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个类中可以配置多个方法。可以发现使用注解后 <strong>springmvc-servlet.xml</strong> 配置好后就不用再改动了。不用再为<code>Controller</code>类注册为 <code>bean</code> </p>
<h3 id="RequestMapping-属性："><a href="#RequestMapping-属性：" class="headerlink" title="RequestMapping 属性："></a>RequestMapping 属性：</h3><h4 id="常规方式传参："><a href="#常规方式传参：" class="headerlink" title="常规方式传参："></a>常规方式传参：</h4><p>首先定义一个需要接收两个参数的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,Model model)</span></span>&#123; <span class="comment">// 需要接受ab两个参数</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;两数和为：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<p><strong>localhost:8080/springmvc_demo02/add</strong>：直接访问add方法，不传入参数报<strong>500错误</strong>。</p>
<p><strong>localhost:8080/springmvc_demo02/add?a=1&amp;b=2</strong>：正确访问方式，使用常规的get方式传参。</p>
<h4 id="1-模糊匹配："><a href="#1-模糊匹配：" class="headerlink" title="1. 模糊匹配："></a>1. 模糊匹配：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ? 匹配单个任意字符，0个或多个字符都会导致失败</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello?&quot;)</span></span><br><span class="line"><span class="comment">// * 匹配多个字符(可0个)或一层路径，hello? hello*同时存在优先访问精确度高的</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/*/hello*&quot;)</span></span><br><span class="line"><span class="comment">// ** 可匹配多层路径</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/**/hello&quot;)</span></span><br></pre></td></tr></table></figure>

<h4 id="2-RestFul-风格传参与-PathVariable："><a href="#2-RestFul-风格传参与-PathVariable：" class="headerlink" title="2. RestFul 风格传参与 PathVariable："></a>2. RestFul 风格传参与 PathVariable：</h4><p>方法更改为接受 RestFul 风格的形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大括号声明路径变量值在url中映射的位置，</span></span><br><span class="line"><span class="comment"> * 路径变量在url中的位置和个数可以随意更改（/add/&#123;a&#125;/&#123;b&#125;/&#123;a&#125;：a赋值为最后一个a值），</span></span><br><span class="line"><span class="comment"> * 但必须给所有路径变量声明并赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="comment">// @PathVariable 注解的变量表示它是一个路径变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;两数和为：&quot;</span>+(a-b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<p><strong>localhost:8080/springmvc_demo02/add?a=1&amp;b=2</strong>：使用常规的get方式传参，报404错误。</p>
<p><strong>localhost:8080/springmvc_demo02/add/2/1</strong>：正确访问方式，RestFul 风格传参。</p>
<h4 id="3-method-指定请求方式："><a href="#3-method-指定请求方式：" class="headerlink" title="3. method 指定请求方式："></a>3. method 指定请求方式：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RequestMapping 中可以通过给method赋值指定请求方式（非指定请求方式报错）</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">// springmvc 也提供了具体请求方式的注解，它们是RequestMapping的快捷方式使用方法类似</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>

<h4 id="4-params-指定参数规则"><a href="#4-params-指定参数规则" class="headerlink" title="4. params 指定参数规则:"></a>4. params 指定参数规则:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;hello02&quot;,params=&#123;&quot;name&quot;&#125;)</span> <span class="comment">// 必须包含name参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello03&quot;,params=&#123;&quot;!name&quot;&#125;)</span> <span class="comment">// 不能包含name参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello04&quot;,params=&#123;&quot;name=4&quot;&#125;)</span> <span class="comment">// 指定参数值</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello05&quot;,params=&#123;&quot;name!=5&quot;,&quot;age&quot;&#125;)</span> <span class="comment">// 添加多个参数条件</span></span><br></pre></td></tr></table></figure>

<h4 id="5-headers-指定请求头规则"><a href="#5-headers-指定请求头规则" class="headerlink" title="5. headers 指定请求头规则:"></a>5. headers 指定请求头规则:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">headers = &#123;&#125; <span class="comment">// 使用与params类似，针对请求头</span></span><br></pre></td></tr></table></figure>

<h3 id="转发与重定向："><a href="#转发与重定向：" class="headerlink" title="转发与重定向："></a>转发与重定向：</h3><h4 id="1-使用servlet-API-："><a href="#1-使用servlet-API-：" class="headerlink" title="1. 使用servlet API ："></a>1. 使用servlet API ：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(HttpServletRequest req,HttpServletResponse rsp)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// rsp.sendRedirect(&quot;index.jsp&quot;);</span></span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springmvc&quot;</span>);</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用springMVC完成转发与重定向："><a href="#2-使用springMVC完成转发与重定向：" class="headerlink" title="2. 使用springMVC完成转发与重定向："></a>2. 使用springMVC完成转发与重定向：</h4><p>带有 forward 和 redirect 关键字的前缀的字符串不会被视图解析器解析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springmvc&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转发方式一：默认都是转发方式</span></span><br><span class="line">    <span class="comment">// return &quot;hello&quot;;</span></span><br><span class="line">    <span class="comment">// return &quot;../../index&quot;; // return 中允许使用相对路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转发方式二：使用关键字forward</span></span><br><span class="line">    <span class="comment">// return &quot;forward:/index.jsp&quot;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向：使用关键字redirect，且有视图解析器时重定向也能正常使用</span></span><br><span class="line"><span class="comment">     * 重定向本质就是重新请求所以不一定要返回路径也可以是一个新请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="请求参数接受与回显："><a href="#请求参数接受与回显：" class="headerlink" title="请求参数接受与回显："></a>请求参数接受与回显：</h3><h4 id="1-接受基本信息："><a href="#1-接受基本信息：" class="headerlink" title="1. 接受基本信息："></a>1. 接受基本信息：</h4><ul>
<li>@RequestParam：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 请求为：localhost:8080/springmvc_demo03/hello?user=test&amp;password=111</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 普通参数要求请求时的url中name与变量名必须一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pass 当请求中的name与变量名冲突时，在变量前使用<span class="doctag">@RequestParam</span>注解，</span></span><br><span class="line"><span class="comment"> *             并且传入请求中的name</span></span><br><span class="line"><span class="comment"> * 注解<span class="doctag">@RequestParam</span>无论参数名是否一致都建议给变量加上（这是一种规范）</span></span><br><span class="line"><span class="comment"> * 属性：defaultValue 设置默认值，required 为false表示不是必须的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="comment">// 未接受到值的变量为该java类型的默认值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String user, <span class="meta">@RequestParam(&quot;password&quot;)</span> <span class="keyword">int</span> pass, Model model)</span> </span>&#123;</span><br><span class="line">    String msg=<span class="string">&quot;用户名：&quot;</span>+user+<span class="string">&quot;，密码：&quot;</span>+pass;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@RequestHeader：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取请求头中的信息，它的属性与 RequestParam 相同</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello04</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@CookieValue：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取cookie的值，属性同上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello04</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String js)</span></span>&#123;</span><br><span class="line">    System.out.println(js);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接受指定时间格式类型：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM--dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date date; <span class="comment">// 某pojo类中的Date成员属性</span></span><br></pre></td></tr></table></figure>

<h4 id="2-参数封装为对象："><a href="#2-参数封装为对象：" class="headerlink" title="2. 参数封装为对象："></a>2. 参数封装为对象：</h4><p>首先建一个pojo类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略get set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pass;</span><br><span class="line">    <span class="keyword">private</span> Book book; <span class="comment">// 关联Book类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略get set方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>&#123; <span class="keyword">private</span> String name; &#125;</span><br></pre></td></tr></table></figure>

<p>添加接受对象参数的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 请求为：localhost:8080/springmvc_demo03/hello?name=test&amp;pass=111&amp;book.name=mybook</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 请求中的name与该类中有set方法的成员（基本类型和String）名一致时，</span></span><br><span class="line"><span class="comment"> *             将给该成员变量赋值，无映射的成员变量为该java类型的默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 同样name与参数变量名一致时还会给该参数赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(User user,String name, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,user+<span class="string">&quot;,name=&quot;</span>+name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-数据回显："><a href="#3-数据回显：" class="headerlink" title="3. 数据回显："></a>3. 数据回显：</h4><p>我们已经使用过的回显对象有 <strong>ModelAndView ** 和 **Model ** ，还可以使用</strong>Map<strong>传参它们都是利用</strong>BindingAwareModelMap<strong>对象，还有一个 **ModelMap</strong> 它继承了 LinkedMap 不做详解。它们发送的数据都存放在请求域中（request）。</p>
<ul>
<li>SessionAttributes 将上方Model等保存的数据同时在session域中保存，不常用建议使用原生API。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给model存储数据时key等于value数组中值的数据，将同时在session中存储一份</span></span><br><span class="line"><span class="comment">// types 将model中同类型的数据在session中储存一份</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;msg&quot;,&quot;key&quot;&#125; , types = &#123;String.class&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="乱码问题："><a href="#乱码问题：" class="headerlink" title="乱码问题："></a>乱码问题：</h3><p>在web.xml中添加过滤器即可，下方为springmvc自带的字符编码过滤器，也可使用自定义的过滤器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符编码过滤器，必须放在所有过滤器(Filter)之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定要使用的字符编码级 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 响应编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拦截所有请求设置编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 入门</title>
    <url>/2020/08/14/blog/java/ssm/spring/index/</url>
    <content><![CDATA[<h2 id="Spring-入门"><a href="#Spring-入门" class="headerlink" title="Spring 入门"></a><center>Spring 入门</center></h2><h3 id="Spring-简介："><a href="#Spring-简介：" class="headerlink" title="Spring 简介："></a>Spring 简介：</h3><ul>
<li>Spring是一个开源免费，轻量级，非入侵式的框架</li>
<li>重点掌握：控制反转（IOC)，面向切面编程（AOP） </li>
<li>支持事务的处理，对其他框架整合支持</li>
<li><strong>弊端</strong>：配置十分繁琐，人称 “配置地狱”</li>
</ul>
<h3 id="Spring组成："><a href="#Spring组成：" class="headerlink" title="Spring组成："></a>Spring组成：</h3><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。</p>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/spring_framework.gif" alt="Spring 框架是一个分层架构，由 7 个定义良好的模块组成。"></p>
<h4 id="添加-Spring-依赖："><a href="#添加-Spring-依赖：" class="headerlink" title="添加 Spring 依赖："></a>添加 Spring 依赖：</h4><p>由上可知Spring分为许多模块，在使用Spring时我们选择导入 <strong><code>spring-webmvc</code></strong> 依赖。此包中包含了多数我们需要使用的模块。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IOC（控制反转）："><a href="#IOC（控制反转）：" class="headerlink" title="IOC（控制反转）："></a>IOC（控制反转）：</h3><p>控制反转将对象的创建交给了IOC容器，<strong>IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建</strong>。Spring在初始化时先读取配置文件，根据配置文件创建对象并存入<strong>IOC容器</strong>，根据使用再从<strong>IOC容器</strong>中取出需要的对象，即获取对象的方式反转了。</p>
<h3 id="简单入门实例："><a href="#简单入门实例：" class="headerlink" title="简单入门实例："></a>简单入门实例：</h3><h4 id="1-定义两个类："><a href="#1-定义两个类：" class="headerlink" title="1. 定义两个类："></a>1. 定义两个类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//使用了 lombok 注解快速生成了必要方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str; <span class="comment">// 一个字符串</span></span><br><span class="line">    <span class="keyword">private</span> Hi hi; <span class="comment">// 一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-在-resources-文件夹中创将-Bean-配置文件："><a href="#2-在-resources-文件夹中创将-Bean-配置文件：" class="headerlink" title="2. 在 resources 文件夹中创将 Bean 配置文件："></a>2. 在 resources 文件夹中创将 Bean 配置文件：</h4><p>在 resources 文件夹下创建 <strong><code>applicationContext.xml</code></strong> （推荐命名，也可以自定义命名）文件，此文件也称之为 <strong>bean</strong> 文件因为其内部的一个<code>bean</code>标签就表示一个对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean文件的文件头标签与申明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bean：对象配置标签</span></span><br><span class="line"><span class="comment">         id：唯一标识符</span></span><br><span class="line"><span class="comment">         class：对象的全限定名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property：属性赋值，该成员变量必须有set方法(set注入)</span></span><br><span class="line"><span class="comment">             name：该对象的某一属性名（根据set方法决定，set后首字母小写的值）</span></span><br><span class="line"><span class="comment">             value：为该属性赋值（只能是基本类型或String值） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- name：当前对象别名，且可使用“,”逗号“;”分号或者空格三种分隔符取多个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;property&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref：为成员对象引用bean对象，值为bean的id或别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 给bean（对象）取别名，不常用</span></span><br><span class="line"><span class="comment">         name：需要取别名bean的id</span></span><br><span class="line"><span class="comment">         alias：别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;helloAlias&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-编写测试类："><a href="#3-编写测试类：" class="headerlink" title="3. 编写测试类："></a>3. 编写测试类：</h4><p>xml配置对象（bean），必须通过<strong>ClassPathXmlApplicationContext</strong>来获取。它会获取resources文件夹下指定的xml配置文件。所以传入参数时请以resources为根目录传入bean文件的完整路径名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 通过bean文件(xml)获取Spring上下文对象，可传入多个bean文件用“,”分隔。</span></span><br><span class="line"><span class="comment"> * 2. 容器启动后所有的bean实例化为对象，并存入容器了，等待被调用（getBean）。</span></span><br><span class="line"><span class="comment"> * 3. new FileSystemXmlApplicationContext(&quot;绝对路径&quot;);//配置文件在其它位置时可使用此类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 通过 getBean 方法取出对象，并且返回的是Object类型</span></span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;hi1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBean 传入bean的id（或则别名）作为参数，获取对应的对象</span></span><br><span class="line">Hello hello1 = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>); <span class="comment">// id 获取</span></span><br><span class="line"><span class="comment">// User user = context.getBean(User.class); //类型获取，只能有一个该类型bean</span></span><br><span class="line"><span class="comment">// 参2传入对象对应类型的类对象，将返回对应类型</span></span><br><span class="line">Hello hello2 =context.getBean(<span class="string">&quot;Hello&quot;</span>,Hello.class); <span class="comment">// 别名获取</span></span><br><span class="line">System.out.println(hello1+<span class="string">&quot;\n&quot;</span>+hello2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBean同一个bean拿到的是同一个对象（spring默认是单例的）</span></span><br><span class="line">System.out.println(hello1==hello2);</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello(str=property, hi=Hi(str=World))</span><br><span class="line">Hello(str=property, hi=Hi(str=World))</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h4 id="import："><a href="#import：" class="headerlink" title="import："></a>import：</h4><p>此外我们在了解一下<strong>bean文件导入</strong>。如我们将入门案例中bean的 <code>hi1</code> 与 <code>hi2</code> 对象（标签）移到新建名为**<code>hi.xml</code><strong>的bean文件中再回到</strong><code>applicationContext.xml</code><strong>添加如下配置引入<code>hi.xml</code>。不改变其它内容你会发现程序一切正常，这说明我们将<code>hi.xml</code>中的bean成功引入到了</strong><code>applicationContext.xml</code>**中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- import：导入其他的bean文件，resource：文件的相对路径</span></span><br><span class="line"><span class="comment">    当有多个bean文件时，可在一个主bean文件中，使用import导入合并其它需要的bean。</span></span><br><span class="line"><span class="comment">    当多个bean的id或者别名重名时后导入的会覆盖先导入的。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;hi.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="DI（依赖注入，反射赋值）："><a href="#DI（依赖注入，反射赋值）：" class="headerlink" title="DI（依赖注入，反射赋值）："></a>DI（依赖注入，反射赋值）：</h3><h4 id="1-构造器注入："><a href="#1-构造器注入：" class="headerlink" title="1.构造器注入："></a>1.构造器注入：</h4><p>在入门案例 <strong><code>bean</code></strong> 中通过 <strong>property</strong> 标签的<strong>set注入</strong>给对象成员赋值，这里使用的是默认的空参构造函数创建的对象。若需要使用有参构造创建对象则在<strong>bean</strong>中需要使用<strong>constructor-arg</strong>标签，根据属性不同分为三种方式。</p>
<ul>
<li>利用下标：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过构造方法构造对象，下标锁定</span></span><br><span class="line"><span class="comment">          index下标值从0开始，即构造函数参数的下标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-index&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;h2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>利用类型：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型锁定：type除基本类型，其它类型均写全限定名</span></span><br><span class="line"><span class="comment">          通过构造器参数的类型并赋值，来指定构造器创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-type&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span> <span class="attr">value</span>=<span class="string">&quot;h2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>利用参数名称（常用）：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数名锁定：name利用构造器参数的变量名称来锁定构造器，创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解直接赋值，此方式需严格按照构造器参数顺序赋值：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按顺序给构造器属性赋值，也可以搭配index，type等属性来辅助赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-Set-注入（重点）："><a href="#2-Set-注入（重点）：" class="headerlink" title="2. Set 注入（重点）："></a>2. Set 注入（重点）：</h4><p>之前我们已经学过了两种类型的Set注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;values&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.基本类型与String类型利用 value 注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.bean创建的对象利用 ref 引用bean，值为bean对象的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 除 ref 引用外，还可以利用内部 bean 实现对象注入(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：内部bean只能在内部使用，外部无法引用该bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其它类型的Set注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.array标签数组注入，value为每一项的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arrs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>index0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>index1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 4.list标签list集合注入，value为每一项的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>listValue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如需对象可使用bean，&lt;ref bean=&quot;beanId&quot;/&gt;等标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 5.map标签map集合注入，entry中有key和value属性添加值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- value-ref（key-ref）属性可引用bean对象，也可使用内部bean。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 6.set标签set集合注入，一个value为一项元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>setValue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 7.property --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 8.空字符串和null值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 空字符串值：&lt;property name=&quot;empty&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empty&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 级联属性赋值（了解） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;book&quot;</span>/&gt;</span><span class="comment">&lt;!-- 引用对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myBook&quot;</span>/&gt;</span><span class="comment">&lt;!-- 改变引用对象属性的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置信息重用，内容基本一致只有少部分属性需要修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.User&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在此配置需要修改的属性即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可配置设置模板，bean中使用 abstract=&quot;true&quot; 属性，</span></span><br><span class="line"><span class="comment">         表示这个配置是抽象的不能获取实例。其它的bean通过parent属性即可使用该模板 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- bean对象默认是根据配置文件中的先后顺序创建的，如我们有些类想指定在某些类</span></span><br><span class="line"><span class="comment">         创建之后创建可以通过 depends-on=&quot;id,id2&quot; 属性，即指定的bean创建后该bean</span></span><br><span class="line"><span class="comment">         才会被创建。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-p-命名和-c-命名空间注入："><a href="#3-p-命名和-c-命名空间注入：" class="headerlink" title="3. p 命名和 c 命名空间注入："></a>3. p 命名和 c 命名空间注入：</h4><p>p和c命名空间实则就是对 <code>property</code> 和 <code>constructor-arg</code> 标签的简化使用，同时它们的作用还能防止出现标签重复。</p>
<ul>
<li><strong>p命名空间属性注入</strong>：</li>
</ul>
<p>要使用<strong>p命名空间注入</strong>需要在bean文件的头标签（beans）中添加如下属性值（IDEA中可自动生成）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure>

<p>之前注入是利用<code>property</code>对应的name和values属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;values&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启p命名空间后bean中会多出一种p属性，“:”后面跟上此类中可set注入的属性名进行赋值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span> <span class="attr">p:address</span>=<span class="string">&quot;value&quot;</span> <span class="attr">p:</span>**=<span class="string">&quot;***&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可存在多个p属性值，根据bean类的属性而定。对象引用bean对象需要使用 p:属性名-ref=&quot;bean的id&quot; --&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>c命名空间构造器注入</strong>：</li>
</ul>
<p>同理需要在bean文件的头标签（beans）中添加开启<strong>c命名空间注入</strong>的属性值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure>

<p>使用同理：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span> <span class="attr">c:address</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="bean-作用域："><a href="#bean-作用域：" class="headerlink" title="bean 作用域："></a>bean 作用域：</h3><p>入门案例时我们知道**<code>getBean</code>同一个bean的id拿到的是同一个对象<strong>，这是因为</strong>bean作用域<strong>问题。bean的</strong>scope<strong>属性默认值为</strong>singleton<strong>也就是</strong>单例模式**，所有我们拿到的对象始终是同一个的原因。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们通过改变<strong>scope</strong>属性值来改变bean的作用域，它的值有一下几种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">singleton <span class="comment">// 单例模式，Spring默认模式（容器启动完成之前创建对象存入容器）</span></span><br><span class="line">prototype <span class="comment">// 原型模式，每一次getBean创建一个对象</span></span><br><span class="line"><span class="comment">// 一下几种模式是在web开发中使用，此处不做详解</span></span><br><span class="line">request，session，application，websocket</span><br></pre></td></tr></table></figure>

<h3 id="Spring与工厂模式："><a href="#Spring与工厂模式：" class="headerlink" title="Spring与工厂模式："></a>Spring与工厂模式：</h3><h4 id="1-静态工厂："><a href="#1-静态工厂：" class="headerlink" title="1. 静态工厂："></a>1. 静态工厂：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态工厂：</span></span><br><span class="line"><span class="comment">    class：指定工厂类</span></span><br><span class="line"><span class="comment">    factory-method：指定工厂中获取实例的方法</span></span><br><span class="line"><span class="comment">    利用constructor-arg给方法传递参数，只有一个参数时无需name属性</span></span><br><span class="line"><span class="comment">    该工厂bean获取到的对象为实例对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;staticFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneStaticFactory&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;jz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-动态工厂："><a href="#2-动态工厂：" class="headerlink" title="2. 动态工厂："></a>2. 动态工厂：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态工厂（实例工厂）</span></span><br><span class="line"><span class="comment">     1. 先注册实例工厂bean</span></span><br><span class="line"><span class="comment">     2. 在注册实例bean，在实例bean中，</span></span><br><span class="line"><span class="comment">        factory-bean：指定使用的工厂bean</span></span><br><span class="line"><span class="comment">        factory-method：指定工厂中获取实例的方法</span></span><br><span class="line"><span class="comment">        如方法需传参利用constructor-arg传递</span></span><br><span class="line"><span class="comment">        该工厂bean还是工厂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该bean获取到的对象为上工厂bean指针的实例对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airPlane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlane&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;jz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-FactoryBean："><a href="#3-FactoryBean：" class="headerlink" title="3. FactoryBean："></a>3. FactoryBean：</h4><p>Spring中实现了<strong>FactoryBean接口</strong>的类spring会自动识别为工厂类，spring会自动调用工厂方法创建实例。<strong>FactoryBean泛型</strong>为你需要创建的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirPlaneFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">AirPlane</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 返回创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AirPlane <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AirPlane();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 返回创建对象的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;AirPlane&gt; <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AirPlane.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否为单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终在使用时该bean会自动调用 getObject 方法获取实例对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意该类 isSingleton 无论是否单例都只用调用该bean时才会<strong>创建实例对象</strong>。</p>
<h3 id="Spring-后置处理器："><a href="#Spring-后置处理器：" class="headerlink" title="Spring 后置处理器："></a>Spring 后置处理器：</h3><p>spring中实现<strong>BeanPostProcessor</strong>接口的类并注册为bean后被自动识别为后置处理器。该类的两个监控方法会在Spring初始化每一个bean时调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 初始化之前，参1 当前bean对象，参2bean对象name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 初始化之后，参1 当前bean对象，参2bean对象name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动装配（autowire）："><a href="#自动装配（autowire）：" class="headerlink" title="自动装配（autowire）："></a>自动装配（autowire）：</h3><p>有如下三个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123; <span class="comment">// 猫</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; <span class="comment">// 狗</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123; <span class="comment">// 人（同时管理猫和狗）</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在bean文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Cat&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;猫&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狗&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置人和动物类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bean中提供了一种属性<strong>autowire</strong>来帮我们管理像上方这种简单的关系：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式会根据我们选的模式自动匹配对象对应的成员值，这里的<strong>byName</strong>模式表示<strong>根据对象的成员变量名和bean文件中bean的id进行匹配</strong>。没找到赋值为null。</p>
<p>此外还有一种模式<strong>byType</strong>，<strong>根据对象中成员变量的类型与bean文件中bean的类型进行匹配</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在此案例中<strong>byName</strong>和<strong>byType</strong>效果完全一样，但在其它复杂程序中就不一定了。<strong>byType</strong>模式有必要保证匹配的类型在bean文件中全局唯一，即需匹配类型在bean文件中有两个同类型的bean时将无法匹配并且报错，没有时赋值为null，<strong>byName</strong>要保证变量名与bean的id一致。</p>
<p>Spring还提供了 <strong>constructor</strong> 自动赋值利用构造器赋值，它先按照 <strong>类型自动装配</strong> 存在多个时在按照<strong>id属性名</strong>装配，不存在赋值为null：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>ioc</tag>
        <tag>工厂模式</tag>
        <tag>动态工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 动态SQL</title>
    <url>/2020/08/11/blog/java/ssm/mybatis/advanced/</url>
    <content><![CDATA[<h2 id="注解，多表查询与动态SQL，缓存"><a href="#注解，多表查询与动态SQL，缓存" class="headerlink" title="注解，多表查询与动态SQL，缓存"></a><center>注解，多表查询与动态SQL，缓存</center></h2><h3 id="使用注解开发："><a href="#使用注解开发：" class="headerlink" title="使用注解开发："></a>使用注解开发：</h3><p>使用注解进行开发时要注意：注解来映射简单语句会使代码显得更加简洁，但复杂的操作，最好用 XML 来映射语句。</p>
<p>使用注解的方法就不用创建Mapper.xml（可以创建），因此在<code>mybatis-config.xml</code>配置文件中注册映射器时建议使用<code>mapper</code>的<strong>class</strong>属性利用Mapper接口来注册映射器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-利用注解查表（-Select）："><a href="#1-利用注解查表（-Select）：" class="headerlink" title="1. 利用注解查表（@Select）："></a>1. 利用注解查表（@Select）：</h4><p>在Mapper接口中定义查询方法，并在方法上使用 <code>@Select</code>注解，参数为SQL查询语句字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;UserPojo&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>使用按正常步骤调用方法即可。</p>
<p>存在多个参数时使用注解方式就能不再利用对象传参了，在参数（参数必须为基本类型）前使用<code>@Param</code>注解并给参数取别名，在SQL语句中直接**<code>#&#123;别名&#125;</code>**方式调用参数即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where name=#&#123;name&#125; and age=#&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;UserPojo&gt; <span class="title">findUserList</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="keyword">int</span> age)</span></span>;</span><br></pre></td></tr></table></figure>

<p>此方法定义的参数也可在Mapper.xml中直接使用，并且不用<strong>parameterType</strong>属性声明类型：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where name=#&#123;name&#125; and age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-增（Insert-）："><a href="#2-增（Insert-）：" class="headerlink" title="2. 增（Insert@）："></a>2. 增（Insert@）：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="keyword">int</span> age)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-改（Update-）："><a href="#3-改（Update-）：" class="headerlink" title="3. 改（Update@）："></a>3. 改（Update@）：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="keyword">int</span> age)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="4-删（Delete-）："><a href="#4-删（Delete-）：" class="headerlink" title="4. 删（Delete@）："></a>4. 删（Delete@）：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="Mybatis-执行流程解析："><a href="#Mybatis-执行流程解析：" class="headerlink" title="Mybatis 执行流程解析："></a>Mybatis 执行流程解析：</h3><ol>
<li>获取加载<strong>resources</strong>中的全局配置文件流（mybatis-config.xml）。</li>
<li>实例化<strong>SqlSessionFactoryBuilder</strong>调用<strong>build</strong>方法通过配置文件流解析配置文件（底层使用XMLConfigBuilder对象解析xml文件）。利用<strong>Configuration</strong>对象存储所有配置信息。</li>
<li><strong>SqlSessionFactory</strong>实例化。</li>
<li><strong>transactional</strong>事务管理器。</li>
<li>创建<strong>executor</strong>执行器。</li>
<li>创建<strong>SqlSession</strong>。</li>
<li>实现CRUD（SQL增删改查操作），若事务出现问题<strong>事务回滚到第4步</strong>。</li>
<li>查看CRUD是否执行成功，失败则<strong>回滚到第4步</strong>。</li>
<li>提交事务并关闭<strong>SqlSession</strong>。</li>
</ol>
<blockquote>
<p>之前我们说过MyBatis对数据库的增删改操作<code>SqlSession</code>必须手动提交事务（commit）才能表修改成功。Mybatis中也提供了指定提交事务的方法：</p>
<p> <strong><code>sqlSessionFactory.openSession(true)</code></strong> </p>
<p>即在创建<code>SqlSession</code>时在<code>openSession</code>方法中传入<code>true</code>参数则此<code>SqlSession</code>执行的增删改方法都会自动提交事务。</p>
</blockquote>
<h3 id="Lombok-使用："><a href="#Lombok-使用：" class="headerlink" title="Lombok 使用："></a>Lombok 使用：</h3><ol>
<li><p>idea在settings的插件中搜索 <strong>lombok</strong> 下载。为了使用提示功能。</p>
</li>
<li><p>导入<strong>lombok</strong>的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 建议去掉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注解与使用：</p>
<ul>
<li><strong>@Data</strong>：在 <strong>类</strong> 上，提供类所有属性的 get 和 set 方法，还提供了equals、canEqual、hashCode、toString 方法。</li>
<li><strong>@Setter</strong>：在 <strong>属性</strong> 上，为单个属性提供 set 方法。在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</li>
<li><strong>@Getter</strong>：与 @Setter 类似。</li>
<li><strong>@Log4j</strong>：在 <strong>类</strong> 上，为类提供一个 属性名为 log 的 log4j 日志对象，提供默认构造方法。</li>
<li><strong>@AllArgsConstructor</strong>：在 <strong>类</strong> 上，为类提供一个全参的构造方法，将覆盖默认的空参构造。</li>
<li><strong>@NoArgsConstructor</strong>：在 <strong>类</strong> 上；为类提供一个无参的构造方法。</li>
<li><strong>@EqualsAndHashCode</strong>：在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</li>
<li><strong>@ToString</strong>：在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</li>
<li><strong>@Value</strong>：在 <strong>类</strong> 上，生成含所有参数的构造方法，get 方法，还提供equals、hashCode、toString 方法。</li>
</ul>
</li>
</ol>
<h3 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h3><p>现在使用这两个表作为演示：</p>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/test2.jpg" alt="学生表和老师表"></p>
<p>学生表实例类（pojo）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; <span class="comment">// get和set等方法省略...，请自行补齐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;<span class="comment">//老师对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>老师表实例类（pojo）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123; <span class="comment">// get和set等方法省略...，请自行补齐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-多对一"><a href="#1-多对一" class="headerlink" title="1. 多对一:"></a>1. 多对一:</h4><p><strong>需求</strong>：查询所用学生并且查出每个学生对应的老师。</p>
<p>定义Mapper接口与方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getStudentsList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法一</strong>：Mapper.xml中通过 <code>association</code> 的<strong>select</strong>属性进行<strong>子查询</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.查询学生表，并设置结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置结果集为学生类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id和name默认即可不用配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association：当实体类成员变量为对象时使用，给对象设置结果集</span></span><br><span class="line"><span class="comment">             column：将传递给子查询的参数</span></span><br><span class="line"><span class="comment">             property：对应的成员变量（对象）</span></span><br><span class="line"><span class="comment">             javaType：指定该成员变量的java类型(这里使用的类型别名)</span></span><br><span class="line"><span class="comment">             select：绑定子查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeachersList&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.作为子查询查询老师表，查询条件为父查询的tid值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeachersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二（建议使用）</strong>：直接使用SQL<strong>多表查询</strong>，再配置结果集映射数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.书写多表查询SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select s.id id,s.name name,t.id tid,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.设置结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为是多表查询所以所有的字段都需要映射到指定成员变量上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association：给对象设置结果集</span></span><br><span class="line"><span class="comment">        property：指定那个成员对象（成员对象变量名）</span></span><br><span class="line"><span class="comment">        javaType：对象的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置对应的结果集到该对象对应的成员变量上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-一对多："><a href="#2-一对多：" class="headerlink" title="2. 一对多："></a>2. 一对多：</h4><p><strong>需求</strong>：查询指定老师并查出该老师的所有学生。</p>
<p>定义Mapper接口与方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Teacher&gt; <span class="title">findTeacher</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法一</strong>：Mapper.xml中通过 <code>association</code> 的<strong>select</strong>属性进行<strong>子查询</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为id字段在下方被使用，默认映射被覆盖</span></span><br><span class="line"><span class="comment">        在此必须指定id字段的映射否则不被赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collection：为集合元素指定结果集映射</span></span><br><span class="line"><span class="comment">             column：传递给子查询的参数</span></span><br><span class="line"><span class="comment">             property：对应的成员变量名</span></span><br><span class="line"><span class="comment">             javaType：该成员变量的java类型</span></span><br><span class="line"><span class="comment">             ofType：该集合元素的java类型</span></span><br><span class="line"><span class="comment">             select：绑定子查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方法二（建议使用）</strong>：直接使用<strong>多表查询</strong>，再配置结果集映射数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    select t.id tid,t.name tname,s.id sid,s.name sname</span><br><span class="line">    from teacher t,student s</span><br><span class="line">    where t.id=#&#123;id&#125; and t.id=s.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collection：当成员变量为集合时使用，给集合中的元素设置结果集</span></span><br><span class="line"><span class="comment">             property：对应的集合变量名</span></span><br><span class="line"><span class="comment">             ofType：指定集合中每个元素的java类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为集合中元素对象做结果集映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-多表查询总结："><a href="#3-多表查询总结：" class="headerlink" title="3. 多表查询总结："></a>3. 多表查询总结：</h4><ol>
<li>多对一：结果集映射到 <strong>对象</strong> 使用 <strong>association</strong> 标签</li>
<li>一对多：结果集映射到 <strong>集合</strong> 使用 <strong>collection</strong> 标签</li>
<li>绑定子查询时 <strong>column</strong> 属性中的字段值将作为参数传递到子查询中，通过 <code>#&#123;字段名&#125;</code> 直接调用</li>
<li><strong>javatype</strong> ：指定实体类中成员变量的java类型</li>
<li><strong>ofType</strong> ：当成员变量为集合时指定其元素的java类型（泛型的类型）</li>
<li>多对一（association），一对多（collection）可无限嵌套</li>
</ol>
<h3 id="动态sql："><a href="#动态sql：" class="headerlink" title="动态sql："></a>动态sql：</h3><p><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">Mybatis动态SQL官方API：https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p>
<p>Mybatis动态SQL标签与<strong>JSTL</strong>（jsp）类似，你对动态 SQL 元素可能会感觉似曾相识。</p>
<h4 id="1-if："><a href="#1-if：" class="headerlink" title="1. if："></a>1. if：</h4><p>传入的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小张&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>if标签中<strong>test</strong>属性值就是条件，当条件成立时标签内的内容才会显现。并且你可以发现在<strong>test</strong>属性值内访问参数不需要再通过 <strong><code>#&#123;&#125;</code></strong> 就可以直接访问：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;true&quot;</span>&gt;</span>id,name<span class="tag">&lt;/<span class="name">if</span>&gt;</span> from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>and id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-choose、when、otherwise："><a href="#2-choose、when、otherwise：" class="headerlink" title="2. choose、when、otherwise："></a>2. choose、when、otherwise：</h4><p><strong>choose</strong>与java中的<strong>switch</strong>类似，一旦一个<strong>when</strong>满足test条件其它的就不会再判断其它<strong>when</strong>。<strong>otherwise</strong>只有当所有的when都不满足时调用。when和otherwise中可嵌套if，if中可嵌套choose。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;true&quot;</span>&gt;</span>id,name<span class="tag">&lt;/<span class="name">if</span>&gt;</span> from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>where id=3<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            where 1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-trim、where、set："><a href="#3-trim、where、set：" class="headerlink" title="3. trim、where、set："></a>3. trim、where、set：</h4><ul>
<li><strong>where</strong>：<em>where</em> 标签在SQL语句中只在需要使用where的位置使用，并只会在<strong>子元素返回内容的情况下</strong>才插入 <strong>where</strong>关键字 。而且若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素会将它们自动去除。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>or id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>set</strong>：<em>set</em> 标签在SQL语句中只在需要使用set的位置使用，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会<strong>自动删掉额外的逗号</strong>。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name=#&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tid != null&quot;</span>&gt;</span>tid=#&#123;tid&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id !=null&quot;</span>&gt;</span>and id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行后SQL语句为 <strong><code>update student SET name=?, tid=? WHERE id=?</code></strong> 可以看到 <code>tid=#&#123;tid&#125;,</code> 后的<strong>，</strong>逗号被去除。还有 <code>and id=#&#123;id&#125;</code> 判断开头的 <code>and</code> 也自动去除。</p>
<ul>
<li><strong>trim</strong>：请到官网了解，它就是定义去除关键字的标签。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定制 where 元素的功能，去除内容开头的and或者or --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定制 set 元素的功能，去除内容末尾的逗号（，） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-foreach："><a href="#4-foreach：" class="headerlink" title="4. foreach："></a>4. foreach：</h4><ul>
<li>首先我们了解一下<strong>SQL片段</strong>：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sql标签：定义SQL片段</span></span><br><span class="line"><span class="comment">        id：唯一标记名</span></span><br><span class="line"><span class="comment">        标签内是需要复用的语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>or id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        /* 在SQL语句中需要使用的地方通过 include 标签来引用 */</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-id-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>foreach的使用</strong>：</li>
</ul>
<p>Mapper接口中定义方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Param注解取别名方便在SQL中调用，也可Map传参put一个List</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findStuForeach</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Object&gt; ids)</span></span>;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml中使用<strong>foreach</strong>动态编写SQL语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- collection：可遍历的集合</span></span><br><span class="line"><span class="comment">    item：遍历集合元素时的别名</span></span><br><span class="line"><span class="comment">    open：语句开始位置的值</span></span><br><span class="line"><span class="comment">    close：语句接受位置的值</span></span><br><span class="line"><span class="comment">    separator：每个item之间的分隔符</span></span><br><span class="line"><span class="comment">    标签内为每一次遍历拼接的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuForeach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用后拼接为：<code>select * from student where id in ( ? , ? ,...)</code></p>
<h3 id="Mybatis-缓存："><a href="#Mybatis-缓存：" class="headerlink" title="Mybatis 缓存："></a>Mybatis 缓存：</h3><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">Mybatis 缓存官方文档：https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p>
<h4 id="1-缓存简介："><a href="#1-缓存简介：" class="headerlink" title="1.缓存简介："></a>1.缓存简介：</h4><p>缓存就是将用户<strong>经常查询并且不经常改变的数据</strong>放在缓存中，就不用多次从数据库中去查询重复的数据。Mybatis中默认定义了<strong>两级缓存</strong>。一级缓存默认开启，二级缓存需用手动开启。</p>
<h4 id="2-一级缓存："><a href="#2-一级缓存：" class="headerlink" title="2.一级缓存："></a>2.一级缓存：</h4><ul>
<li>一级缓存是默认开启的，也无法关闭。一个<strong>SqlSession</strong>就是一个一级缓存，一级缓存的作用域是一个<strong>SqlSession</strong>创建到关闭内。</li>
<li>同一个<strong>SqlSession</strong>查询同样的数据，只有第一次会从数据库查询。之后都是从缓存中获取，除非<strong>SqlSession</strong>执行清空缓存 <code>clearCache</code> 或者<strong>执行insert、update 和 delete 语句都会刷新缓存</strong>。</li>
</ul>
<p><strong>实例1</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession1 = GetSqlSession.getSqlSession();</span><br><span class="line">StudentMapper mapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">mapper.getAll(); <span class="comment">// 查询表中所有数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">mapper.getAll(); <span class="comment">// 再次查询表中所有数据</span></span><br><span class="line">sqlSession1.close();</span><br></pre></td></tr></table></figure>

<p><strong>部分日志</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student        <span class="comment">// 第一次执行数据库查询</span></span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, tid</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 小明, <span class="number">1</span></span><br><span class="line">&lt;==        Row: <span class="number">2</span>, 小红, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">2</span></span><br><span class="line">==================</span><br><span class="line"><span class="comment">// 打印 “=” 后，日志中再未出现数据库查询操作，说明二次查询直接来自一级缓存</span></span><br></pre></td></tr></table></figure>

<p><strong>实例2</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession1 = GetSqlSession.getSqlSession();</span><br><span class="line">StudentMapper mapper = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">mapper.getAll();</span><br><span class="line">mapper.updateStudent(map); <span class="comment">// sqlSession1.clearCache()直接刷新缓存</span></span><br><span class="line">sqlSession1.commit();</span><br><span class="line">mapper.getAll();</span><br><span class="line">sqlSession1.close();</span><br></pre></td></tr></table></figure>

<p><strong>部分日志</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: update student SET name=?, tid=? WHERE id=?</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line"><span class="comment">// 可以看出执行了三次SQL数据库操作，说明更改数据时刷新了缓存</span></span><br></pre></td></tr></table></figure>

<p><strong>实例3：</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession1 = GetSqlSession.getSqlSession();</span><br><span class="line">SqlSession sqlSession2 = GetSqlSession.getSqlSession();</span><br><span class="line">StudentMapper mapper1 = sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">StudentMapper mapper2 = sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line">mapper1.getAll();</span><br><span class="line">mapper2.getAll();</span><br><span class="line">sqlSession1.close();</span><br><span class="line">sqlSession2.close();</span><br></pre></td></tr></table></figure>

<p><strong>部分日志</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line"><span class="comment">// 执行了两次数据库查询，由此可知一个 SqlSession 对应一个一级缓存，不同一级缓存之间无法互通。</span></span><br></pre></td></tr></table></figure>

<h4 id="3-二级缓存："><a href="#3-二级缓存：" class="headerlink" title="3.二级缓存："></a>3.二级缓存：</h4><p>要启用全局的二级缓存，只需要在你的 SQL 映射文件（Mapper.xml）中添加一行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当然也可以配置属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>二级缓存作用域是一个Mapper.xml。也就是说只要<code>getMapper(Mapper.class)</code>对应同一个文件Mapper.xml，那么它们就是同一个二级缓存。</li>
<li><strong>工作机制</strong>：一个<strong>SqlSession</strong>查询一条数据，查询完成后首先会放在<strong>一级缓存</strong>中。当一级缓存（<strong>SqlSession</strong>）被<strong>关闭</strong>时一级缓存中的数据会被转存到二级缓存中。</li>
<li><strong>查询机制</strong>：查询数据时首先会到 <strong>二级缓存</strong> 再查询 <strong>一级缓存</strong> 最后还是没有则从<strong>数据库查询</strong>。</li>
</ul>
<h4 id="4-自定义缓存："><a href="#4-自定义缓存：" class="headerlink" title="4.自定义缓存："></a>4.自定义缓存：</h4><p>请了解数据库底层后再查看官网。</p>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>Lombok</tag>
        <tag>多表查询</tag>
        <tag>动态SQL</tag>
        <tag>mybatis 缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 配置</title>
    <url>/2020/08/07/blog/java/ssm/mybatis/config/</url>
    <content><![CDATA[<h2 id="配置文件，日志，分页"><a href="#配置文件，日志，分页" class="headerlink" title="配置文件，日志，分页"></a><center>配置文件，日志，分页</center></h2><h3 id="核心配置文件解析与优化："><a href="#核心配置文件解析与优化：" class="headerlink" title="核心配置文件解析与优化："></a>核心配置文件解析与优化：</h3><p>详情请看：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">官方配置文档</a></p>
<blockquote>
<p>注意官方规定<code>mybatis-config.xml</code>文件中<code>configuration</code>标签中的配置标签必须遵循如下顺序：</p>
<p><code>properties</code> → <code>settings</code> → <code>typeAliases</code> → <code>typeHandlers</code> → <code>objectFactory</code> → <code>objectWrapperFactory</code> → <code>reflectorFactory</code> → <code>plugins</code> → <code>environments</code> → <code>databaseIdProvider</code> → <code>mappers</code></p>
</blockquote>
<h4 id="1-环境配置（environments）："><a href="#1-环境配置（environments）：" class="headerlink" title="1. 环境配置（environments）："></a>1. 环境配置（environments）：</h4><p>从我们熟悉的 <code>environments</code> 标签入手，首先看一下官方提供的环境配置的模板：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>环境与配置：<code>environments</code> 内配置环境可存在多个环境，一个<code>environment</code> 就是一个环境。<code>environments</code> 中的 <strong>default</strong> 值应为某个<code>environment</code> 环境的 <strong>id</strong> 值，它表示默认使用那一个环境。</p>
<ul>
<li><p>此外官方还提到：<strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
</li>
<li><p>如果你连接多个数据库，就需要创建多个 SqlSessionFactory 实例。mybatis提供了以下4种方法创建SqlSessionFactory 实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两种使用`environments`默认的环境</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, properties);</span><br><span class="line"><span class="comment">// 以下两种可利用参2根据传入`environment`的id来确认使用某个环境</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>事务管理：<code>transactionManager</code> 有两种类型事务管理器即 <strong>type</strong> 的值有 <strong>JDBC</strong> 和 <strong>MANAGED</strong> 两个：</p>
<ul>
<li>JDBC：直接使用了 <strong>JDBC 的提交和回滚设施</strong>，它依赖从数据源获得的连接来管理事务作用域。</li>
<li>MANAGED：几乎不用。mybatis自身不会去实现事务管理，让程序的容器来实现事务的管理。</li>
<li>官方提到使用 Spring + MyBatis，没有必要配置事务管理器可写成：<code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></li>
</ul>
</li>
<li><p>数据源：<code>dataSource</code> 使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源：</p>
<ul>
<li><code>dataSource</code> 属性 <strong>type</strong> 的值有3种其中默认 <strong>POOLED</strong> ：利用“池”将 JDBC 连接对象组织起来，避免创建新的连接实例花费时间。 一般常用此属性，能使并发 Web 应用快速响应请求。</li>
<li><code>property</code>：中<strong>name</strong>属性常配置的有4个：1. <code>driver</code> JDBC 驱动的 Java 类全限定名，2. <code>url</code> 数据库的 JDBC URL 地址，3.<code>username</code> 登录数据库的用户名，4. <code>password</code> 登录数据库的密码。需要在 <strong>value</strong> 属性中赋予响应的值。</li>
</ul>
</li>
</ol>
<h4 id="2-属性（properties）："><a href="#2-属性（properties）：" class="headerlink" title="2. 属性（properties）："></a>2. 属性（properties）：</h4><p>利用典型的 Java 属性文件(properties后缀)动态配置属性。在 <code>resources</code> 文件夹下新建文件 <strong>db.properties</strong> (文件名可自定义)，文件中 <strong>=</strong> 号前为 <strong>key</strong> 后为 <strong>value</strong>：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">991314</span></span><br></pre></td></tr></table></figure>

<p>在 <strong>mybatis-config.xml</strong> 文件的<code>configuration</code>标签中利用<code>properties</code>标签引入属性文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时就可以利用属性文件动态的替换属性值了，在需要引用的地方利用 <code>$&#123;key&#125;</code> 的方式动态替换。如官方提供的环境配置模板中数据库连接配置处正是使用了此种方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>properties</code> 除引入属性文件以外，还能在其内部利用<code>property</code>标签定义键值对。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当<code>properties</code>中和属性文件内都定义了key相同的键值对时会发生什么，我们看一段官方的文档内容：</p>
<ul>
<li>首先读取在 properties 元素体内指定的属性。</li>
<li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li>
<li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li>
</ul>
<p>由此可知标签内的键值对先被读取，再读取属性文件内的值。所以属性文件内的值会覆盖标签的定义值。</p>
<h4 id="3-类型别名（typeAliases）："><a href="#3-类型别名（typeAliases）：" class="headerlink" title="3.类型别名（typeAliases）："></a>3.类型别名（typeAliases）：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.pojo.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上在Mapper.xml中设置select的返回值类型时使用了<code>resultType=&quot;io.github.ruoxijun.pojo.UserPojo&quot;</code>完整路径类名的方式声明类型，项目中不止一个地方会用到这个全名。书写全名是比较繁琐的因此给它<strong>取别名</strong>是最好的选择。</p>
<ol>
<li><strong>Mybatis-config.xml</strong>中<code>typeAlias</code>配置单个类型别名：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- typeAliases别名组标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- typeAlias别名配置:</span></span><br><span class="line"><span class="comment">        type：类型名要完整的路径全名</span></span><br><span class="line"><span class="comment">        alias：别名（可以理解为变量名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;io.github.ruoxijun.pojo.UserPojo&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userPojo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后在需要使用此类型名的地方引用此别名即可，如上例可替换为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>Mybatis-config.xml</strong>中<code>package</code>配置包中所有类的类型别名：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;io.github.ruoxijun.pojo&quot;</span> /&gt;</span><span class="comment">&lt;!-- typeAliases标签内 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>此配置此包内的所有类都会自动取别名，且<strong>别名为忽视大小写的类名</strong>。官方推荐引用时采用<strong>类名首字母小写</strong>的方式引用。</p>
<ol start="3">
<li>使用注解取别名：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span> <span class="comment">// 为此类取别名为 user</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPojo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>此三种方式可随意使用不冲突，同时使用时取的所有别名都可生效都可引用。</p>
<h4 id="4-映射器（mappers）："><a href="#4-映射器（mappers）：" class="headerlink" title="4. 映射器（mappers）："></a>4. 映射器（mappers）：</h4><p>之前我们在<code>mybatis-config.xml</code>的mapper中利用<strong>resource</strong>属性注册的Mapper.xml就是映射器。这只是注册映射器的方法之一：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;io/github/ruoxijun/mapper/UserMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用映射器接口实现类的完全限定类名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：此方式要求Mapper接口和Mapper.xml的<strong>文件名必须同名且在同一个包下</strong>。</p>
<ul>
<li>将包内的映射器接口实现全部注册为映射器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;io.github.ruoxijun.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：此方式要求Mapper接口和Mapper.xml的<strong>文件名必须同名且在同一个包下</strong>。</p>
<h3 id="resultMap-结果集映射："><a href="#resultMap-结果集映射：" class="headerlink" title="resultMap 结果集映射："></a>resultMap 结果集映射：</h3><p>之前我们写数据库表的对应字段类时要求，类中成员变量名与字段名要相同。这时我<strong>将第3个成员变量<code>age</code>改为<code>a</code>**。运行查询表所有信息后</strong>a为的值全为0**也就是没有赋值，可知Mybatis是根据字段名是否匹配来做操作的。</p>
<h5 id="1-因此对于查表可以利用SQL查询语句给-字段取别名-方式来解决字段名不同的问题："><a href="#1-因此对于查表可以利用SQL查询语句给-字段取别名-方式来解决字段名不同的问题：" class="headerlink" title="1.因此对于查表可以利用SQL查询语句给 字段取别名 方式来解决字段名不同的问题："></a>1.因此对于查表可以利用SQL查询语句给 <em>字段取别名</em> 方式来解决字段名不同的问题：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span> &gt;</span></span><br><span class="line">    select id,name,age as a from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但这不是最好的方法，Mybatis有更好的方案来解决此类问题。</p>
<h5 id="2-在Mapper-xml中-mapper标签内-配置resultMap结果映射："><a href="#2-在Mapper-xml中-mapper标签内-配置resultMap结果映射：" class="headerlink" title="2. 在Mapper.xml中(mapper标签内)配置resultMap结果映射："></a>2. 在Mapper.xml中(mapper标签内)配置resultMap结果映射：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id：此结果映射集的id</span></span><br><span class="line"><span class="comment">    type：表字段对应的字段类(pojo类)，这里使用的该类的类型别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于字段名和成员变量同名的字段可以不用配置默认即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column：数据库字段名</span></span><br><span class="line"><span class="comment">        property：映射到此类指定的变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;a&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用时不能在使用<strong>resultType</strong>属性，该为<strong>resultMap</strong>属性值为自定义属性结果集的<strong>id</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> &gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有自行配置<strong>resultMap</strong>之前Mybatis自动创建了一个默认的字段名与映射名相同的<strong>resultMap</strong>。这也是为什么之前我要求类的成员变量名与表的字段名对应的原因。、</p>
<h3 id="日志："><a href="#日志：" class="headerlink" title="日志："></a>日志：</h3><h4 id="settings-设置："><a href="#settings-设置：" class="headerlink" title="settings 设置："></a>settings 设置：</h4><p>学习日志前先了解一下 Mybatis 核心配置文件中的 <strong>settings</strong> 这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p><strong>settings</strong> 每一项  <strong>setting</strong> 标签就是一项设置，通过指定属性<code>name</code>和<code>value</code>的值来完成一项设置。其中包括日志的设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis 中的调整设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- logImpl：日志实现 </span></span><br><span class="line"><span class="comment">        STDOUT_LOGGING：控制台日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名自动映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="控制台日志（STDOUT-LOGGING）："><a href="#控制台日志（STDOUT-LOGGING）：" class="headerlink" title="控制台日志（STDOUT_LOGGING）："></a>控制台日志（STDOUT_LOGGING）：</h4><p>上方对<strong>setting</strong>的设置指定使用了控制台日志，运行以后大致会输出以下日志内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开 JDBC 的连接</span></span><br><span class="line">Opening JDBC Connection</span><br><span class="line"><span class="comment">// 创建一个 connection (连接对象)</span></span><br><span class="line">Created connection <span class="number">247944893.</span></span><br><span class="line"><span class="comment">// 在 JDBC 连接上将 autocommit (事务自动提交)设置为 false</span></span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 执行的 SQL 语句</span></span><br><span class="line">==&gt;  Preparing: select * from user</span><br><span class="line"><span class="comment">// 传入的参数(此处参数为空)</span></span><br><span class="line">==&gt; Parameters: </span><br><span class="line"><span class="comment">// 查询的信息</span></span><br><span class="line">&lt;==    Columns: id, name, age</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 张三, <span class="number">10</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="comment">// 打印的数据(System.out.println)</span></span><br><span class="line">UserPojo&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;张三&#x27;</span>, a=<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">// 在 JDBC 连接上将 autocommit 重置为 true</span></span><br><span class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection[com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 关闭 JDBC 连接</span></span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 将连接返回数据库连接池</span></span><br><span class="line">Returned connection <span class="number">247944893</span> to pool.</span><br></pre></td></tr></table></figure>

<h4 id="LOG4J-日志："><a href="#LOG4J-日志：" class="headerlink" title="LOG4J 日志："></a>LOG4J 日志：</h4><h5 id="文件配置实现日志："><a href="#文件配置实现日志：" class="headerlink" title="文件配置实现日志："></a>文件配置实现日志：</h5><ol>
<li><p>同在 <strong>settings</strong> 中配置使用 <strong>LOG4J</strong>：<code>&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</code></p>
</li>
<li><p>光设置还不能使用我们还需要导入<strong>LOG4J</strong>依赖，在<strong>pom.xml</strong>中导入log4j的包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<strong>properties</strong>中新建配置文件<strong>log4j.properties</strong>：</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p> 现在就已经实现对Mybatis的日志打印了。</p>
</li>
</ol>
<h5 id="代码中简单使用LOG4J日志："><a href="#代码中简单使用LOG4J日志：" class="headerlink" title="代码中简单使用LOG4J日志："></a>代码中简单使用<strong>LOG4J</strong>日志：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取日志对象(建议设置为类对象)需要当前类的class对象作为参数</span></span><br><span class="line">Logger logger = Logger.getLogger(Demo.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 三种不同级别的日志打印方式</span></span><br><span class="line">    logger.info(<span class="string">&quot;Log4j日志打印级别：info&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;Log4j日志打印级别：debug&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;Log4j日志打印级别：error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据分页："><a href="#查询数据分页：" class="headerlink" title="查询数据分页："></a>查询数据分页：</h3><h4 id="1-SQL语句-limit-实现分页："><a href="#1-SQL语句-limit-实现分页：" class="headerlink" title="1. SQL语句 limit 实现分页："></a>1. SQL语句 <strong>limit</strong> 实现分页：</h4><p>分页查询数据最简单最实用的方法就是在Mapper.xml中书写SQL语句时使用 <strong>limit</strong> 实现分页查询。</p>
<p>Mapper接口中定义分页查询方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;UserPojo&gt; <span class="title">getUserLimit</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml中书写SQL语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLimit&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用（此处省略获取mapper实例等步骤）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;UserPojo&gt; userLimit = mapper.getUserLimit(map);</span><br></pre></td></tr></table></figure>

<h4 id="2-使用-RowBounds-对象方式-了解-："><a href="#2-使用-RowBounds-对象方式-了解-：" class="headerlink" title="2. 使用 RowBounds 对象方式(了解)："></a>2. 使用 RowBounds 对象方式(了解)：</h4><p>RowBounds只是逻辑上的分页，它是将SQL已经查询到的数据进行分页。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数参数与limit类似：参1表示数据开始位置角标，参2表示当前页的数据个数</span></span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">SqlSession sqlSession = GetSqlSession.getSqlSession();</span><br><span class="line"><span class="comment">// 参1为 Mapper 接口的全名加使用的方法名，参3传入 RowBounds 即可</span></span><br><span class="line">List&lt;UserPojo&gt; userPojoList = sqlSession</span><br><span class="line">    .selectList(<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper.getUserList&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, rowBounds);</span><br><span class="line"><span class="keyword">for</span> (UserPojo user : userPojoList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<h4 id="3-MyBatis-分页插件-PageHelper-："><a href="#3-MyBatis-分页插件-PageHelper-：" class="headerlink" title="3. MyBatis 分页插件 PageHelper ："></a>3. MyBatis 分页插件 PageHelper ：</h4><p><a href="https://pagehelper.github.io/">MyBatis 分页插件官网（内有文档使用教程）</a></p>
<ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>mybatis配置文件中配置插件：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!-- 分页合理化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参1：当前第几页，参2：每页的数据量（数据条数）</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 紧跟在上方法后的第一个MyBatis 查询方法会被进行分页</span></span><br><span class="line">List&lt;User&gt; users= UserService.getAll();</span><br><span class="line"><span class="comment">// PageInfo对结果进行包装,参1：查询的数据集合，参2：连续显示的页数</span></span><br><span class="line">PageInfo pageInfo = <span class="keyword">new</span> PageInfo(users,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;当前页码：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;总页码：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;总记录数&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;连续显示的页码：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span>[] nums = pageInfo.getNavigatepageNums();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot; &quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;当前页数据：&quot;</span>);</span><br><span class="line">List&lt;User&gt; list = pageInfo.getList();</span><br><span class="line"><span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>LOG4j</tag>
        <tag>PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 基础入门</title>
    <url>/2020/07/17/blog/java/ssm/mybatis/index/</url>
    <content><![CDATA[<h2 id="MyBatis-入门"><a href="#MyBatis-入门" class="headerlink" title="MyBatis 入门"></a><center>MyBatis 入门</center></h2><h3 id="MyBatis-环境配置与简单查询实例："><a href="#MyBatis-环境配置与简单查询实例：" class="headerlink" title="MyBatis 环境配置与简单查询实例："></a>MyBatis 环境配置与简单查询实例：</h3><blockquote>
<p>MyBatis 就是封装版的 JDBC 简化了对数据库的操作：</p>
<p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">MyBatis 中文官网</a></p>
<p><a href="https://github.com/mybatis/mybatis-3/releases">MyBatis 各版本下载位置</a></p>
</blockquote>
<h4 id="1-创建maven程序，添加依赖-jar-包-："><a href="#1-创建maven程序，添加依赖-jar-包-：" class="headerlink" title="1. 创建maven程序，添加依赖 (jar 包)："></a>1. 创建maven程序，添加依赖 (jar 包)：</h4><p>在 maven 项目文件 <code>pom.xml</code> 下的 <code>dependencies</code> 标签中导入一下依赖(jar包)：</p>
<ul>
<li>MyBatis 依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SQL 数据库驱动依赖(根据所使用的数据库自行选择依赖)：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-编写核心配置xml文件："><a href="#2-编写核心配置xml文件：" class="headerlink" title="2. 编写核心配置xml文件："></a>2. 编写核心配置xml文件：</h4><ul>
<li>在 <code>resources</code> 文件夹中新建 <code>mybatis-config.xml</code> (文件名也可自定义)：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis 主配置文件：头部的声明，它用来验证 XML 文档的正确性 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心配置文件(存放mybatis与数据库的各种配置) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 环境配置组(default值表示默认环境,根据环境id选择) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 环境配置(id为环境名称，可自定义) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理(一般为JDBC，表示使用JDBC管理事务的提交和回滚) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用标准的JDBC数据源接口来配置JDBC连接对象的资源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDBC 连接数据库url设置：</span></span><br><span class="line"><span class="comment">                设置安全连接：useSSL=false</span></span><br><span class="line"><span class="comment">                设置中文可用编码：useUnicode=true</span></span><br><span class="line"><span class="comment">                设置设置编码格式：characterEncoding=utf8</span></span><br><span class="line"><span class="comment">                设置时区为北京：serverTimezone=GMT%2B8 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名与密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;991314&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理Mapper接口对应的Mapper.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个Mapper.xml文件都需要在此注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-编写Mapper接口与配置Mapper-xml："><a href="#3-编写Mapper接口与配置Mapper-xml：" class="headerlink" title="3. 编写Mapper接口与配置Mapper.xml："></a>3. 编写Mapper接口与配置Mapper.xml：</h4><p>Mapper接口中定义对数据库表增删改查的方法，接口名建议以 <code>[表名|数据库名]Mapper</code> 命名。以配置Mapper.xml(建议以 <code>对应接口名.xml</code> 命名)的方式实现该接口,下以查询为例：</p>
<ol>
<li><p>查询的每一条数据都作为一个对象返回，我们需要先创建一个对应表字段的实体类（pojo）：</p>
<p>以下表为例：</p>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/m-CreTab.jpg" alt="数据库表字段"></p>
<p>为此表字段编写一个对应的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPojo</span> </span>&#123;</span><br><span class="line"><span class="comment">//    1.设置变量字段，注意变量的名称与类型应与表字段保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">//    2.为每个字段设置 get 和 set 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    <span class="comment">// 其它可自行根据需要进行增添设置</span></span><br><span class="line"><span class="comment">//    构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserPojo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserPojo</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    toString 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写执行数据库方法的Mapper接口：</p>
<p>建议每一个表的实体类(pojo)对应一个Mapper接口，接口中定义对对应表的增删改查方法，接口名建议以 <code>实体类名+Mapper</code> 命名。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个查询方法返回List，其中每一个元素都是表的字段对象</span></span><br><span class="line">    <span class="function">List&lt;UserPojo&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>编写Mapper.xml实现接口中的方法：</p>
<p>Mapper.xml建议以 <code>对应接口名.xml</code> 命名，它可以看成是Mapper的具体实现类。对接口中的方法进行配置实现对表的操作。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头文件(mapper.xml的头部声明) --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定Mapper.xml对应的Mapper接口类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select 查询：</span></span><br><span class="line"><span class="comment">    id 对应接口中的方法名</span></span><br><span class="line"><span class="comment">    resultType 每条查询结果封装的类型</span></span><br><span class="line"><span class="comment">    标签内为查询语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在核心配置文件中注册配置好的Mapper.xml：</p>
<p>注意：resource中值为文件相对路径以 <em><code>/</code></em> 为分隔符，切记不能用 <code>.</code> 分隔。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 在mybatis-config.xml文件的configuration标签内 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注意路径使用的是文件方式 “/” 注册 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;io/github/ruoxijun/mapper/UsersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="4-编写测试类验证程序："><a href="#4-编写测试类验证程序：" class="headerlink" title="4. 编写测试类验证程序："></a>4. 编写测试类验证程序：</h4><p>建议在test文件夹下对应main文件夹下的Mapper接口位置创建测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 主配置文件相对与resources文件夹的路径</span></span><br><span class="line">    String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到主配置文件的流。MyBatis的工具类Resources，它加载资源文件更加容易</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 利用SqlSessionFactoryBuilder通过主配置文件的流，获取SqlSessionFactory对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过SqlSessionFactory对象拿到执行SQL命令的对象SqlSession</span></span><br><span class="line">    SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SqlSession对象通过Mapper接口的类对象获取实例对象(根据Mapper.xml实例化的对象)</span></span><br><span class="line">    UsersMapper mapper = sqlSession.getMapper(UsersMapper.class);</span><br><span class="line">    <span class="comment">// 调用实例方法</span></span><br><span class="line">    List&lt;UserPojo&gt; userList = mapper.getUserList();</span><br><span class="line">    <span class="keyword">for</span> (UserPojo user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后因为Maven项目中默认只有resources 文件夹中的资源(配置)文件才能被打包，测试时可能因为我们的Mapper.xml文件在java文件夹中而不能被打包到classpath中。</p>
<p>所以有必要对 <code>pom.xml</code> 配置构建时的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让Maven进行项目构建时不会忽略java下的xml等配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时运行测试项目成功。</p>
<h4 id="5-增加带参方法条件查询："><a href="#5-增加带参方法条件查询：" class="headerlink" title="5. 增加带参方法条件查询："></a>5. 增加带参方法条件查询：</h4><ol>
<li><p>Mapper 接口中新增方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为确定返回的数据最多只有1条，所以返回值类型为该对象而不用List(也行)</span></span><br><span class="line"><span class="function">UserPojo <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml中添加方法配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType 代表传入参数的类型，只有一个参数且为基本类型时可以不声明</span></span><br><span class="line"><span class="comment">     查询语句中增加条件，利用 #&#123;参数(变量)名&#125; 的方式调用参数</span></span><br><span class="line"><span class="comment">     使用 $&#123;&#125;(不安全有SQL注入风险) 或 #&#123;0&#125;(不灵活) 也可达到效果但不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试时同上所讲获取到接口实例化对象调用方法即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserPojo user = mapper.getUserById(<span class="number">4</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="对象作用域-生命周期-与封装："><a href="#对象作用域-生命周期-与封装：" class="headerlink" title="对象作用域(生命周期)与封装："></a>对象作用域(生命周期)与封装：</h3><h4 id="对象生命周期："><a href="#对象生命周期：" class="headerlink" title="对象生命周期："></a>对象生命周期：</h4><p>了解Mybatis中对象的生命周期也是很重要的，错误的使用会导致严重的<strong>并发问题</strong>。</p>
<h5 id="SqlSessionFactoryBuilder："><a href="#SqlSessionFactoryBuilder：" class="headerlink" title="SqlSessionFactoryBuilder："></a>SqlSessionFactoryBuilder：</h5><p>​    一旦创建了 SqlSessionFactory，就不再需要它了。所以最好定义为局部方法变量。</p>
<h5 id="SqlSessionFactory："><a href="#SqlSessionFactory：" class="headerlink" title="SqlSessionFactory："></a>SqlSessionFactory：</h5><p>​    一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</p>
<h5 id="SqlSession："><a href="#SqlSession：" class="headerlink" title="SqlSession："></a>SqlSession：</h5><p>​    SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的作用域是局部作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。并且使用完后一定要关闭。</p>
<h4 id="获取-SqlSession-的封装："><a href="#获取-SqlSession-的封装：" class="headerlink" title="获取 SqlSession 的封装："></a>获取 SqlSession 的封装：</h4><p>之后的应用中需要经常用到 <code>SqlSession</code> 不可能每次都写一次，在此对获取 <code>SqlSession</code> 做一个简单的封装。创建一个专用于获取 <code>SqlSession</code> 的工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSqlSession</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">// 让类初始化就加载 SqlSessionFactory 之后就不用重复定义了</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resources=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputstream = Resources.getResourceAsStream(resources);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputstream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取 SqlSession 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">open</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> sqlSessionFactory.openSession(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此后使用时只需要两句便可以获取到Mapper接口的实例对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过定义好的工具类获取 SqlSession</span></span><br><span class="line">SqlSession sqlSession = GetSqlSession.open();</span><br><span class="line"><span class="comment">// SqlSession对象通过Mapper接口的类对象获取实例对象</span></span><br><span class="line">UsersMapper mapper = sqlSession.getMapper(UsersMapper.class);</span><br></pre></td></tr></table></figure>

<p>这只是一个简单的封装，实际使用时建议使用 <strong><em>单例模式</em></strong> 来设计更好的封装方法。</p>
<h3 id="增改删操作："><a href="#增改删操作：" class="headerlink" title="增改删操作："></a>增改删操作：</h3><blockquote>
<p>增改删流程与查类似，Mapper接口中定方法再在Mapper.xml中使用对应的标签(如增是使用insert标签)绑定方法。</p>
<p>增改删与查不同的是，接口实例对象所有的增改删方法被调用后， <code>SqlSession</code> 对象必须 <code>commit</code> (提交事务)才能生效。且这些方法的返回值为 <code>int</code> 即数据更改成功的个数。</p>
</blockquote>
<h4 id="1-增-insert-："><a href="#1-增-insert-：" class="headerlink" title="1. 增(insert)："></a>1. 增(insert)：</h4><ol>
<li><p>在Mapper接口中定义插入数据的方法： <code>int insertUser(UserPojo user);</code></p>
</li>
<li><p>在Mapper.xml中进行对插入方法具体实现的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType中声明传入一个字段对象类型作为参数</span></span><br><span class="line"><span class="comment">      因为字段类中设置了成员变量的get方法，</span></span><br><span class="line"><span class="comment">      可直接通过 #&#123;成员变量名&#125; 的方式来获取具体的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    insert into user(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用时在获取到接口实例对象后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用获取到的接口实例调用方法，传入一个字段对象</span></span><br><span class="line"><span class="keyword">int</span> insertNum = mapper.insertUser(<span class="keyword">new</span> UserPojo(<span class="number">6</span>,<span class="string">&quot;哈哈&quot;</span>,<span class="number">18</span>));</span><br><span class="line"><span class="keyword">if</span> (insertNum==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 对表数据更改的操作，必须 commit 提交事务才能生效</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;插入成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-改-update-："><a href="#2-改-update-：" class="headerlink" title="2. 改(update)："></a>2. 改(update)：</h4><p>操作都基本类似，只看一下Mapper.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-删-delete-："><a href="#3-删-delete-：" class="headerlink" title="3. 删(delete)："></a>3. 删(delete)：</h4><p>Mapper.xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Map-传参与模糊查询："><a href="#Map-传参与模糊查询：" class="headerlink" title="Map 传参与模糊查询："></a>Map 传参与模糊查询：</h3><h4 id="Map简化传参："><a href="#Map简化传参：" class="headerlink" title="Map简化传参："></a>Map简化传参：</h4><p>上方所讲 <strong><em>改(update)</em></strong> 处在修改方法中传入了一个用户对象，但可以看出实际使用时并未使用到全部属性。当表的字段较多时字段对象的成员变量也会相应增多，而SQL语句中需要用到的值只有几个，此时传入一个完整的对象显得不再合理。利用传入一个 <strong><code>Map</code></strong> 就可只传入我们需要使用的数据，而不用在创建一个完整的对象方式。</p>
<p>Mapper接口中传入值替换为Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// key为 String，value类型不定采用 Object</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml中传入类型替换为map：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType 值更改为map，即传入的参数类型为Map</span></span><br><span class="line"><span class="comment">      SQL 中调用 Map 元素值用 #&#123;key&#125; 即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;userName&#125; where id=#&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">4</span>);</span><br><span class="line">map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;更改&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SqlSession 获取Mapper接口实例</span></span><br><span class="line">UsersMapper mapper = sqlsession.getMapper(UsersMapper.class);</span><br><span class="line">mapper.updateUser2(map); <span class="comment">// 调用方法，传入 Map</span></span><br><span class="line">sqlsession.commit(); <span class="comment">// 一定要提交事务(commit)</span></span><br></pre></td></tr></table></figure>

<h4 id="模糊查询与SQL拼接："><a href="#模糊查询与SQL拼接：" class="headerlink" title="模糊查询与SQL拼接："></a>模糊查询与SQL拼接：</h4><p>Mapper接口中定义查询方法：<code>List&lt;User&gt; findLikeNameList(String name);</code></p>
<p>Mapper.xml中实现方法与书写模糊查询语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在标签的SQL语句中字符串 &quot;&quot; 与挨着的变量值会自动拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLikeNameList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在标签内把SQL语句写死，而不用参数的方式 <code>%name%</code> 传入模糊语句是为了数据库安全防止SQL注入。</p>
]]></content>
      <categories>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 数据存储</title>
    <url>/2020/07/06/blog/android/data/</url>
    <content><![CDATA[<h2 id="Android-数据存储"><a href="#Android-数据存储" class="headerlink" title="Android 数据存储"></a><center>Android 数据存储<center/></h2><blockquote>
<h3 id="SharedPreferences-轻量级存储："><a href="#SharedPreferences-轻量级存储：" class="headerlink" title="SharedPreferences 轻量级存储："></a>SharedPreferences 轻量级存储：</h3></blockquote>
<p>SharedPreferences是存储共享变量的接口，文件路径位于“/data/data/应用程序包/shared_prefs”目录下的xml文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取共享文件对象，参1为文件名不存在则创建，参2为操作文件的模式推荐使用：&#x27;MODE_PRIVATE&#x27;</span></span><br><span class="line">SharedPreferences sp=getSharedPreferences(<span class="string">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class="line"><span class="comment">// 查看某key数据是否存在</span></span><br><span class="line">sp.contains(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 根据key获取value，参2为key不存在时返回的默认值</span></span><br><span class="line">sp.getString(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;defaultValue&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Editor接口为SharedPreferences接口的内部接口，专编辑共享数据。通过共享对象的 <code>edit()</code> 获取到该对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取该共享文件的编辑对象</span></span><br><span class="line">SharedPreferences.Editor edit=sp.edit();</span><br><span class="line"><span class="comment">// 添加或修改数据值</span></span><br><span class="line">edit.putString(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">edit.clear(); <span class="comment">// 清空该共享文件数据</span></span><br><span class="line"><span class="comment">// 数据编辑完成后，必须使用该方法数据才能载入xml文件中</span></span><br><span class="line">edit.apply();</span><br></pre></td></tr></table></figure>
<p>以上都以 <code>String</code> 数据演示，还有其它数据可选。</p>
<blockquote>
<h3 id="Android-自带数据库-SQLite-存储："><a href="#Android-自带数据库-SQLite-存储：" class="headerlink" title="Android 自带数据库 SQLite 存储："></a>Android 自带数据库 SQLite 存储：</h3><p>Android 数据库文件存在 “/data/data/应用程序包/databases” 文件夹中</p>
</blockquote>
<h4 id="SQLiteOpenHelper-："><a href="#SQLiteOpenHelper-：" class="headerlink" title="SQLiteOpenHelper ："></a>SQLiteOpenHelper ：</h4><p>Android 操作数据库首先需要继承 <code>SQLiteOpenHelper</code> 抽象类。我们需要实现3个方法：</p>
<ul>
<li><p><code>onCreate</code> ：只在创建数据库时调用一次此方法，此方法中一般写入创建表语句。</p>
</li>
<li><p><code>onUpgrade</code> ：升级数据库方法。</p>
</li>
<li><p><code>构造函数</code> ：构造函数主要为了向父构造方法传参，参2为数据库名，参3为游标工厂对象为 <code>null</code> 时有默认的游标工厂，参4为数据库版本数。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlite</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，保存数据库信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySqlite</span><span class="params">(<span class="meta">@Nullable</span> Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, TABLE_ENAME, <span class="keyword">null</span>, VERSION);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;create table ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 数据库表升级方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建继承 <code>SQLiteOpenHelper</code> 类的对象后，并未创建数据库它只利用构造方法记录(赋值)了数据库的信息。</li>
<li>只有第一次调用  <code>getWritableDatabase</code> 或 <code>getReadableDatabase</code> 方法时才会创建数据库并调用此类的 <code>onCreate</code> 方法(创建表)所以该方法内不能使用此get方法否则会造成无限递归。</li>
<li>调用  <code>getWritableDatabase</code> 或 <code>getReadableDatabase</code> 方法，会返回 <code>SQLiteDatabase</code> 数据库的操作对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SQL 原生语句&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 SQLiteOpenHelper 数据库对象</span></span><br><span class="line">MySqlite mySqlite=<span class="keyword">new</span> MySqlite(context);</span><br><span class="line"><span class="comment">// 获取 SQLiteDatabase 数据库操作对象</span></span><br><span class="line">SQLiteDatabase database=mySqlite.getWritableDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行数据库 &quot;增删改&quot; 方法</span></span><br><span class="line">database.execSQL(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行数据库 &quot;查&quot; 方法，数据保存在 Cursor 对象中返回</span></span><br><span class="line">Cursor cursor=database.rawQuery(sql,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 遍历查找的数据</span></span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;<span class="comment">//查看游标是否指向数据末尾</span></span><br><span class="line">    <span class="comment">// 获取游标当前行的name列的数据，列数从0开始算起</span></span><br><span class="line">    cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库</span></span><br><span class="line">database.close();</span><br></pre></td></tr></table></figure>

<p>数据库查询的所有类型数据都可通过游标( <code>Cursor</code> )的 <code>getString</code> 方法获取到。</p>
<p>关于数据库的操作，由于数据库的原生语句容易出错。Android官方还提供了许多API方法简易操作，请自查。</p>
<blockquote>
<h3 id="File-文件存储："><a href="#File-文件存储：" class="headerlink" title="File 文件存储："></a>File 文件存储：</h3></blockquote>
<p>Android分为内部存储和外部存储。上面介绍的轻量级xml键值对文件存储和数据库存储都是是内部存储。<br>内部存储还有 <code>/data/data/应用程序包</code> 下的 <code>files</code> 和 <code>cache</code> 文件夹管理的文件。 我们可以通过上下文对象的 <code>getFilesDir()</code> 和 <code>getCacheDir()</code> 方法获取它们两的file对象。</p>
<h4 id="内部存储-files-文件夹下："><a href="#内部存储-files-文件夹下：" class="headerlink" title="内部存储 files 文件夹下："></a>内部存储 files 文件夹下：</h4><p>操作都基于 Java 的 IO 流进行。</p>
<ul>
<li>文件存储<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过调用上下文的openFileOutput方法，拿到 写 对象</span></span><br><span class="line">FileOutputStream out=openFileOutput(<span class="string">&quot;test.txt&quot;</span>,MODE_PRIVATE);</span><br><span class="line">out.write(<span class="string">&quot;hello world&quot;</span>.getBytes());</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure></li>
<li>文件取出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过openFileInput方法，拿到 读 对象</span></span><br><span class="line">FileInputStream in=openFileInput(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] data=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> i=in.read(data);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(data,<span class="number">0</span>,i));</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>SharedPreferences</tag>
        <tag>SQLite</tag>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 语法基础</title>
    <url>/2020/07/06/blog/interest/sql/</url>
    <content><![CDATA[<h2 id="MySql-使用与-SQL-语句基础"><a href="#MySql-使用与-SQL-语句基础" class="headerlink" title="MySql 使用与 SQL 语句基础"></a><center>MySql 使用与 SQL 语句基础<center/></h2><blockquote>
<h3 id="MySql-使用："><a href="#MySql-使用：" class="headerlink" title="MySql 使用："></a>MySql 使用：</h3></blockquote>
<p>以下操作都是以管理员方式打开 <code>cmd</code> 并切换至安装 MySQL 的 <code>bin</code> 目录下执行：</p>
<ul>
<li>启动与关闭 MySql ：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql // 启动mysql</span><br><span class="line">net <span class="keyword">stop</span> mysql // 关闭mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>登录与退出 MySQL 环境：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -u用户名 -p密码 // 登录密码裸露在外不推荐</span><br><span class="line">mysql -u用户名 -p // 回车后输入密码(密码隐藏)，推荐使用</span><br><span class="line">mysql -hIP地址 -u用户名 -p密码 //连接指定IP地址的数据库</span><br><span class="line">exit // 退出mysql命令行环境</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="SQL-操作数据库："><a href="#SQL-操作数据库：" class="headerlink" title="SQL 操作数据库："></a>SQL 操作数据库：</h3></blockquote>
<ul>
<li>注释：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单行注释，必须有一个以上空格隔开</span></span><br><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><ul>
<li>创建数据库：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名; // 基本格式</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名; // 查看数据库，不存在时创建</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集; // 修改字符集</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集; // 综合修改</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据库：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名; // 直接删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> 数据库名; // 查看数据库存在再删除</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据库：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看数据库与切换：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; // 查看所有数据库名称</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>(); // 当前正在使用的数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名; // 查看数据库的创建属性</span><br><span class="line"><span class="keyword">use</span> 数据库名称; // 切换到指定数据库</span><br></pre></td></tr></table></figure>

<h3 id="数据表："><a href="#数据表：" class="headerlink" title="数据表："></a>数据表：</h3><ul>
<li>创建表：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 基本格式：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>(</span><br><span class="line">    列名<span class="number">1</span> 数据类型 添加约束,</span><br><span class="line">    列名<span class="number">2</span> 数据类型,</span><br><span class="line">    ...(最后一列不能有逗号)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 复制表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 被复制表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除表：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> 表名; // 直接删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名; // 判断表存在则删除</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名; // 修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span> <span class="keyword">set</span> utf8; // 修改表的字符集</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型; // 添加一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 新数据类型; // 修改数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 列名 新列名 新数据类型; // 修改列名和数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名; // 删除列</span><br></pre></td></tr></table></figure>

<ul>
<li>查看表：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; // 查看此数据库内的所有表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名; // 查看表创建时的属性</span><br><span class="line">desc 表名; // 查看指定表的结构</span><br></pre></td></tr></table></figure>

<ul>
<li>约束的创建，更改，删除：</li>
</ul>
<p><code>not null</code> 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 创建时添加非空约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>( <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> );</span><br><span class="line"></span><br><span class="line">// 删除约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span>;</span><br><span class="line"></span><br><span class="line">// 直接给字段添加约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><code>unique</code> 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 创建时添加值唯一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>( <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unique</span> );</span><br><span class="line"></span><br><span class="line">// 删除约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">id</span>;</span><br><span class="line"></span><br><span class="line">// 直接给字段添加值唯一约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure>

<p><code>primary key</code> 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 创建时添加主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>);</span><br><span class="line"></span><br><span class="line">// 删除主键约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br><span class="line"></span><br><span class="line">// 直接给字段添加主键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<p><code>auto_increment</code> 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 创建时给主键添加自动增长</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment);</span><br><span class="line"></span><br><span class="line">// 删除主键的自动增长</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span>;</span><br><span class="line"></span><br><span class="line">// 直接给主键添加自动增长</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> auto_increment;</span><br></pre></td></tr></table></figure>

<p><code>foreign key</code>设置外键约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 作为外键的字段必须唯一(primary key 或 unique)，否则报错</span><br><span class="line">// 创建时添加外键，外键名可随意取</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> <span class="keyword">key</span> (本表字段) <span class="keyword">references</span> 外键表(外键表字段)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 删除外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> 外键名;</span><br><span class="line"></span><br><span class="line">// 直接添加外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> <span class="keyword">key</span> (本表字段) <span class="keyword">references</span> 外键表(外键表字段);</span><br></pre></td></tr></table></figure>

<h3 id="表数据："><a href="#表数据：" class="headerlink" title="表数据："></a>表数据：</h3><ul>
<li><code>insert into</code> 插入数据：</li>
</ul>
<p>表名后不跟列名时默认给所有列插入数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>delete</code> 删除数据：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>

<ul>
<li><code>update</code> 修改数据：</li>
</ul>
<p>不添加where条件则会一条一条的删除表中所有数据，不推荐此方法清空表效率低。<br>推荐 <code>truncate table 表名;</code> 先删除表，再创建一个一样的空表(效率高)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=值<span class="number">2</span>,列名<span class="number">2</span>=值<span class="number">2</span>,...[<span class="keyword">where</span> 条件]; // 没有条件则整列值被修改</span><br></pre></td></tr></table></figure>

<h3 id="select-查询数据："><a href="#select-查询数据：" class="headerlink" title="select 查询数据："></a><code>select</code> <strong>查询数据：</strong></h3><ul>
<li><p>查询所有字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表</span><br><span class="line">    [<span class="keyword">where</span>]</span><br><span class="line">    [<span class="keyword">group</span> <span class="keyword">by</span>]</span><br><span class="line">    [<span class="keyword">having</span>]</span><br><span class="line">    [<span class="keyword">order</span> <span class="keyword">by</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>列还可进行四则运算：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 第三列为第一列与第二列的和，为null的值运算结果为null，需要ifnull设置默认值</span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,<span class="keyword">ifnull</span>(列名<span class="number">1</span>,<span class="number">0</span>)+<span class="keyword">ifnull</span>(列名<span class="number">2</span>,<span class="number">0</span>) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>聚合函数：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// distinct 去重</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">// count 计算个数(注意它会忽略值为null的行)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">// max 最大值</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">// min 最小值</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">// avg 平均值</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line">// sum 求和</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>where 条件查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// like 模糊查询：&#x27;_&#x27;单个字符，&#x27;%&#x27;任意多个字符，[],[^]指定范围和非指定范围</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列 <span class="keyword">like</span> 条件;</span><br><span class="line"></span><br><span class="line">// in 或值查询：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名 <span class="keyword">in</span>(val1,val2,...);</span><br><span class="line"></span><br><span class="line">// between 起始值 and 终值 范围查询：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名 <span class="keyword">between</span> 起始值 <span class="keyword">and</span> 终点值;</span><br></pre></td></tr></table></figure>

<ul>
<li>order by 排序：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// asc：升序(默认)，desc：降序</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 排序列名 排序方式,次排序列名 排序方式,...;</span><br></pre></td></tr></table></figure>

<ul>
<li>group by 分组：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组列[,聚合函数(列)]... <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组列;</span><br><span class="line"></span><br><span class="line">// 搭配 having 使用(与where类似)，对分组后的表格进行条件筛选</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">class</span> <span class="keyword">as</span> cla <span class="keyword">from</span> t <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span> <span class="keyword">having</span> cla&gt;<span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>limit 分页：limit 为mysql方法分页查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 行标从0开始，行标=(页数-1)*显示行数</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 行标,显示行数;</span><br><span class="line">// 如：<span class="keyword">select</span> * <span class="keyword">from</span> t_students <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<h3 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h3><ul>
<li>查询多表：<code>select * from 表1,表2;</code> 直接查询多表，它会将每个表每行组合的所有可能都显示出来。我们只需要利用条件限制，筛选出自己需要的数据。</li>
</ul>
<p>实例：如下查询了3个表的三个字段，通过别名简化操作。通过对条件的限定，筛选出了我们需要的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  // 表字段</span><br><span class="line">stu.StuName,</span><br><span class="line">cla.Classname,</span><br><span class="line">pro.ProName</span><br><span class="line"><span class="keyword">from</span>    // 表</span><br><span class="line">    t_students <span class="keyword">as</span> stu,</span><br><span class="line">    t_classes <span class="keyword">as</span> cla,</span><br><span class="line">    t_pro <span class="keyword">as</span> pro</span><br><span class="line"><span class="keyword">where</span>   // 条件</span><br><span class="line">stu.ClassID=cla.ClassID <span class="keyword">and</span> cla.ProID=pro.ProID</span><br></pre></td></tr></table></figure>

<ul>
<li><code>inner join</code> 进行两表的查询：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from</span><br><span class="line">    表<span class="number">1</span></span><br><span class="line">inner join  <span class="comment">// inner 可省略</span></span><br><span class="line">    表<span class="number">2</span></span><br><span class="line">on 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双表查询，保留左表全部数据并并根据条件取交集部分</span></span><br><span class="line">select * from 表左 left join 表右 on 条件</span><br><span class="line"><span class="comment">// 双表查询，保留右表全部数据并根据条件取交集部分</span></span><br><span class="line">select * from 表左 right join 表右 on 条件</span><br></pre></td></tr></table></figure>

<ul>
<li>子查询：查询嵌套查询</li>
</ul>
<p>单行单列子查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 查询某值最大的一列，查询中条件中嵌套了一个求最大值的查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表 <span class="keyword">where</span> 值列名=(<span class="keyword">select</span> <span class="keyword">max</span>(值列名) <span class="keyword">from</span> 表);</span><br></pre></td></tr></table></figure>

<p>多行单列子查询实例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    stu.StuName</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_students <span class="keyword">as</span> stu</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    stu.ClassID <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span> ClassID <span class="keyword">from</span> t_classes <span class="keyword">where</span> classname <span class="keyword">in</span>(<span class="string">&#x27;计应用ZK1601&#x27;</span>,<span class="string">&#x27;软件技术ZK1601&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>多行多列子查询实例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    stu.StuName,cla.Classname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_students <span class="keyword">as</span> stu,</span><br><span class="line">    (<span class="keyword">select</span> * <span class="keyword">from</span> t_classes <span class="keyword">where</span> classname <span class="keyword">in</span>(<span class="string">&#x27;计应用ZK1601&#x27;</span>,<span class="string">&#x27;软件技术ZK1601&#x27;</span>)) <span class="keyword">as</span> cla</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    stu.ClassID=cla.ClassID </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment 与 ViewPager</title>
    <url>/2020/07/04/blog/android/ViewPager/</url>
    <content><![CDATA[<h3 id="Fragment-与-ViewPager"><a href="#Fragment-与-ViewPager" class="headerlink" title="Fragment 与 ViewPager"></a>Fragment 与 ViewPager</h3><h4 id="Fragment："><a href="#Fragment：" class="headerlink" title="Fragment："></a>Fragment：</h4><ol>
<li>创建一个 Fragment：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;<span class="comment">//继承Fragment</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//拿到上下文</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//指定视图文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//R.layout.fragement为你创建的Fragment的布局文件</span></span><br><span class="line">        View view=inflater.inflate(R.layout.fragement,container,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//对组件做操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        TextView textView=view.findViewById(R.id.text);</span><br><span class="line">        textView.setText(<span class="string">&quot;--MyFragment2--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 Activity 中的添加 Fragment：</li>
</ol>
<p>Activity 的布局文件中添加存放组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/framelayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 Activity 中向 <code>FrameLayout</code> 添加 Fragment：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyFragment fg= <span class="keyword">new</span> MyFragment();<span class="comment">//实例化Fragment类</span></span><br><span class="line"><span class="comment">//add方法向FrameLayout添加了MyFragment</span></span><br><span class="line">getSupportFragmentManager().beginTransaction()</span><br><span class="line">    .add(R.id.framelayout,fg).commitAllowingStateLoss();</span><br></pre></td></tr></table></figure>

<p>Android 还提供了隐藏和显示 Fragment 的方法,如下方法能切换 fg1 和 fg2 两 Fragment：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hide和show分别为隐藏和显示的方法</span></span><br><span class="line"><span class="keyword">if</span> (fg1.isHidden())&#123;</span><br><span class="line">    getSupportFragmentManager().beginTransaction()</span><br><span class="line">        .hide(fg2).show(fg1).commitAllowingStateLoss();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getSupportFragmentManager().beginTransaction()</span><br><span class="line">        .hide(fg1).show(fg2).commitAllowingStateLoss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ViewPager："><a href="#ViewPager：" class="headerlink" title="ViewPager："></a>ViewPager：</h4><ul>
<li>布局文件中添加：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewpager&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Activity 中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备Fragment</span></span><br><span class="line">MyFragment fg1= <span class="keyword">new</span> MyFragment();</span><br><span class="line">MyFragment fg2= <span class="keyword">new</span> MyFragment();</span><br><span class="line">MyFragment fg3= <span class="keyword">new</span> MyFragment();</span><br><span class="line">ArrayList&lt;Fragment&gt; fragments=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">fragments.add(fg1);</span><br><span class="line">fragments.add(fg2);</span><br><span class="line">fragments.add(fg3);</span><br><span class="line">ViewPager viewPager=findViewById(R.id.viewpager);<span class="comment">//获取ViewPager</span></span><br><span class="line"><span class="comment">// 设置Adapter</span></span><br><span class="line">viewPager.setAdapter(<span class="keyword">new</span> MyPagerAdapter(getSupportFragmentManager(),fragments));</span><br><span class="line"><span class="comment">// 显示指定页面</span></span><br><span class="line">viewPager.setCurrentItem(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Adapter 中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Fragment&gt; fragments;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPagerAdapter</span><span class="params">(<span class="meta">@NonNull</span> FragmentManager fm,ArrayList&lt;Fragment&gt; fragments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        <span class="keyword">this</span>.fragments=fragments;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="TabLayout：联合ViewPager实现标签页"><a href="#TabLayout：联合ViewPager实现标签页" class="headerlink" title="TabLayout：联合ViewPager实现标签页"></a>TabLayout：联合ViewPager实现标签页</h4><p>xml中：<code>ViewPager</code> 内嵌入 <code>TabLayout</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">    ···</span></span><br><span class="line">    &lt;com.google.android.material.tabs.TabLayout</span><br><span class="line">        ··· /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.viewpager.widget.ViewPager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>FragmentPagerAdapter类中：重写 <code>getPageTitle</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> titles[position]; <span class="comment">// 返回标题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>Fragment</tag>
        <tag>ViewPager</tag>
        <tag>TabLayout</tag>
      </tags>
  </entry>
  <entry>
    <title>File and 字节流</title>
    <url>/2020/07/03/blog/java/io/file/</url>
    <content><![CDATA[<h2 id="File-and-字节流"><a href="#File-and-字节流" class="headerlink" title="File and 字节流"></a><center>File and 字节流</center></h2><blockquote>
<h3 id="File："><a href="#File：" class="headerlink" title="File："></a>File：</h3></blockquote>
<ul>
<li>初始化一个 <code>File</code> 对象：<ul>
<li>以路径最后所指文为准，最后时文件夹则为文件夹对象反之文件同理。</li>
<li><code>File.separator</code> ：返回系统文件目录分隔符</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接受一个目录路径字符串，实例化为文件或文件夹对象</span></span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;E:&quot;</span>+File.separator+<span class="string">&quot;test&quot;</span>+File.separator+<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//接受两个字符串，参2拼接在参1后面</span></span><br><span class="line">File file2=<span class="keyword">new</span> File(<span class="string">&quot;E:&quot;</span>+File.separator+<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//接受一个file对象，参2接入该目录中</span></span><br><span class="line">File file3=<span class="keyword">new</span> File(file,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//File 对像 tostring 方法返回 getPath 方法值</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">System.out.println(file2);</span><br><span class="line">System.out.println(file3);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>File</code> 常用方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line">file.getPath();<span class="comment">//该对象创建时传入的路径</span></span><br><span class="line">file.getAbsolutePath();<span class="comment">//文件的绝对路径</span></span><br><span class="line">file.getName();<span class="comment">//文件名(即文件路径的最后一项)</span></span><br><span class="line">file.exists();<span class="comment">//文件或文件夹是否存在</span></span><br><span class="line">file.length();<span class="comment">//文件大小(字节)</span></span><br><span class="line">file.lastModified();<span class="comment">//文件最近修改时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//是文件或文件夹与后缀名无关，下列方法文件或文件夹不存在时也返回false</span></span><br><span class="line">file.isFile();<span class="comment">//该file对象是否是文件</span></span><br><span class="line">file.isDirectory();<span class="comment">//是否是文件夹</span></span><br><span class="line">file.isHidden();<span class="comment">//是否是隐藏文件或文件夹</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>File</code> 对文件的操作：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * createNewFile:</span></span><br><span class="line"><span class="comment"> * 只能创建文件，文件不存在路径正确创建成功返回true</span></span><br><span class="line"><span class="comment"> * 文件已存在返回false，路径错误将抛出IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">file.createNewFile();</span><br><span class="line"><span class="comment">//删除是直接删除不会存入回收站，正在被使用或不存在的文件无法删除</span></span><br><span class="line">file.delete();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>File</code> 对文件夹(目录)的操作：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">file.mkdir();<span class="comment">//一次只能创建一级目录，当路径中多级目录不存在时将创建失败</span></span><br><span class="line">file.mkdirs();<span class="comment">//创建多级目录</span></span><br><span class="line">file.delete();<span class="comment">//删除文件夹(要保证将删除的文件夹为空)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**list():</span></span><br><span class="line"><span class="comment"> * 返回当前文件夹目录下的所有文件和文件夹名组成的String[]</span></span><br><span class="line"><span class="comment"> * 不返回List是因为List是可变的，数组是不可变的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] files=file.list();<span class="comment">//获取该文件夹下的文件和文件夹名</span></span><br><span class="line"><span class="keyword">for</span> (String file_item:files)&#123;<span class="comment">//遍历所有名称</span></span><br><span class="line">System.out.println(file_item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与上list方法类似不过返回File对象组成的数组</span></span><br><span class="line"><span class="comment"> * 如果是系统级的文件夹，java没有权限访问会返回null(可能会造成空指针异常)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File[] files=file.listFiles();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>File</code> 的 list，listFiles 方法添加过滤器：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**过滤器：</span></span><br><span class="line"><span class="comment"> * 需要实现FilenameFilter(文件名过滤器)或FileFilter(文件过滤器)接口</span></span><br><span class="line"><span class="comment"> * 实现accept方法指定过滤方式</span></span><br><span class="line"><span class="comment"> * list只能添加文件名过滤器，listFiles对于两种过滤器都可以</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取到后缀名为&#x27;.txt&#x27;的文件名</span></span><br><span class="line">String[] fileName=file.list(<span class="keyword">new</span> FindFileName());</span><br><span class="line"><span class="comment">//获取到File的文件对象</span></span><br><span class="line">File[] files=file.listFiles(<span class="keyword">new</span> FindFile());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***过滤器具体实现类***/</span></span><br><span class="line"><span class="comment">//文件名过滤接口实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindFileName</span> <span class="keyword">implements</span> <span class="title">FilenameFilter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此过滤器只有后缀名为&#x27;.txt&#x27;的文件满足要求</span></span><br><span class="line">        <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件过滤接口实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindFile</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此过滤器只有File对象为文件对象满足要求</span></span><br><span class="line">        <span class="keyword">return</span> pathname.isFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="字节流输出流："><a href="#字节流输出流：" class="headerlink" title="字节流输出流："></a>字节流输出流：</h3></blockquote>
<h4 id="须知基础："><a href="#须知基础：" class="headerlink" title="须知基础："></a>须知基础：</h4><ul>
<li><p>字符串转字节数组(<code>byte[]</code>)：</p>
<ol>
<li><code>str.getBytes()</code>：将字符串按系统默认编码，编码为字节数组</li>
<li><code>str.getBytes(&quot;utf-8&quot;)</code>：将字符串按指定编码，编码为字节数组</li>
</ol>
</li>
<li><p>字节数组(<code>byte[]</code>)转字符串：</p>
<ol>
<li><code>new String(bytes)</code>：将字节数组按系统默认编码，解码为字符串对象</li>
<li><code>new String(bytes,&quot;utf-8&quot;)</code>：将字节数组按指定编码，解码为字符串对象</li>
</ol>
</li>
<li><p>字节流可操作所有文件，对文本文件编解码有一定困难。对文本文件建议使用字符流。</p>
</li>
</ul>
<h4 id="OutputStream-："><a href="#OutputStream-：" class="headerlink" title="OutputStream ："></a>OutputStream ：</h4><p>字节输出流的顶层抽象父类，它定义了字节输出流的基本方法：</p>
<ul>
<li><p><code>write</code>：写方法，它有 3 种重载方法：</p>
<ul>
<li>传入一个字节数组 <code>write(byte[] b)</code> 将此字节数组输出</li>
<li><code>write(byte[] b,int off,int len)</code> 输出一个字节数组，并指定它的某一段</li>
<li><code>write(int b)</code> 输出一个字节</li>
</ul>
</li>
<li><p><code>flush()</code> ：刷新此输出流</p>
</li>
<li><p><code>close()</code> ：关闭此输出流</p>
</li>
</ul>
<h4 id="FileOutputStream-："><a href="#FileOutputStream-：" class="headerlink" title="FileOutputStream ："></a>FileOutputStream ：</h4><p>字节文件输出流继承自<code>OutputStream</code>，有 3 种常用的构造方法：</p>
<ul>
<li><code>FileOutputStream(String path)</code> ：传入文件路径的字符串</li>
<li><code>FileOutputStream(File file, boolean append)</code> ：参 1 为文件对象，参 2 表示是否续写此文件</li>
<li><code>FileOutputStream(String path, boolean append)</code></li>
</ul>
<p>当不选择续写时，文件不存在时会自动创建，文件已存在时将在文件后续写。</p>
<p>向 <code>e:/test/test.txt</code> 文件中写入 “test” :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个字节文件输出流并选择续写模式</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//将字符串转为字节数组</span></span><br><span class="line">fos.write(date);<span class="comment">//将数据写入该文件中</span></span><br><span class="line">fos.flush();<span class="comment">//刷新此输出流</span></span><br><span class="line">fos.close();<span class="comment">//关闭此输出流</span></span><br></pre></td></tr></table></figure>

<p>IO 流的操作都存在许多异常，上写法存在许多隐患。推荐下方式更标准的一种写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;<span class="comment">//在try语句外定义文件字节输出流变量</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fos=<span class="keyword">new</span> FileOutputStream(file);<span class="comment">//创建文件字节输出流实例</span></span><br><span class="line">    <span class="keyword">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//准备数据</span></span><br><span class="line">    fos.write(date);<span class="comment">//写入数据</span></span><br><span class="line">    fos.flush();<span class="comment">//刷新此流</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;<span class="comment">//此语句块内的语句无论上方语句中是否产生异常都会执行</span></span><br><span class="line">    <span class="comment">//有时可能路径问题造成实例创建失败，所有在此需要判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//流不为空时关闭此流</span></span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为流是会消耗系统资源的，所有无论数据写入的成功与否该流都应关闭。因此流的关闭方法写在了 <code>finally</code> 语句块中，此语句块中的语句无论上方 <code>try</code> 块中是否产生异常都必须执行。</p>
<h4 id="BufferedOutputStream-："><a href="#BufferedOutputStream-：" class="headerlink" title="BufferedOutputStream ："></a>BufferedOutputStream ：</h4><p>字节缓冲输出流继承自<code>FilterOutputStream</code>，缓冲流适用于输出资源较多时。<br>写入的数据将暂存在缓冲区只有调用刷新或关闭方法时才能将缓冲区的数据写入文件中。<br>关闭方法中在关闭前有调用刷新方法，建议每写一次 <code>write</code> 就刷新调一次 <code>flush</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;e:test/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个字节文件输出流</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"><span class="comment">//将字节文件输出流交给字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"><span class="keyword">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//准备数据</span></span><br><span class="line">bos.write(date);<span class="comment">//写入数据</span></span><br><span class="line">bos.flush();<span class="comment">//刷新缓冲区，将数据写入</span></span><br><span class="line"><span class="comment">//缓冲流将调用字节文件输出流的关闭方法</span></span><br><span class="line">bos.close();<span class="comment">//缓冲流自身并没有关闭方法</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="字节流输入流："><a href="#字节流输入流：" class="headerlink" title="字节流输入流："></a>字节流输入流：</h3></blockquote>
<h4 id="InputStream-："><a href="#InputStream-：" class="headerlink" title="InputStream ："></a>InputStream ：</h4><p>读入流的顶层父类，它定义了读入流的基本方法。</p>
<ul>
<li><p><code>read</code>：读方法，它有 3 种重载方法：</p>
<ul>
<li><code>read(byte[] b)</code> 读取字节数组长度个或小于此长度个字节，字节数组大小建议为 1024 的倍数</li>
<li><code>read(byte[] b,int off,int len)</code> 读取字节存入字节数组中，并取出其中指定的一段</li>
<li><code>read()</code> 读取一个字节，读取到末尾时返回-1</li>
</ul>
</li>
</ul>
<ul>
<li><code>available()</code> 可读取的剩余字节数的估计</li>
</ul>
<ul>
<li><code>close()</code> 关闭此读入流</li>
</ul>
<h4 id="FileInputStream-："><a href="#FileInputStream-：" class="headerlink" title="FileInputStream ："></a>FileInputStream ：</h4><p>FileInputStream 有两个常用构造方法，传入一个 <code>File</code> 对象，或传入文件的路径。</p>
<p>简单使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line">FileInputStream is=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//数据存储(缓冲区)</span></span><br><span class="line">System.out.println(<span class="string">&quot;剩余字节数：&quot;</span>+is.available());</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//接受读取文件的返回值</span></span><br><span class="line"><span class="keyword">while</span> ((i=is.read(bytes))!=-<span class="number">1</span>)&#123;<span class="comment">//文件是否读取到末尾</span></span><br><span class="line">    System.out.println(<span class="string">&quot;剩余字节数：&quot;</span>+is.available());</span><br><span class="line">    <span class="comment">//将字节数组中存有数组的一段组成字符串输出</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,i));</span><br><span class="line">&#125;</span><br><span class="line">is.close();<span class="comment">//关闭流</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>file</tag>
        <tag>OutputStream</tag>
        <tag>InputStream</tag>
        <tag>FileOutputStream</tag>
        <tag>FileInputStream</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 进阶</title>
    <url>/2020/06/30/blog/python/basispro/</url>
    <content><![CDATA[<blockquote>
<h2 id="Python-进阶"><a href="#Python-进阶" class="headerlink" title="Python 进阶"></a>Python 进阶</h2></blockquote>
<h3 id="File-文件-："><a href="#File-文件-：" class="headerlink" title="File(文件)："></a>File(文件)：</h3><ul>
<li>打开文件：参 1 文件路径名，参 2 文件打开模式，参 3 编码格式(默认 win 上 gbk)<ul>
<li><code>f = open(&quot;E:/test/qq.html&quot;, &quot;r&quot;, encoding=&#39;utf-8&#39;)</code></li>
</ul>
</li>
<li>关闭文件 ： <code>f.close()</code></li>
</ul>
<h4 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h4><table>
<thead>
<tr>
<th>模式</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><strong>r</strong></td>
<td>只读，指针指向开头</td>
</tr>
<tr>
<td><strong>w</strong></td>
<td>只写，指针指向开头。文件不存在将创建文件</td>
</tr>
<tr>
<td><strong>a</strong></td>
<td>追加，指针指向结尾。文件不存在创建新文件</td>
</tr>
<tr>
<td>可附加模式</td>
<td>“+”：用于读写，”b”：以二进制打开文件</td>
</tr>
</tbody></table>
<h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">&quot;E:/test/str.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 1文件路径名 2文件打开模式 3编码格式</span></span><br><span class="line">print(f.closed,f.name,f.mode) <span class="comment"># 文件是否关闭，文件名，模式</span></span><br><span class="line"></span><br><span class="line">print(f.read()) <span class="comment"># 传入int参数从文件读取指定的字节数，如果未给定或为负则读取所有</span></span><br><span class="line">print(f.readline()) <span class="comment"># 读取整行，包括&quot;\n&quot;字符(也可传入int指定字节数)</span></span><br><span class="line">print(f.readlines()) <span class="comment"># 读取所有行(直到结束符EOF)并返回列表</span></span><br><span class="line"></span><br><span class="line">f.write(str) <span class="comment"># 将字符串写入文件，返回的是写入的字符长度</span></span><br><span class="line">f.writelines([<span class="string">&#x27;第一行\n&#x27;</span>,<span class="string">&#x27;第二行&#x27;</span>]) <span class="comment"># 写入序列字符串列表，换行需要自己加入每行的换行符</span></span><br><span class="line"></span><br><span class="line">f.tell() <span class="comment"># 返回文件当前指针位置</span></span><br><span class="line"><span class="comment"># seek参1：移动的字节数，是负数表示从倒数第几位开始</span></span><br><span class="line"><span class="comment"># seek参2：0(默认) 从文件头，1 从当前位置，2 从文件末尾</span></span><br><span class="line">f.seek() <span class="comment"># 移动指针，成功返回新位置，失败返回-1</span></span><br><span class="line"><span class="comment"># truncate：从文件首字节开始截断，截断文件为参1个字节，无参表示从当前位置截断</span></span><br><span class="line"><span class="comment"># 必须在能写模式下，`r` 下模式建议使用 `r+`</span></span><br><span class="line"><span class="comment"># 读取模式下截断后不能继续读取，否则数据将不会被删除</span></span><br><span class="line">f.truncate() <span class="comment"># 截断数据，其它数据将被删除</span></span><br><span class="line"></span><br><span class="line">f.flush() <span class="comment"># 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件</span></span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure>

<h4 id="OS-模块："><a href="#OS-模块：" class="headerlink" title="OS 模块："></a>OS 模块：</h4><p>python 提供了 <code>OS</code> 模块可以应对不同的操作系统，对文件做更多的操作。通过 <code>import os</code> ：导入 OS 模块</p>
<p>常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 导入模块</span></span><br><span class="line"></span><br><span class="line">print(os.sep) <span class="comment"># 系统路径分隔符</span></span><br><span class="line">print(os.linesep) <span class="comment"># 系统行终止符</span></span><br><span class="line">print(os.name) <span class="comment"># 工作平台:Windows=&#x27;nt&#x27;，Linux/Unix=&#x27;posix&#x27;</span></span><br><span class="line">print(os.curdir) <span class="comment"># 当前目录：&quot;.&quot;</span></span><br><span class="line">print(os.getcwd()) <span class="comment"># 当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;e:&quot;</span>+ os.sep) <span class="comment"># 改变当前工作目录</span></span><br><span class="line">os.system(<span class="string">&#x27;cmd&#x27;</span>) <span class="comment"># 运行shell命令</span></span><br><span class="line">print(os.stat(<span class="string">r&#x27;E:\test\test.txt&#x27;</span>)) <span class="comment"># 获得文件属性</span></span><br><span class="line"></span><br><span class="line">print(os.listdir()) <span class="comment"># 返回目录下文件和文件夹名的列表(可传入路径字符串指定目录)</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;e:/a&#x27;</span>) <span class="comment"># 创建一个文件夹，路径错误会文件夹已存在将报错</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;e:/a/b/c/d&#x27;</span>) <span class="comment"># 创建多级目录，目录所有目录已存在将报错</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;e:/a/b/c/d&#x27;</span>) <span class="comment"># 删除一个空文件夹，非空或不存在会报错</span></span><br><span class="line">os.removedirs(<span class="string">&#x27;e:/a/b/c&#x27;</span>) <span class="comment"># 删除目录</span></span><br></pre></td></tr></table></figure>

<h4 id="OS-下的-path-模块："><a href="#OS-下的-path-模块：" class="headerlink" title="OS 下的 path 模块："></a>OS 下的 path 模块：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file = <span class="string">&quot;e:/test/test.txt&quot;</span></span><br><span class="line"></span><br><span class="line">os.path.abspath(<span class="string">&quot;.&quot;</span>) <span class="comment"># 返回指定路径的绝对路径</span></span><br><span class="line">os.path.basename(<span class="string">&quot;.&quot;</span>) <span class="comment"># 返回文件名</span></span><br><span class="line">os.path.dirname(file) <span class="comment"># 传入路径的路径名(去除文件名)</span></span><br><span class="line">os.path.split(file) <span class="comment"># 分割文件和路径名组成元组</span></span><br><span class="line">os.path.splitext(file) <span class="comment"># 分割路径文件名和文件扩展名</span></span><br><span class="line">os.path.join(<span class="string">&quot;e:\\&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test.txt&quot;</span>) <span class="comment"># 组合路径名(cde等主盘路径不会加反斜杠)</span></span><br><span class="line"></span><br><span class="line">os.path.getatime(file) <span class="comment"># 最近访问时间</span></span><br><span class="line">os.path.getctime(file) <span class="comment"># 创建时间</span></span><br><span class="line">os.path.getmtime(file) <span class="comment"># 最近修改时间(可time.gmtime(tiem)查看时间)</span></span><br><span class="line">os.path.getsize(file) <span class="comment"># 文件大小(字节)，文件不存在报错</span></span><br><span class="line">os.path.exists(file) <span class="comment"># 查看路径是否损坏</span></span><br><span class="line"></span><br><span class="line">os.path.isabs(file) <span class="comment"># 是否为绝对路径</span></span><br><span class="line">os.path.isdir(file) <span class="comment"># 是否为目录</span></span><br><span class="line">os.path.isfile(file) <span class="comment"># 是否为文件</span></span><br><span class="line">os.path.islink(file) <span class="comment"># 是否为连接</span></span><br><span class="line">os.path.ismount(file) <span class="comment"># 是否为挂载点(如&#x27;c:&#x27;)</span></span><br></pre></td></tr></table></figure>

<h3 id="错误和异常："><a href="#错误和异常：" class="headerlink" title="错误和异常："></a>错误和异常：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 语句执行区域</span></span><br><span class="line">    <span class="keyword">raise</span> Exception <span class="comment"># 抛出一个异常</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">&quot;except&quot;</span>) <span class="comment"># 异常发生语句执行区</span></span><br><span class="line">    <span class="keyword">raise</span> <span class="comment"># 不想或无法处理的异常继续抛出</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;else&quot;</span>) <span class="comment"># 无异常语句执行区</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&quot;finally&quot;</span>) <span class="comment"># 必执行语句区</span></span><br></pre></td></tr></table></figure>

<ul>
<li>一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行。<br>如打开一个文件对象：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with 关键字无论文件是否打开成功，不再使用后都会关闭</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义异常类：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span>(<span class="params">Exception</span>):</span> <span class="comment"># 继承 Exception 异常类</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">            self.value = value</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> repr(self.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> MyError(<span class="string">&quot;my define error&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Class-与面向对象："><a href="#Class-与面向对象：" class="headerlink" title="Class 与面向对象："></a>Class 与面向对象：</h3><ul>
<li>类常识：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span>(<span class="params">object</span>):</span> <span class="comment"># 括号内表示继承类，多继承可逗号隔开</span></span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span> <span class="comment"># 定义类元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span> <span class="comment"># 构造函数</span></span><br><span class="line">        Class.name=<span class="string">&quot;hi&quot;</span> <span class="comment"># 定义或对类元素赋值</span></span><br><span class="line">        self.name=name <span class="comment"># 对实例元素name赋值</span></span><br><span class="line">        self.age=<span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span> <span class="comment"># self 表示当前实例对象类似(this)</span></span><br><span class="line">        print(<span class="string">&#x27;name=&#x27;</span>,self.name,<span class="string">&#x27;,age=&#x27;</span>,self.age)</span><br><span class="line"></span><br><span class="line">c=Class(<span class="string">&#x27;world&#x27;</span>) <span class="comment"># 创建实例对象</span></span><br><span class="line">c.show() <span class="comment"># 调用方法</span></span><br><span class="line">Class.name=<span class="string">&quot;Class&quot;</span> <span class="comment"># 创建或改变类属性值</span></span><br><span class="line">c.name=<span class="string">&quot;self&quot;</span> <span class="comment"># 创建或改变实例属性值</span></span><br><span class="line">print(Class.name) <span class="comment"># 访问类属性(实例属性同理)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类继承：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span>(<span class="params">Class</span>):</span> <span class="comment"># 继承上 Class 类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span> <span class="comment"># 子类构造方法也会覆盖父类构造方法，需要自行调用父类构造方法</span></span><br><span class="line">        super().__init__(name) <span class="comment"># 调用父类构造方法(调用父类其它方法同理)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span> <span class="comment"># 重写父类方法</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line">c2=Class2(<span class="string">&quot;Class2&quot;</span>)</span><br><span class="line">c2.show()</span><br><span class="line"><span class="comment"># c2.show=&#x27;a&#x27; # 定义属性与方法名同时属性将覆盖方法，调用方法将报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类常用方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">issubclass(Class2,Class) <span class="comment"># 参1(类)是否为参2(类)的子类</span></span><br><span class="line">isinstance(c,Class) <span class="comment"># 参1(实例)是否为参2(类)的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对类或实例的属性操作方法</span></span><br><span class="line">hasattr(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 参1(类)是否存在参2属性</span></span><br><span class="line">hasattr(c,<span class="string">&quot;name&quot;</span>) <span class="comment"># 实例同理</span></span><br><span class="line">getattr(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 获取某属性</span></span><br><span class="line">setattr(Class,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>) <span class="comment"># 添加或设置某属性值</span></span><br><span class="line">delattr(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 删除某属性(还可使用del关键字)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>特殊方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span> <span class="comment"># 初始化</span></span><br><span class="line">        self.num=<span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># 类似tostring方法</span></span><br><span class="line">        <span class="keyword">return</span> str(self.num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span> <span class="comment"># 实例被删除(del)时调用</span></span><br><span class="line">        print(<span class="string">&quot;实例被del&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getnum</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setnum</span>(<span class="params">self,num</span>):</span></span><br><span class="line">        self.num=num</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delnum</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self.num</span><br><span class="line">    x=property(getnum,setnum,delnum) <span class="comment"># 对该属性的操作将调用不同的方法</span></span><br><span class="line"></span><br><span class="line">test=Test()</span><br><span class="line">print(test) <span class="comment"># 调用tostring方法</span></span><br><span class="line"></span><br><span class="line">print(test.x) <span class="comment"># 调用get方法</span></span><br><span class="line">test.x=<span class="number">30</span> <span class="comment"># 调用set方法</span></span><br><span class="line">print(test)</span><br><span class="line"><span class="keyword">del</span> test.x <span class="comment"># 调用del方法</span></span><br><span class="line"><span class="keyword">del</span> test</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm</title>
    <url>/2020/06/29/blog/java/jvm/index/</url>
    <content><![CDATA[<h3 id="ClassLoader-类加载器"><a href="#ClassLoader-类加载器" class="headerlink" title="ClassLoader(类加载器)"></a>ClassLoader(类加载器)</h3><h4 id="加载过程："><a href="#加载过程：" class="headerlink" title="加载过程："></a>加载过程：</h4><ul>
<li>加载：通过类全名，获取类二进制流。将字节流代表的静态存储结构转化为方法区的数据结构。在堆中生成这个类的 Class 对象。<ul>
<li>启动类加载器(BootStrap ClassLoader)：使用 <code>c/c++</code> 实现的类，加载 java 核心库(包名为 java,javax,sun 开头的类)。</li>
<li>扩展类加载器(Extension ClassLoader)：继承至 ClassLoader 抽象类，加载系统变量 <code>Djava.ext.dir</code> 指定指定目录的类库或 jdk 中 jre/lib/ext 目录下的类库。</li>
<li>系统类加载器(AppClassLoader)：继承至 ClassLoader 程序默认的加载器，一般加载自定义类。</li>
</ul>
</li>
<li>连接：<ul>
<li>验证：查看字节流是否符合 Class 文件规范，符合则加载到方法区存储。语句检查。</li>
<li>准备：静态常量(static final)直接赋值，为类(static)变量分配内存并设置默认初始值。</li>
<li>解析：虚拟机将常量池内的符号引用替换为直接引用的过程</li>
</ul>
</li>
<li>初始化：执行 jvm 的 <code>&lt;clinit&gt;()</code> 类构造器方法，初始化静态变量和静态块中的数据。数据初始化按代码中的顺序执行。<ul>
<li>类的构造器方法在 jvm 中是 <code>&lt;init&gt;()</code> 方法， <code>&lt;clinit&gt;()</code> 类构造器方法也会先执行父类的类构造器方法。</li>
</ul>
</li>
</ul>
<h3 id="Runtime-Data-Areas-运行时数据区"><a href="#Runtime-Data-Areas-运行时数据区" class="headerlink" title="Runtime Data Areas(运行时数据区)"></a>Runtime Data Areas(运行时数据区)</h3><p><strong><em>线程共享</em></strong> (且在虚拟机启动时创建) ：</p>
<ul>
<li>方法区：存放类信息，常量池，静态变量，方法编译后的二进制形式的机器指令集。</li>
<li>堆：存放 <code>new</code> 的对象实例和数组，在此分配内存。从内存回收角度堆还可分为新生代和老年代。</li>
</ul>
<p><strong><em>线程私有</em></strong> (生命周期与线程共存) ：</p>
<ul>
<li>虚拟机栈：存放栈帧，每一个栈帧表示一个方法，栈帧的入栈和出栈都表示了方法的调用和执行完成。<ul>
<li>栈帧：存放局部变量表(基本类型的变量和对象指向堆上的地址)、操作数帧、方法返回值、动态链接。</li>
</ul>
</li>
<li>本地方法栈：作用与虚拟机栈相同，只是服务的对象不同。<ul>
<li>虚拟机栈为 java 方法服务，本地方法栈为虚拟机使用到的 Native(本地)方法服务。</li>
</ul>
</li>
<li>程序计数器：存储当前线程所执行代码的字节码文件的行号。当前线程中断至线程恢复时的代码继续执行，依靠记录的内存地址(代码行号)。</li>
</ul>
<h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><h3 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>python 基础</title>
    <url>/2020/06/27/blog/python/basis/</url>
    <content><![CDATA[<blockquote>
<h2 id="python-基础"><a href="#python-基础" class="headerlink" title="python 基础"></a>python 基础</h2></blockquote>
<h3 id="基础超速一览："><a href="#基础超速一览：" class="headerlink" title="基础超速一览："></a>基础超速一览：</h3><ul>
<li><code>print(&quot;hello world!&quot;)</code> ：打印默认会换行逗号添加 <code>end=&#39;&#39;</code> 解除，python2 支持不要括号 <code>print &quot;hello world!&quot;</code> ,</li>
<li>定义变量：python 定义变量不需要关键字只需要定义变量名和赋值。python 中用 <code>#</code> 作为注释</li>
<li><code>print(&quot;hello world!\n&quot; * 3)</code> ：python 中字符串可以做乘法</li>
<li><code>input(&quot;请输入：&quot;)</code> ：接受键盘的输入，返回输入的字符串</li>
<li>类型转换：<code>int(表达式)</code> <code>str(表达式)</code> <code>float(表达式)</code> ,bool 值<code>true==1</code> <code>false==0</code></li>
<li><code>import random</code> ： 引入模块 <code>random.randint(1,10)</code> 使用模块方法产生随机数</li>
<li>基本数据类型：<code>str</code> <code>int</code> <code>float</code> <code>bool</code></li>
<li>类型判断： <code>type(表达式)</code> 返回其类型的字符串， <code>isinstance(表达式,数据类型)</code> 判断参 1 的值是否是参 2 的数据类型</li>
<li>运算符：<code>**</code> 幂运算，<code>//</code> 取整除(向下除)， 非 <code>not</code> 或 <code>or</code> 且<code>and</code></li>
<li><code>if</code>语句：python 中没有大括号，都用缩进表示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure>

<ul>
<li><code>while</code>：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure>

<ul>
<li><code>for</code>：for 元素 in 可迭代列表:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="string">&quot;12345&quot;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> msg:</span><br><span class="line">    print(s) <span class="comment"># break与continue 控制循环</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环自然结束时执行</span></span><br></pre></td></tr></table></figure>

<p>for 循环常搭配 <code>range([sta]默认0,end,[步进])</code> 一起使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 默认从0开始到5但不取5，输出结果：01234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">5</span>):</span><br><span class="line">    print(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 从2到5但不取5，输出结果：234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>):</span><br><span class="line">    print(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 每次步进2位数，输出结果：13</span></span><br></pre></td></tr></table></figure>

<h3 id="Str-字符串-："><a href="#Str-字符串-：" class="headerlink" title="Str(字符串)："></a>Str(字符串)：</h3><blockquote>
<p>字符串，列表，元组，在 python 中都是序列。</p>
</blockquote>
<ul>
<li>python 中字符串可以用单双三引号三种方式定义， <code>r&quot;str\n&quot;</code> 等于 <code>&quot;str\\n&quot;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;hi&#x27;</span></span><br><span class="line">str=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line">str=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world\n</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 原始字符串：</span></span><br><span class="line">str=<span class="string">r&quot;hello world\n&quot;</span> <span class="comment">#等于&quot;hello world\\n&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串与元组类似：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str[<span class="number">0</span>] <span class="comment"># 获取单个字符</span></span><br><span class="line">str[<span class="number">5</span>:] <span class="comment"># 切片</span></span><br><span class="line">str[<span class="number">-10</span>:<span class="number">-1</span>] <span class="comment"># 负数则从末尾计数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串常用方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(str) <span class="comment"># 返回字符串长度</span></span><br><span class="line">str.strip() <span class="comment"># 删除开头和结尾的空白字符</span></span><br><span class="line">str.lower() <span class="comment"># 返回小写的字符串</span></span><br><span class="line">str.upper() <span class="comment"># 返回大写的字符串</span></span><br><span class="line">str.swapcase() <span class="comment"># 切换大小写</span></span><br><span class="line">str.replace(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>) <span class="comment"># 返回替换后的字符串</span></span><br><span class="line">str.split(<span class="string">&#x27;\n&#x27;</span>,num) <span class="comment"># 返回按指定分隔符分隔的列表,num为分隔次数默认-1分隔全部</span></span><br><span class="line">print(<span class="string">&quot;hello&quot;</span> <span class="keyword">in</span> str) <span class="comment"># 查看某字符串是否存在此字符串中</span></span><br><span class="line">print(<span class="string">&quot;hello&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> str) <span class="comment"># 与not搭配使用</span></span><br><span class="line"></span><br><span class="line">str.count(<span class="string">&quot;str&quot;</span>) <span class="comment"># 某字符串出现的次数</span></span><br><span class="line"><span class="comment"># find与index类似，查找某串在字符串中的位置</span></span><br><span class="line">print(str.find(<span class="string">&quot;w&quot;</span>)) <span class="comment"># find(value, [[start], end])</span></span><br><span class="line">print(str.index(<span class="string">&quot;w&quot;</span>)) <span class="comment"># 参数同上</span></span><br><span class="line"><span class="comment"># 未查找到时：find方法返回 -1，index方法将引发异常</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123abc&quot;</span>.isalnum() <span class="comment"># 字符串中的字符是否都是字母或数字</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span>.isalpha() <span class="comment"># 字符串中的字符是否都是字母</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>.isdigit() <span class="comment"># 字符串中的字符是否都是数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join按指定分隔符将可迭代对象中的元素，连接为一个字符串</span></span><br><span class="line">lists=(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;-&quot;</span>.join(lists)) <span class="comment"># 1-2-3</span></span><br><span class="line">d=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ruoxi&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;+&quot;</span>.join(d)) <span class="comment"># name+value key的组合字符串</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串格式化：<br>因为 python 中字符串不允许与数字相加组成新的字符串 <code>str+1 #报错</code> ，此时我们可借助字符串格式化来完成。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># format 方法格式化</span></span><br><span class="line">print(<span class="string">&quot;&#123;&#125;hello&#123;&#125;world&quot;</span>.format(<span class="number">1</span>,<span class="string">&quot;ha&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;&#123;1&#125;hello&#123;0&#125;world&#123;0&#125;&quot;</span>.format(<span class="number">1</span>,<span class="string">&quot;ha&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;&#123;a&#125;hello&#123;b&#125;world&#123;a&#125;&quot;</span>.format(a=<span class="number">1</span>,b=<span class="string">&quot;ha&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.format(**site))</span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">lists=[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;www&#x27;</span>]</span><br><span class="line">print(<span class="string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.format(lists))  <span class="comment"># &quot;0&quot; 是必须的</span></span><br><span class="line"><span class="comment"># 还可传入一个对象</span></span><br><span class="line">print(<span class="string">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.format(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化数字</span></span><br><span class="line">print(<span class="string">&quot;&#123;0:.2f&#125;&quot;</span>.format(<span class="number">3.1415926</span>)) <span class="comment"># 保留小数点后两位(为0表示不要小数)</span></span><br><span class="line">print(<span class="string">&quot;&#123;0:+.2f&#125;&quot;</span>.format(<span class="number">3.1415926</span>)) <span class="comment"># 带符号保留小数点后两位</span></span><br><span class="line">print(<span class="string">&quot;&#123;:0&gt;2d&#125;&quot;</span>.format(<span class="number">3</span>)) <span class="comment"># 数字补零(填充左边,宽度为2)</span></span><br><span class="line">print(<span class="string">&quot;&#123;0:x&lt;4d&#125;&quot;</span>.format(<span class="number">3</span>)) <span class="comment"># 数字补零(填充左边,宽度为2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %操作符格式化：</span></span><br><span class="line"><span class="comment"># 使用格式：%[(key)][+:右对齐,-:左对齐,0:0填充][字符宽度].[小数位]类型</span></span><br><span class="line">print(<span class="string">&quot;%dhello world%s&quot;</span>%(<span class="number">12</span>,<span class="number">1234</span>)) <span class="comment">#元组方式</span></span><br><span class="line">print(<span class="string">&quot;%(key1)d hi world %(key2)s&quot;</span> % &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="number">123</span>&#125;) <span class="comment"># 字典方式</span></span><br><span class="line">print(<span class="string">&quot;%-4d&quot;</span> % <span class="number">5</span>) <span class="comment"># 单个元素无须括号包裹</span></span><br><span class="line">print(<span class="string">&quot;%+8.3f&quot;</span> % <span class="number">2.3</span>)</span><br><span class="line"><span class="comment"># 常用类型：%s字符串，%b二进制整数，%d十进制整数</span></span><br><span class="line"><span class="comment"># %o八进制整数，%x十六进制整数，%f浮点数，%%字符&quot;%&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h3><ul>
<li><h4 id="List-列表-："><a href="#List-列表-：" class="headerlink" title="List(列表)："></a>List(列表)：</h4></li>
</ul>
<p>创建一个列表：(看似与 c 数组相似实则使用差距甚远)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists1=[<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;2&quot;</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">lists2=[<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>]</span><br><span class="line">print(lists2[<span class="number">1</span>])</span><br><span class="line">print(lists1)</span><br><span class="line">print(lists1+lists2)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hi</span><br><span class="line">[0, &#39;1&#39;, &#39;2&#39;, [3, 4, 5]]</span><br><span class="line">[0, &#39;1&#39;, &#39;2&#39;, [3, 4, 5], &#39;str&#39;, &#39;hi&#39;]</span><br></pre></td></tr></table></figure>

<p>可以看出一个列表可接受任何类型的数据，并且两个列表之间可以向加。</p>
<p>常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists2.append(<span class="string">&quot;world&quot;</span>) <span class="comment"># 添加</span></span><br><span class="line">print(len(lists2)) <span class="comment">#长度</span></span><br><span class="line">lists2.extend([<span class="string">&#x27;list&#x27;</span>]) <span class="comment"># 将另一列表元素添加到此列表</span></span><br><span class="line">lists2.insert(<span class="number">1</span>,<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 插入从0开始</span></span><br><span class="line">lists2.remove(<span class="string">&#x27;str&#x27;</span>) <span class="comment"># 移除一个指定元素</span></span><br><span class="line">lists2.pop() <span class="comment"># 移除最后一个元素并返回</span></span><br><span class="line">lists2.pop(<span class="number">1</span>) <span class="comment"># 指定位置移除并返回此元素</span></span><br><span class="line">lists2.sort() <span class="comment"># 对列表元素排序(默认升序)</span></span><br><span class="line">lists2.reverse() <span class="comment"># 将现列表反序</span></span><br><span class="line">lists1.count(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># 统计某元素出现的次数</span></span><br><span class="line">lists1.index(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># 查找元素</span></span><br><span class="line">lists1.index(<span class="string">&#x27;2&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="comment"># 指定位置开始在某范围内查找</span></span><br><span class="line">print(lists2)</span><br><span class="line">print(<span class="string">&#x27;2&#x27;</span> <span class="keyword">in</span> lists1) <span class="comment"># 查找元素是否存在某元素中</span></span><br></pre></td></tr></table></figure>

<p>切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lists1[:] <span class="comment"># 复制此列表返回</span></span><br><span class="line">lists1[:<span class="number">3</span>] <span class="comment"># 从头取到3的前一个元素</span></span><br><span class="line">lists1[<span class="number">1</span>:] <span class="comment"># 从1取到最后一个元素</span></span><br><span class="line">lists1[<span class="number">2</span>:<span class="number">3</span>] <span class="comment"># :后的数字在列表长度内不取，大于列表长度将取到最后一位</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="Tuple-元组-："><a href="#Tuple-元组-：" class="headerlink" title="Tuple(元组)："></a>Tuple(元组)：</h4></li>
</ul>
<p>元组和列表类似，但是不同的是元组不能修改，元组使用小括号。<br>元组中的元素值是不允许修改的，元组之间可相加。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=(<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;2&quot;</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">t2=(<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">print(t1+t2)</span><br></pre></td></tr></table></figure>

<p>当元组只有一个元素时在后面添加一个 <code>‘,’</code> 才能表示它是一个元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=(<span class="number">1</span>) <span class="comment"># 普通数字</span></span><br><span class="line">t3=(<span class="number">1</span>,) <span class="comment"># 元组</span></span><br><span class="line">t4=<span class="number">1</span>,<span class="number">2</span> <span class="comment"># 有多个元素时不用括号也表示元组</span></span><br></pre></td></tr></table></figure>

<h3 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(list1,list2)=(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>) <span class="comment"># 将序列元素赋值给指定变量,列表同([])</span></span><br><span class="line">print(list1,list2) <span class="comment"># 输出：1 2</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;hello&quot;</span></span><br><span class="line">print(list()) <span class="comment"># 返回一个空列表，tuple同</span></span><br><span class="line">print(list(str)) <span class="comment"># 将一个序列元素变为列表</span></span><br><span class="line">print(tuple(str)) <span class="comment"># 将一个序列元素变为列表</span></span><br><span class="line">print(tuple(list(str))) <span class="comment"># 因为list和tuple都是序列可以相互转换</span></span><br><span class="line">len(tuple(str)) <span class="comment"># 返回长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中数字和字符串同时存在时使用max或min将报错</span></span><br><span class="line">print(max(list(str))) <span class="comment"># 返回序列中的最大值，max(str)同</span></span><br><span class="line">min(str) <span class="comment"># 最小值同理</span></span><br><span class="line">sum((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 对数字序列求和(参2可选再加上一数)</span></span><br><span class="line"></span><br><span class="line">list(reversed(str)) <span class="comment"># 返回一个反转的迭代器，序列对象可接受并转换</span></span><br><span class="line"><span class="comment"># 将序列组合为一个索引序列，同时列出数据和数据下标，返回enumerate(枚举)对象</span></span><br><span class="line">print(list(enumerate(str))) <span class="comment"># 运行结果：((0, &#x27;h&#x27;), (1, &#x27;e&#x27;), (2, &#x27;l&#x27;), (3, &#x27;l&#x27;), (4, &#x27;o&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序列中对应的元素打包成一个个元组，然后返回由这些元组组成的对象</span></span><br><span class="line">a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># 4在b中没有对应元素，将被舍去</span></span><br><span class="line">b=(<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>)</span><br><span class="line">print(list(zip(a,b))) <span class="comment"># 运行结果：[(1, &#x27;一&#x27;), (2, &#x27;二&#x27;), (3, &#x27;三&#x27;)]</span></span><br></pre></td></tr></table></figure>

<h3 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h3><p>python 中使用 <code>def</code> 定义函数，并且允许设置的默认值。 <code>*变量名</code> 允许传入任意个的值，此变量名管理一个元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">name=<span class="string">&quot;long&quot;</span>,value=<span class="string">&quot;yes&quot;</span>,*var</span>):</span></span><br><span class="line">    <span class="string">&#x27;函数第一行字符串作为函数的文档，通过help方法可以查看&#x27;</span></span><br><span class="line">    print(name+value)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> var: <span class="comment"># &#x27;*&#x27;:任意参数接受到的值将组成一个元组</span></span><br><span class="line">        print(s)</span><br><span class="line">    <span class="keyword">return</span> name <span class="comment">#返回值</span></span><br><span class="line"></span><br><span class="line">help(fun) <span class="comment"># 查看函数文档</span></span><br><span class="line">fun(value=<span class="string">&quot;ha&quot;</span>,name=<span class="string">&quot;zhang&quot;</span>) <span class="comment"># 关键字传参(不能传入任意参数的值)</span></span><br><span class="line">fun(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 1，2 作为任意参数组成元组传入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任意参数后还有参数时必须用关键字传参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">*var,str=<span class="string">&quot;s&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> var:</span><br><span class="line">        print(s)</span><br><span class="line">    print(str)</span><br><span class="line">fun2(<span class="number">1</span>,str=<span class="string">&quot;ha&quot;</span>) <span class="comment"># 使用关键字传参给任意参数后面的参数传参</span></span><br></pre></td></tr></table></figure>

<p>函数细节：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># global：修饰全局变量：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="comment"># 在函数内改变外部变量需要加 global 关键字</span></span><br><span class="line">    <span class="keyword">global</span> count <span class="comment"># 去掉此句 count 将是一个局部变量</span></span><br><span class="line">    count=<span class="number">2</span></span><br><span class="line">    print(<span class="string">&quot;fun() = %d&quot;</span>%count)</span><br><span class="line">count =<span class="number">1</span></span><br><span class="line">fun() <span class="comment"># 输出：fun() = 2</span></span><br><span class="line">print(<span class="string">&quot;main() = %d&quot;</span>%count) <span class="comment"># 输出：main() = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nonlocal 修饰外层变量：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span> <span class="comment"># 函数内部可嵌套函数</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x <span class="comment"># 修饰为外部变量，去除此句将报错</span></span><br><span class="line">        x *=x</span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> func2() <span class="comment"># 返回内部函数</span></span><br><span class="line">func1() <span class="comment"># 输出：4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda 表达式：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span> <span class="comment"># lambda 表达式可以简写此方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 使用方法：&#x27;lambda 参数(多个用逗号隔开): 返回值表达式&#x27;</span></span><br><span class="line">f=<span class="keyword">lambda</span> : <span class="number">1</span> <span class="comment"># 它返回的只是一个函数对象</span></span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure>

<h3 id="Set-集合-："><a href="#Set-集合-：" class="headerlink" title="Set(集合)："></a>Set(集合)：</h3><p>集合是无序和无索引的集合。在 Python 中，集合用花括号编写。<br>可以使用 <code>for</code> 循环遍历 set 项目，或者使用 <code>in</code> 关键字查询集合中是否存在指定值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义集合</span></span><br><span class="line">sets=&#123;<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;set2&quot;</span>&#125;</span><br><span class="line">set(sets) <span class="comment"># 接受一个可迭代序列转集合，空参为空集合</span></span><br><span class="line">print(sets)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sets: <span class="comment"># 遍历集合</span></span><br><span class="line">    print(<span class="string">&quot;iemt : &quot;</span>+item)</span><br><span class="line">print(<span class="string">&quot;set2&quot;</span> <span class="keyword">in</span> sets) <span class="comment"># 查看某元素是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合运算：</span></span><br><span class="line">a=set(<span class="string">&#x27;abc&#x27;</span>) <span class="comment"># &#123;&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">b=set(<span class="string">&#x27;bcd&#x27;</span>) <span class="comment"># &#123;&#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">print(a - b) <span class="comment"># a包含b不包含的元素(a独有或删除a中b存在的元素)</span></span><br><span class="line">print(a | b) <span class="comment"># ab 中所有的元素</span></span><br><span class="line">print(a &amp; b) <span class="comment"># ab 同时包含的元素</span></span><br><span class="line">print(a ^ b) <span class="comment"># ab 中它们独有的元素</span></span><br></pre></td></tr></table></figure>

<p>常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sets=set(<span class="string">&quot;abcde&quot;</span>)</span><br><span class="line">len(sets) <span class="comment"># 集合个数</span></span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> sets) <span class="comment"># 判断元素是否存在此集合中</span></span><br><span class="line">sets.copy() <span class="comment"># 拷贝此集合</span></span><br><span class="line">sets.clear() <span class="comment"># 清空集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素：</span></span><br><span class="line">sets.add(<span class="string">&quot;a&quot;</span>) <span class="comment"># 添加一个元素</span></span><br><span class="line"><span class="comment"># 另一种添加元素方式，可传入可迭代元素(包括字典保存它的key)</span></span><br><span class="line">sets.update(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;,<span class="string">&#x27;e&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素：</span></span><br><span class="line">sets.remove(<span class="string">&quot;a&quot;</span>) <span class="comment"># 移除元素并返回，元素不存在则报错</span></span><br><span class="line">sets.discard(<span class="string">&quot;f&quot;</span>) <span class="comment"># 移除指定元素不存在时不会报错</span></span><br><span class="line">sets.pop() <span class="comment"># 随机移除元素并返回</span></span><br><span class="line"></span><br><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.isdisjoint(b) <span class="comment"># 集合是否没有相同元素</span></span><br><span class="line">a.issuperset(b) <span class="comment"># 集合是否是某集合的父集</span></span><br><span class="line">b.issubset(a) <span class="comment"># 集合是否是某集合的子集</span></span><br></pre></td></tr></table></figure>

<h3 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典):"></a>Dictionary(字典):</h3><p>键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典创建key唯一，可以是字符串，数字，元组</span></span><br><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125; <span class="comment"># 字典值可以是任何对象</span></span><br><span class="line">print(d[(<span class="number">1</span>,<span class="number">2</span>)]) <span class="comment"># 可以通过键访问和修改值</span></span><br><span class="line">print(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> d) <span class="comment"># 查看某键是否存在此字典中</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>]=<span class="string">&#x27;b&#x27;</span> <span class="comment"># 当key不存在时会自动创建</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&#x27;a&#x27;</span>] <span class="comment"># 删除某元素</span></span><br><span class="line">len(d) <span class="comment"># 元素个数</span></span><br></pre></td></tr></table></figure>

<p>常用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.get(<span class="string">&quot;a&quot;</span>,<span class="literal">False</span>) <span class="comment"># 根据key获取值不存在时，返回参2的值默认为None</span></span><br><span class="line">d.setdefault(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="comment"># 与get一样，不存在时创建并赋参2值</span></span><br><span class="line">d.update(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;d&#x27;</span>&#125;) <span class="comment"># 将传入的字典数据都添加到此字典中</span></span><br><span class="line">d.pop(<span class="string">&#x27;b&#x27;</span>,<span class="literal">False</span>) <span class="comment"># 删除指定key，不存在时返回参2值或参2不写将报错</span></span><br><span class="line">d.popitem() <span class="comment"># 删除并返回最后一组键值对组成元组</span></span><br><span class="line">d.copy() <span class="comment"># 返回此字典的拷贝</span></span><br><span class="line"></span><br><span class="line">d.keys() <span class="comment"># 返回此字典key的迭代器(可用list()转换为列表)</span></span><br><span class="line">d.values() <span class="comment"># 返回values的迭代器(可list())</span></span><br><span class="line">d.items() <span class="comment"># 返回键值对元组，组成的列表:[(键，值)]</span></span><br><span class="line">d.clear() <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line">t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 创建序列作为key</span></span><br><span class="line">d=d.fromkeys(t,<span class="string">&#x27;def&#x27;</span>) <span class="comment"># 创建一个新字典，参2为值(默认None)</span></span><br><span class="line">print(d) <span class="comment"># &#123;1: &#x27;def&#x27;, 2: &#x27;def&#x27;, 3: &#x27;def&#x27;&#125;</span></span><br><span class="line"><span class="keyword">del</span> d <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 基础</title>
    <url>/2020/06/18/blog/java/jc/</url>
    <content><![CDATA[<h3 id="JAVA-基础进阶巩固"><a href="#JAVA-基础进阶巩固" class="headerlink" title="JAVA 基础进阶巩固"></a><center>JAVA 基础进阶巩固</center></h3><h3 id="类-class-："><a href="#类-class-：" class="headerlink" title="类(class)："></a>类(class)：</h3><ul>
<li>类：是描述相同事物的共同特征的抽象。</li>
<li>对象：是基于类具体创造的实例。</li>
<li>类名建议使用驼峰写法,一个 java 代码文件中可以定义多个类。但只有 java 文件名的同名类才能被 public 修饰。</li>
<li>类中有且只有五大成分：成员变量，成员方法，构造器，代码块，内部类。</li>
<li><code>类名 变量=new 构造器</code> 类有一个默认的构造器，当定义了其它构造器时此默认构造器将不存在。</li>
</ul>
<h3 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h3><ul>
<li>面像对象的三大特征：封装，继承，多态。</li>
<li>封装的作用：提高代码安全性，实现代码组件化。</li>
<li>子类实际上继承了父类的私有成员，只是不能直接访问。</li>
<li>子类实际上并未继承父类的静态成员，只是与父类共享。</li>
<li>方法重写：<ul>
<li>子类重写父类方法时，必须保证名称，参数列表与父类重写方法一致。</li>
<li>子类重写方法的返回值类型范围只能等于或小于父类声明的返回值。</li>
<li>子类重写方法的修饰符只能等于或大于父类声明的修饰符。</li>
<li>子类重写方法抛出的异常只能等于或小于父类抛出的异常。</li>
<li>重写方法应加上 <code>@Override</code> 注解。</li>
</ul>
</li>
<li><code>this</code> 与 <code>super</code> :<ul>
<li><code>this(参数列表)</code> 调用本类构造器。</li>
<li><code>super(参数列表)</code> 调用父类的构造器，一般子类构造器中默认带有 <code>super()</code> 。</li>
<li><code>this</code> 与 <code>super</code> 必须放在构造器的第一行，且它们不能同时出现在一个构造器中。</li>
</ul>
</li>
<li>抽象类与接口：<ul>
<li>抽象类用 <code>abstract</code> 修饰，且不能被实例化。抽象类中不一定得有抽象成员。</li>
<li>有抽象方法就一定是抽象类，子类必须重写父类方法否则将此类定义为抽象类。</li>
<li>抽象类是一种思想，接口是一种规范。一个类可实现多个接口。</li>
<li>父类方法与接口默认(default)方法同名时，将执行父类的方法。</li>
<li>当实现多接口时，多个接口中默认方法同名时我们必须重写这个方法。</li>
</ul>
</li>
<li><code>final</code> 关键字：<ul>
<li>修饰的类为最终类，不能被继承。修饰的方法为最终方法，不能不重写。</li>
<li>修饰的变量为常量，有且仅能被 <strong>赋值一次</strong>，类中定义的成员常量可利用构造器赋初值。</li>
<li><code>abstract</code> 与 <code>final</code> 为互斥关系不能同时修饰一个成员。</li>
</ul>
</li>
</ul>
<ul>
<li>多态变量与方法的访问：<ul>
<li>方法：编译看左边，运行看右边。</li>
<li>变量：编译看左边，运行看左边。</li>
<li>java 强制类型转换之前建议判断变量的类型： <code>变量 instanceof 类型</code></li>
</ul>
</li>
<li>内部类：<ul>
<li>静态内部类(<code>static class</code>)：与外部类一同加载，可直接访问外部静态成员，其它成员需要外部对象访问。</li>
<li>实例内部类：不能定义静态成员(常量除外)，可以访问外部类所有资源。</li>
</ul>
</li>
<li>枚举类：</li>
</ul>
<h3 id="常用类-API-："><a href="#常用类-API-：" class="headerlink" title="常用类(API)："></a>常用类(API)：</h3><h4 id="Date："><a href="#Date：" class="headerlink" title="Date："></a>Date：</h4><p>大部分方法方法也废弃，由 <code>Calendar</code> 类代替。</p>
<ul>
<li>可用构造器：<code>Date()</code> 与 <code>Date(long date)</code></li>
</ul>
<p>部分可用方法介绍：</p>
<ul>
<li><code>getTime</code> ： 返回此时间对象自 1970 年 1 月 1 日以来的毫秒数<ul>
<li>官方不推荐用 <code>new Date().getTime()</code> 来获取此时的时间毫秒数，推荐使用 <code>System.currentTimeMillis()</code></li>
</ul>
</li>
<li><code>clone</code> ：返回此对象的克隆体对象</li>
<li><code>before(Date)</code> ：某 Date 是否本 Date 时间之前</li>
<li><code>after(Date)</code> ：某 Date 是否本 Date 时间之后</li>
<li><code>compareTo(Date)</code> 与 <code>equals(Object)</code> ：前者比较时间长远返回 <code>int(0||1||-1)</code> ,后者比较时间是否相同。</li>
</ul>
<h4 id="DateFormat："><a href="#DateFormat：" class="headerlink" title="DateFormat："></a>DateFormat：</h4><h3 id="："><a href="#：" class="headerlink" title="："></a>：</h3><h4 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h4><ul>
<li>转义字符(字母大写表示取反)：<br><code>\d</code> ：表示任意一个数字<br><code>\w</code> ：表示字母数字或下划线中任意一个<br><code>\s</code> ：表示空格,制表符,换行符,等空白字符中的任意一个</li>
<li>量词：<br><code>.</code> ：表示一个任意字符(除换行符外)，如需包含建议使用 <code>[\s\S]</code><br><code>&#123;n&#125;</code> ：表达式重复n次<br><code>&#123;n,m&#125;</code> ：表达式重复n至m次<br><code>&#123;m,&#125;</code> ：表达式至少重复m次<br><code>?</code> ：表达式重复0-1次，相当于 <code>&#123;0,1&#125;</code><br><code>+</code> ：表达式至少重复1次，相当于 <code>&#123;1,&#125;</code><br><code>*</code> ：表达式重复任意次，相当与 <code>&#123;0,&#125;</code></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Thread</title>
    <url>/2020/06/13/blog/java/thread/thread/</url>
    <content><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="知识储备："><a href="#知识储备：" class="headerlink" title="知识储备："></a>知识储备：</h3><ul>
<li>java 中线程类主要依靠 <code>Runnable</code> 接口和 <code>Thread</code> 类。线程的启动主要依靠 <code>Thread</code> 的 <code>start</code>方法。</li>
<li>线程中发生异常，只会停止异常线程。一般不会影响其它线程。</li>
<li>线程存在编号从 0 开始。一个线程多次启动会报错，线程执行结束后也不能重启动。</li>
<li>main 方法是主线程，也是一条线程不能忽视</li>
</ul>
<h3 id="线程的创建与基础使用："><a href="#线程的创建与基础使用：" class="headerlink" title="线程的创建与基础使用："></a>线程的创建与基础使用：</h3><p>创建线程一般有两种方式：</p>
<ul>
<li>继承 <code>Thread</code> 类，重写 <code>run</code> 方法，调用 <code>start</code> 启动线程。</li>
<li>实现 <code>Runnable</code> 接口，实现 run 方法。将实现类作为参数传给 Thread 构造方法，利用 <code>start</code> 启动线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1利用类继承Thread类 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">/* 重写run方法，run方法中写入线程需要执行的代码 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;extends Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2利用类实现Runnable接口 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">/* 实现run方法，run方法中写入线程需要执行的代码 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;implements Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.利用Thread的继承类，创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> ThreadTest().start();</span><br><span class="line">        <span class="comment">//2.利用Runnable的实现类，创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> RunnableTest()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>start</code> 方法启动线程，Java 虚拟机调用此线程的 run 方法。直接调用 <code>run</code> 方法跟普通成员方法一样，是不会启动线程的。</li>
<li><code>Thread</code> 是 <code>Runnable</code> 的子类。</li>
</ul>
<p>Tread 的 3 个静态方法：</p>
<ul>
<li><code>Thread.currentThread()</code> 返回当前线程对象</li>
<li><code>Thread.currentThread().getName()</code> 返回当前线程名称</li>
<li><code>Thread.sleep(long millis)</code> 线程释放执行权并睡眠指定毫秒数</li>
</ul>
<h3 id="synchronized-同步锁："><a href="#synchronized-同步锁：" class="headerlink" title="synchronized 同步锁："></a>synchronized 同步锁：</h3><p>线程中多线程操作一个资源时往往容易发生错误，这时我们需要利用 <code>同步</code> 和 <code>锁</code> 来同步操作资源的代码块。</p>
<ul>
<li>同步前提：有多个线程且同步代码块使用同一个锁(对象)，不同锁同步块的线程互不产生影响。</li>
<li><code>synchronized</code> 修饰的代码块，为同步代码块。它需要传入一个对象作为参数，传入的对象作为了锁。</li>
<li>多线程中当某线程执行同步代码块代码时拿到锁(对象)如中途休眠，其它线程开始执行。当执行到同步代码块时它会去获取同步锁，因为锁被占用此线程将无法继续执行，而释放执行权。直至持有锁的线程执行完成并释放锁，其它同锁线程才能执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程中存在共性数据时，用同步保证数据安全性</span></span><br><span class="line"><span class="keyword">synchronized</span>(Object)&#123;<span class="comment">//同步代码块，需要传入一个对象作为锁</span></span><br><span class="line">    <span class="comment">//当前线程等待，被唤醒后继续向下执行(会抛出InterruptedException)</span></span><br><span class="line">    Object.wait();</span><br><span class="line">    <span class="comment">//唤醒一个在此对象监视器(锁)上的单线程(无等待线程时使用不报错)</span></span><br><span class="line">    Object.notify();</span><br><span class="line">    Object.notifyAll();<span class="comment">//唤醒在此对象监视器(锁)上的所有线程</span></span><br><span class="line">    <span class="comment">//以上三个方法必须在同步中且被锁对象调用，都是继承至Object的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操控 synchronized 同步块(Object(锁)的三个线程方法)：</p>
<ul>
<li><code>wait</code> ：当前线程在此(同步块中)等待，且释放锁。也可传入一个 <code>long</code> 型的参数作为等待毫秒数，在此时间内未被唤醒，后将重新具有线程的执行权。</li>
<li><code>notify</code> ：唤醒正在等待对象锁的单个线程。</li>
<li><code>notifyAll</code>：唤醒正在等待对象锁的所有线程。</li>
</ul>
<p><code>synchronized</code> 修饰函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//同步函数，以this为锁。多个块需要同步时不建议使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;<span class="comment">//静态方法锁 = 类名.class</span></span><br><span class="line">    <span class="comment">//静态同步函数，因为静态中没有this，所以以本类字节码文件对象为锁</span></span><br><span class="line">    <span class="keyword">if</span>(c==<span class="keyword">null</span>)&#123;<span class="comment">//设计模式中的应用</span></span><br><span class="line">        <span class="keyword">synchronized</span>(RunnableDemo.class)&#123;<span class="comment">//提高效率，减少对锁的判断</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="keyword">null</span>) c=<span class="keyword">new</span> <span class="class"><span class="keyword">class</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="初识死锁"><a href="#初识死锁" class="headerlink" title="初识死锁"></a>初识死锁</h3><p>简单死锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(ObjectA)&#123;<span class="comment">//线程1同步代码块</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ObjectB)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(ObjectB)&#123;<span class="comment">//线程2同步代码块</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ObjectA)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单死锁实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> is;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object objA = <span class="keyword">new</span> Object();<span class="comment">//锁A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object objB = <span class="keyword">new</span> Object();<span class="comment">//锁B</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest</span><span class="params">(<span class="keyword">boolean</span> is)</span></span>&#123;<span class="keyword">this</span>.is = is;&#125;<span class="comment">//线程控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is)&#123;<span class="comment">//if线程块</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--if--objA&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--if--objB&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//else线程块</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--else--objB&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--else--objA&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        ThreadTest Trun = <span class="keyword">new</span> ThreadTest(<span class="keyword">true</span>);</span><br><span class="line">        ThreadTest Frun = <span class="keyword">new</span> ThreadTest(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(Trun).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(Frun).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">Thread-<span class="number">3</span>--<span class="keyword">else</span>--objB</span><br><span class="line">Thread-<span class="number">2</span>--<span class="keyword">if</span>--objA</span><br></pre></td></tr></table></figure>

<p>结论：Frun 拿到 objB 锁输出后线程阻塞，Trun 线程执行拿到了 objA 锁，执行输出 <code>Thread-2--if--objA</code> 后需要 objB 锁但此锁在 Frun 线程中因此线程阻塞。Frun 在次拿到线权但它需要 objA 锁，因此两线程都进入了阻塞状态。也就形成了死锁。</p>
<h3 id="Lock-同步"><a href="#Lock-同步" class="headerlink" title="Lock 同步"></a>Lock 同步</h3><p>jdk1.5 以后出现了新的锁，在 java.util.concurrent.locks 包中。 <code>Lock</code> 代替同步 <code>synchronized</code> 。Lock 作为锁使用更加灵活，synchronized 更加方便直观。</p>
<p>Lock 是一个接口建议使用它的实现类 <code>ReentrantLock</code> 类创建对象使用。一个 lock 对象表示同一个锁。</p>
<p><code>Lock lock = new ReentrantLock()</code> ：创建锁对象<br><code>lock.lock()</code> ：获取锁<br><code>lock.unlock()</code> ：释放锁(该放在 finally 中)</p>
<p><code>Condition set = lock.newCondition()</code> ：生产线程控制器<br><code>set.await()</code> ：当前线程在此等待，且释放锁<br><code>set.signal()</code> ：唤醒此控制器停止的线程<br><code>set.signalAll()</code> ：唤醒此控制器停止的所有线程</p>
<p>Lock 锁多消费多生产实例：</p>
<ul>
<li>生产和消费线程类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;<span class="comment">//生产线程</span></span><br><span class="line">    <span class="keyword">private</span> Shopping shopping;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Set</span><span class="params">(Shopping shopping)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopping=shopping;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            shopping.set();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Out</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;<span class="comment">//消费线程</span></span><br><span class="line">    <span class="keyword">private</span> Shopping shopping;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Out</span><span class="params">(Shopping shopping)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shopping=shopping;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            shopping.out();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>商品类以及线程使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shopping</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();<span class="comment">//创建锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEmpty=<span class="keyword">true</span>;<span class="comment">//判断商品是否为空</span></span><br><span class="line">    <span class="keyword">private</span> Condition set=lock.newCondition();<span class="comment">//生产线程控制器</span></span><br><span class="line">    <span class="keyword">private</span> Condition out=lock.newCondition();<span class="comment">//消费线程控制器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;<span class="comment">//生产方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();<span class="comment">//获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;生产商品：&quot;</span> + count);</span><br><span class="line">                isEmpty=<span class="keyword">false</span>;</span><br><span class="line">                out.signal();<span class="comment">//唤醒消费线程</span></span><br><span class="line">                set.await();<span class="comment">//生产线程等待</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;<span class="comment">//消费方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();<span class="comment">//获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (!isEmpty)&#123;</span><br><span class="line">                count--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;消费商品：&quot;</span>+count);</span><br><span class="line">                isEmpty=<span class="keyword">true</span>;</span><br><span class="line">                set.signal();<span class="comment">//唤醒生产线程</span></span><br><span class="line">                out.await();<span class="comment">//消费线程等待</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Shopping shopping=<span class="keyword">new</span> Shopping();</span><br><span class="line">        Set set=<span class="keyword">new</span> Set(shopping);</span><br><span class="line">        Out out=<span class="keyword">new</span> Out(shopping);</span><br><span class="line">        <span class="keyword">new</span> Thread(set).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(set).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(out).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(out).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thread-与-线程细节"><a href="#Thread-与-线程细节" class="headerlink" title="Thread 与 线程细节"></a>Thread 与 线程细节</h3><ol>
<li><code>sleep</code> 与 <code>wait</code> 异同：</li>
</ol>
<ul>
<li>sleep 是 Thread 的静态方法可在任何位置调用，wait 是绑定在锁上控制线程的方法，且只能在同步中使用。</li>
<li>sleep 必须传入时间，wait 有多种不同参数的重构方法</li>
<li>都在同步中时 sleep 不能释放锁，wait 会释放锁。但都会让线程处于冻结状态</li>
</ul>
<ol start="2">
<li><code>interrupt</code> 中断：</li>
</ol>
<p>是<code>Thread</code> 中的方法，当此线程处于线程池等待的状态时(sleep,wait,join)，可让此线程对象调用 <code>interrupt()</code> 方法中断等待强行唤醒。</p>
<p>3.守护线程：</p>
<ul>
<li><code>setDaemon(true)</code> 设置守护线程方法必须在该线程启动之前调用</li>
<li>标记为守护线程的线程使用与普通线程一样，当所有普通线程执行完以后，只剩下守护线程那么所有守护线程无论状态都将自动结束线程并退出 java 虚拟机</li>
</ul>
<p>如下当 t1 执行完以后无论 t2 是和状态是否执行完毕都将结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">t1.start();</span><br><span class="line">t2.setDaemon(<span class="keyword">true</span>);<span class="comment">//标记3为守护线程，false普通线程</span></span><br><span class="line">t2.start();<span class="comment">//在标记之后启动线程</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>线程的优先级：</li>
</ol>
<p>线程优先级 <code>1-10</code> 所有线程默认优先级为 5， <code>setPriority(int)</code> 设置优先级。</p>
<ol start="5">
<li><code>ThreadGroup</code> 线程组：</li>
</ol>
<ul>
<li><code>Thread(ThreadGroup group, Runnable target)</code> thread 构造方法可明确线程所属线程组。</li>
<li>线程组可对多个线程或线程组进行统一操作，所有线程默认属于 main 线程组。</li>
</ul>
<ol start="6">
<li><code>join</code> 和 <code>yield</code> :</li>
</ol>
<ul>
<li><code>join</code> 主线程等待子线程结束之后才能继续运行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Son s = <span class="keyword">new</span> Son();</span><br><span class="line">        s.start();</span><br><span class="line">        s.join();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Father 的线程要等 Son 的线程执行完毕才能执行。</p>
<ul>
<li><code>yield</code> 当某线程调用此方法时，表示释放该线程的执行权。让其它线程有机会争夺执行权，且自己也有机会争夺执行权。</li>
</ul>
<p>7.匿名内部类创建启动线程：</p>
<p>因为 Thread 重写了 Runnable 的 run 方法，所以将执行 Thread 的 run 方法。使用 super 也可调用到 Runnable 的 run 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Runnable 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();<span class="comment">//没有super将无无法执行Runnable的run方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Thread 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Thread</tag>
        <tag>lock</tag>
        <tag>synchronize</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 基础</title>
    <url>/2020/06/05/blog/html/jquery/</url>
    <content><![CDATA[<h2 id="jQuery-极速一览"><a href="#jQuery-极速一览" class="headerlink" title="jQuery 极速一览"></a>jQuery 极速一览</h2><h3 id="入口函数："><a href="#入口函数：" class="headerlink" title="入口函数："></a>入口函数：</h3><p>我们先看一下原生 js 的入口函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生js写法</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onload&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>jq 的入口函数后 4 种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;jQuery_ready&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;jQuery&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;$_ready&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//常用推荐</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="解决冲突-符号的使用-："><a href="#解决冲突-符号的使用-：" class="headerlink" title="解决冲突($符号的使用)："></a>解决冲突($符号的使用)：</h3><p>释放’$‘的使用权和自定义访问符：</p>
<ul>
<li><code>jQuery.noConflict();</code> 表示释放$符的使用权，之后不能再使用$符调用函数或方法(可用 jQuery 代替)。注意此句需在 jquery 使用之前使用才有效。</li>
<li>自定义</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将$的释放语句赋值给定义的变量</span></span><br><span class="line"><span class="keyword">var</span> jq = jQuery.noConflict();</span><br><span class="line">jq(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//jq代替了 &#x27;$&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;jq&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数 $():"></a>核心函数 <code>$()</code>:</h3><p>它能接受 3 中参数：</p>
<ol>
<li>传入函数，表示它是一个入口函数</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>字符串</li>
</ol>
<ul>
<li>可像 css 选择器一样选择元素。</li>
<li>也可是一个标签字符串，会自动转为 jquery 对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//选择器</span></span><br><span class="line">    <span class="keyword">let</span> div = $(<span class="string">&quot;div&quot;</span>); <span class="comment">//拿到所有div并返回一个jquery对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line">    div = $(<span class="string">&quot;div&gt;ul&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line">    div = $(<span class="string">&quot;div li&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(div);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标签串</span></span><br><span class="line">    <span class="keyword">let</span> li = $(<span class="string">&quot;&lt;li&gt;5&lt;/li&gt;&quot;</span>); <span class="comment">//转为一个标签并组成jquery的对象</span></span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).append(li);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>3.接受一个 DOM 变量(如原生 js 获取的元素节点)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//转换为一个jquery对象并返回</span></span><br><span class="line"><span class="built_in">console</span>.log($(div));</span><br></pre></td></tr></table></figure>

<h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ul>
<li>数组方法：<br>首先要知道 jq 一般获取到的元素节点对象都是伪数组(有 0 到 length-1 的属性，和 length 属性)</li>
</ul>
<p>each(与原生 each 类似)：可遍历数组，也可遍历伪数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一个伪数组</span></span><br><span class="line"><span class="keyword">let</span> arr = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line">$.each(arr, <span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">&quot;--&quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>map(与原生 map 类似)：也可遍历伪数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = $.map(arr, <span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">&quot;--&quot;</span> + value);</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>str.trim()</code> ：去除字符串的前后空格</li>
<li><code>$.isWindow(window)</code> ：是否是 js 的 window 对象</li>
<li><code>$.isArray(arr)</code>：是否是一个数组(伪数组不算)</li>
<li><code>$.isFunction(()=&gt;&#123;&#125;)</code>：是否是一个函数</li>
</ul>
<ul>
<li><code>$.holdReady(true||false);</code>：jq 入口函数默认在 DOM 加载完成时执行，我们可以通过 <code>holdReady</code> 控制它的执行，true 关闭(确认关闭)，false 执行(取消关闭)。</li>
</ul>
<h3 id="选择器："><a href="#选择器：" class="headerlink" title="选择器："></a>选择器：</h3><ul>
<li>empty<br>即没有文本也没有子标签元素的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> empty = $(<span class="string">&quot;div:empty&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(empty);</span><br></pre></td></tr></table></figure>

<ul>
<li>parent<br>有文本或有子标签元素的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = $(<span class="string">&quot;div:parent&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(parent);</span><br></pre></td></tr></table></figure>

<ul>
<li>contains<br>包含指定文本或标签的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> contains = $(<span class="string">&quot;div:contains(&#x27;1&#x27;)&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(contains);</span><br></pre></td></tr></table></figure>

<ul>
<li>has<br>子元素包含某标签的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> has = $(<span class="string">&quot;div:has(&#x27;li&#x27;)&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(has);</span><br></pre></td></tr></table></figure>

<h3 id="对标签属性的操作："><a href="#对标签属性的操作：" class="headerlink" title="对标签属性的操作："></a>对标签属性的操作：</h3><p>有两个方法 <code>attr</code> 和 <code>prop</code> 它们类似也有不同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取标签节点属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).attr(<span class="string">&quot;value&quot;</span>));</span><br><span class="line"><span class="comment">//设置标签节点属性(不存在将自动添加)</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).attr(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="comment">//移除标签某属性</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).removeAttr(<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>prop</code> 的使用与 <code>attr</code> 相同，官方推荐当属性值为 true 和 false 时使用 <code>prop</code> 方法。其它使用 <code>attr</code> 。</p>
<h3 id="标签的-class-属性："><a href="#标签的-class-属性：" class="headerlink" title="标签的 class 属性："></a>标签的 class 属性：</h3><ul>
<li><code>$(&quot;div&quot;).addClass(&quot;class&quot;);</code> 添加 class(多个 class 用空格隔开)。</li>
<li><code>$(&quot;div&quot;).removeClass(&quot;class&quot;);</code> 删除 class</li>
<li><code>$(&quot;div&quot;).toggleClass(&quot;class&quot;);</code> 切换 class，存在就删除，不存在则添加。</li>
</ul>
<h3 id="标签内容："><a href="#标签内容：" class="headerlink" title="标签内容："></a>标签内容：</h3><ul>
<li><code>html</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html()); <span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;p&gt;value&lt;/p&gt;&quot;</span>); <span class="comment">//设置</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>text</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).text()); <span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;&lt;p&gt;value&lt;/p&gt;&quot;</span>); <span class="comment">//设置</span></span><br></pre></td></tr></table></figure>

<p>注意它们都会替换元素中原有的内容。</p>
<h3 id="css-设置属性值："><a href="#css-设置属性值：" class="headerlink" title="css 设置属性值："></a><code>css</code> 设置属性值：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取某属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;background&quot;</span>));</span><br><span class="line"><span class="comment">//设置属性，可链式添加</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;red&quot;</span>).css(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;300px&quot;</span>);</span><br><span class="line"><span class="comment">//对象方式设置属性</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;</span><br><span class="line">    background: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">    width: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">    height: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="元素宽高："><a href="#元素宽高：" class="headerlink" title="元素宽高："></a>元素宽高：</h3><p>这里拿 <code>width</code> 举例(<code>height</code>使用同理)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//元素实际宽度</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#app&quot;</span>).width());</span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).width(<span class="string">&quot;200&quot;</span>); <span class="comment">//设置宽度</span></span><br><span class="line"><span class="comment">//实际宽+内边距</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#app&quot;</span>).innerWidth());</span><br><span class="line"><span class="comment">//实际宽+内边距+边框</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#app&quot;</span>).outerWidth());</span><br><span class="line"><span class="comment">//传入true：实际宽+内边距+边框+外边距</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#app&quot;</span>).outerWidth(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure>

<h3 id="元素位置："><a href="#元素位置：" class="headerlink" title="元素位置："></a>元素位置：</h3><p>注意：<code>position</code> 只能获取不能设置，可通过设置 <code>css</code> 来设置。且 <code>offset</code> 与 <code>position</code> 都没有 right，bottom 属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//元素相对窗口位置</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#a&quot;</span>).offset().left);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#a&quot;</span>).offset().top);</span><br><span class="line">$(<span class="string">&quot;#a&quot;</span>).offset(&#123;</span><br><span class="line">    <span class="comment">//以对象方式设置值</span></span><br><span class="line">    left: <span class="number">50</span>,</span><br><span class="line">    top: <span class="number">50</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素相对定位父类元素的位置</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#a&quot;</span>).position().left);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#a&quot;</span>).position().top);</span><br></pre></td></tr></table></figure>

<h3 id="滚动："><a href="#滚动：" class="headerlink" title="滚动："></a>滚动：</h3><p><code>scrollLeft</code> 使用同理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素内滚动距离</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#scroll&quot;</span>).scrollTop());</span><br><span class="line"><span class="comment">//设置元素内滚动的距离</span></span><br><span class="line">$(<span class="string">&quot;#scroll&quot;</span>).scrollTop(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//网页滚动，由于兼容性问题建议如下写法</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;html&quot;</span>).scrollTop() + $(<span class="string">&quot;body&quot;</span>).scrollTop());</span><br><span class="line">$(<span class="string">&quot;body,html&quot;</span>).scrollTop(<span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h3 id="ajax（jQuery）"><a href="#ajax（jQuery）" class="headerlink" title="ajax（jQuery）:"></a>ajax（jQuery）:</h3><h4 id="扩充："><a href="#扩充：" class="headerlink" title="扩充："></a>扩充：</h4><ul>
<li>jquery获取表单数据：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#form_id&quot;</span>).serialize(); <span class="comment">// 直接返回该from表单所有数据字符串，ajax可直接使用</span></span><br></pre></td></tr></table></figure>

<h4 id="ajax发送请求："><a href="#ajax发送请求：" class="headerlink" title="ajax发送请求："></a>ajax发送请求：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;/greet&quot;</span>,</span><br><span class="line">    data: &#123;<span class="attr">name</span>: <span class="string">&#x27;jenny&#x27;</span>&#125;,</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//data = jQuery.parseJSON(data); //dataType指明了返回数据为json类型，故不需要再反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="post请求："><a href="#post请求：" class="headerlink" title="post请求："></a>post请求：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(&#123;</span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">    url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/allBook&quot;</span>,</span><br><span class="line">    <span class="comment">// 携带数据</span></span><br><span class="line">    data:&#123;<span class="string">&quot;mgs&quot;</span>:$(<span class="string">&quot;#mgs&quot;</span>).val()&#125;,</span><br><span class="line">    <span class="comment">// 请求成功函数，data参数为请求响应的数据</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>ajax</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Map 集合</title>
    <url>/2020/06/02/blog/java/collection/map/</url>
    <content><![CDATA[<h3 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h3><h4 id="Map-已实现类与特性："><a href="#Map-已实现类与特性：" class="headerlink" title="Map 已实现类与特性："></a>Map 已实现类与特性：</h4><ul>
<li>Hashtable:哈希表结构，且不允许 null 作为键和值，同步(不建议使用)，键唯一性靠 hashCode()和 equals()(在键对象的类中重写方法，可保证键唯一性)<ul>
<li>Properties(Hashtable 子类):属性集，<strong><em>键与值都是字符串</em></strong>(没有泛型)，都以 object 存储在其中(自身提供了不用强转的方法)，且可以结合 <strong><em>流</em></strong> 进行键值操作</li>
</ul>
</li>
<li>HashMap: :哈希表结构，且允许<strong>null 作为键和值</strong>，不同步<ul>
<li>LinkedHashMap：HashMap 的子类，元素顺序为存入顺序(有序)</li>
</ul>
</li>
<li>TreeMap:二叉树结构，会对元素根据键排序(排序方法参照 TreeSet)，不同步</li>
</ul>
<h4 id="Map-常用方法："><a href="#Map-常用方法：" class="headerlink" title="Map 常用方法："></a>Map 常用方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.clear();<span class="comment">//清空元素</span></span><br><span class="line">map.size();<span class="comment">//获取元素个数</span></span><br><span class="line">map.containsKey(<span class="string">&quot;obj&quot;</span>);<span class="comment">//是否包含某键</span></span><br><span class="line">map.containsValue(<span class="string">&quot;obj&quot;</span>);<span class="comment">//是否包含某值</span></span><br><span class="line">map.isEmpty();<span class="comment">//集合是否为空</span></span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&quot;key&quot;</span>);<span class="comment">//根据键拿值</span></span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);<span class="comment">//添加元素</span></span><br><span class="line"><span class="comment">//键要保持唯一,添加同一键时会覆盖之前的值,且返回之前的值</span></span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value2&quot;</span>);<span class="comment">//修改key的值</span></span><br><span class="line">map.putAll(map);<span class="comment">//将一个Map中的所有内容添加到此map中</span></span><br><span class="line">map.remove(<span class="string">&quot;key&quot;</span>);<span class="comment">//根据键移除指定元素,返回删除的值</span></span><br><span class="line">map.remove(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);<span class="comment">//根据键与值移除指定元素(必须完全相同),返回Boolean</span></span><br></pre></td></tr></table></figure>

<h4 id="迭代-Map-集合的-3-种方法："><a href="#迭代-Map-集合的-3-种方法：" class="headerlink" title="迭代 Map 集合的 3 种方法："></a>迭代 Map 集合的 3 种方法：</h4><ol>
<li><code>map.keySet()</code> 获取所有键：<br>它返回一个 set 集合，元素都是 map 集合的 key。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set=map.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer i:set) &#123;</span><br><span class="line">    System.out.println(map.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>map.values()</code> 获取所有值<br>它返回 Collection 集合，元素都是 map 的 value。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; col=map.values();</span><br><span class="line"><span class="keyword">for</span> (String vs:col) &#123;</span><br><span class="line">    System.out.println(vs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>map.entrySet()</code> 对象方式取出</li>
</ol>
<p>它返回 <code>Set&lt;Map.Entry&lt;k,v&gt;&gt;</code> Entry是Map的内部接口，每一个Entry对象存储了map的一对键值对。通过Entry中的 <code>getKey</code> <code>getValue</code> <code>setValue</code> 等方法，对map进行 key,value的获取和value的修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;Integer,String&gt;&gt; entry=map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer,String&gt; e:entry) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key=&quot;</span>+e.getKey()</span><br><span class="line">            +<span class="string">&quot;，value=&quot;</span>+e.getValue());</span><br><span class="line">    <span class="keyword">if</span> (e.getKey()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//直接修改map中的值</span></span><br><span class="line">        e.setValue(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>map</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Set 集合</title>
    <url>/2020/06/02/blog/java/collection/set/</url>
    <content><![CDATA[<h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><blockquote>
<p>Set 接口 (无序,元素不能重复)，继承了 Collection 接口无特有方法。</p>
</blockquote>
<h4 id="Set-已实现类与特性："><a href="#Set-已实现类与特性：" class="headerlink" title="Set 已实现类与特性："></a>Set 已实现类与特性：</h4><ul>
<li>HashSet：哈希表结构，保证元素唯一性依靠 <code>hashCode()</code> 和 <code>equals()</code> 方法(hash 值相同时再判断 equals,相同将不再存储)，不同步</li>
<li>TreeSet：是链表结构(指针)，需保证元素唯一性，可排序</li>
<li>LinkedHashSet：HashSet 的子类，按存入顺序使用</li>
</ul>
<h4 id="Set-利用-Iterator-动态移除元素："><a href="#Set-利用-Iterator-动态移除元素：" class="headerlink" title="Set 利用 Iterator 动态移除元素："></a>Set 利用 Iterator 动态移除元素：</h4><p>与 list 类似直接在 foreach 或循环中动态 <code>add</code> 或 <code>remove</code> 会出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set set=<span class="keyword">new</span> HashSet();</span><br><span class="line">set.add(<span class="string">&quot;set0&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator iterator=set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    String str = (String) iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">&quot;set1&quot;</span>)) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HashSet-元素唯一性："><a href="#HashSet-元素唯一性：" class="headerlink" title="HashSet 元素唯一性："></a>HashSet 元素唯一性：</h4><blockquote>
<ul>
<li>HashSet 保证元素唯一性是通过元素的两个方法，hashCode()和 equals()来完成的。</li>
<li>如果元素的 HashCode 值相同，才会判断 equals 是否为 true。</li>
<li>如果元素的 HashCode 值不同，不会调用 equals。</li>
</ul>
</blockquote>
<p>由此可知我们要保证 Set 中存入的对象(元素)唯一时，需在该元素类中重写 <code>hashCode</code> 和 <code>equals</code> 方法。<br>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">stu</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//先返回hash值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//再判断属性是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        stu stu = (stu) o;</span><br><span class="line">        <span class="keyword">return</span> name.equals(stu.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">&quot;stu&#123;name=&quot;</span>+name+<span class="string">&quot;-age=&quot;</span>+age+<span class="string">&quot;&#125;&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------使用----------------------------</span><br><span class="line">HashSet hashSet=<span class="keyword">new</span> HashSet();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p>
<p>可以看出因为 <code>new stu(&quot;stu1&quot;,10)</code> 即 stu1 已存在 <code>new stu(&quot;stu1&quot;,20)</code> 存入失败。</p>
<h4 id="TreeSet-排序与去重："><a href="#TreeSet-排序与去重：" class="headerlink" title="TreeSet 排序与去重："></a>TreeSet 排序与去重：</h4><ul>
<li>TreeSet 保证元素唯一性和排序依靠，<code>Comparable</code> 接口的 <code>compareTo</code> 或 <code>Comparator</code> 接口的 <code>compare</code>方法。此</li>
<li>new TreeSet 时传入一个 Comparator 对象，将使用此接口方法比较元素。</li>
<li>不传入参数时默认需元素类实现 Comparable 接口，将默认使用此接口 compareTo 方法，来比较元素。存入的元素类未实现此接口将报错。</li>
<li>比较元素时返回值 <strong>等于 0</strong> 表示 <strong>元素重复</strong>。</li>
</ul>
<p><strong><em>使用默认比较排序：</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparable接口和compareTo方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stu</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">stu</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">&quot;stu&#123;name=&quot;</span>+name+<span class="string">&quot;-age=&quot;</span>+age+<span class="string">&quot;&#125;&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        stu s=(stu)o;</span><br><span class="line">        <span class="keyword">return</span> name.compareTo(s.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------使用-------------------</span><br><span class="line">TreeSet hashSet=<span class="keyword">new</span> TreeSet();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure>

<p>运行结果：<br><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p>
<p><strong><em>使用比较器比较排序：</em></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Comparator接口和compare方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compare</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        stu s1=(stu) o1;</span><br><span class="line">        stu s2=(stu) o2;</span><br><span class="line">        <span class="keyword">return</span> s1.name.compareTo(s2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------使用-----------------------------</span><br><span class="line"><span class="comment">//传入比较器</span></span><br><span class="line">TreeSet hashSet=<span class="keyword">new</span> TreeSet(<span class="keyword">new</span> compare());</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure>

<p>运行结果与上同。</p>
<h4 id="Set-中有序集合-LinkedHashSet："><a href="#Set-中有序集合-LinkedHashSet：" class="headerlink" title="Set 中有序集合 LinkedHashSet："></a>Set 中有序集合 LinkedHashSet：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedHashSet hashSet=<span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> stu(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure>

<p>运行结果：<br><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p>
<p><code>LinkedHashSet</code> 去重与 <code>HashSet</code> 同，元素顺序与存入时的顺序同。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>set</tag>
        <tag>HashSet</tag>
        <tag>TreeSet</tag>
        <tag>LinkedHashSet</tag>
      </tags>
  </entry>
  <entry>
    <title>android 杂记</title>
    <url>/2020/05/31/blog/android/view/</url>
    <content><![CDATA[<h3 id="Toast："><a href="#Toast：" class="headerlink" title="Toast："></a>Toast：</h3><ul>
<li>普通 Toast</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(getApplicationContext(), <span class="string">&quot;Toast&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义定义显示位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast toast=Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;居中Toast&quot;</span>, Toast.LENGTH_SHORT);</span><br><span class="line"><span class="comment">//参1显示位置，参2,3分别是xy轴的偏移量</span></span><br><span class="line">toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义样式(布局文件根布局设置大小不管用)<br>布局文件：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_launcher_background&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>java 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先写一个布局，然后通过layoutinflater实例为view</span></span><br><span class="line">LayoutInflater li=LayoutInflater.from(TestActivity.<span class="keyword">this</span>);</span><br><span class="line">View view=li.inflate(R.layout.toast,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//取出组件单独设置</span></span><br><span class="line">TextView textView=view.findViewById(R.id.text);</span><br><span class="line">textView.setText(<span class="string">&quot;自定义Toast&quot;</span>);</span><br><span class="line">Toast toast=<span class="keyword">new</span> Toast(<span class="keyword">this</span>);</span><br><span class="line">toast.setView(view);<span class="comment">//设置视图</span></span><br><span class="line">toast.setDuration(Toast.LENGTH_SHORT);<span class="comment">//设置时间</span></span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure>

<h3 id="AlertDialog："><a href="#AlertDialog：" class="headerlink" title="AlertDialog："></a>AlertDialog：</h3><ul>
<li>基本使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Builder是一种设计模式</span></span><br><span class="line">AlertDialog.Builder dialog=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//所有设置都是可选的</span></span><br><span class="line">dialog.setIcon(R.drawable.ic_launcher_background)</span><br><span class="line">.setTitle(<span class="string">&quot;标题&quot;</span>).setMessage(<span class="string">&quot;内容&quot;</span>)</span><br><span class="line">.setPositiveButton(<span class="string">&quot;确定按钮&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, <span class="string">&quot;确定按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.setNegativeButton(<span class="string">&quot;取消按钮&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, <span class="string">&quot;取消按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.setNeutralButton(<span class="string">&quot;其它&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, <span class="string">&quot;其它按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.create(); </span><br><span class="line"><span class="comment">// 显示对话框并返回AlertDialog对象</span></span><br><span class="line">AlertDialog ad=dialog.show();</span><br><span class="line">ad.dismiss();<span class="comment">//利用AlertDialog对象调用对话框消失方法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>列表形式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog2=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2点击事件</span></span><br><span class="line">dialog2.setTitle(<span class="string">&quot;请选择&quot;</span>).setItems(texts, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, texts[which], Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.create().show();</span><br></pre></td></tr></table></figure>

<ul>
<li>单选框形式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts2=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog4=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，参3点击事件</span></span><br><span class="line">dialog4.setTitle(<span class="string">&quot;请选择&quot;</span>).setSingleChoiceItems(texts2, <span class="number">0</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, texts2[which], Toast.LENGTH_SHORT).show();</span><br><span class="line">        dialog.dismiss();<span class="comment">//对话框消失</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setCancelable(<span class="keyword">false</span>);<span class="comment">//点击对话框外范围，不会自动消失</span></span><br><span class="line">dialog4.create().show();</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>多选框形式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts3=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span>[] checkde=<span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">true</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog3=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，点击事件</span></span><br><span class="line">dialog3.setTitle(<span class="string">&quot;请选择&quot;</span>).setMultiChoiceItems(texts3, checkde, <span class="keyword">new</span> DialogInterface.OnMultiChoiceClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="keyword">this</span>, texts3[which]+<span class="string">&quot;:&quot;</span>+isChecked, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.create().show();</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义(与 toast 自定义类似):</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先写一个布局，然后通过layoutinflater实例为view</span></span><br><span class="line">LayoutInflater li=LayoutInflater.from(TestActivity.<span class="keyword">this</span>);</span><br><span class="line">View view=li.inflate(R.layout.toast,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//取出组件设置</span></span><br><span class="line">TextView textView=view.findViewById(R.id.text);</span><br><span class="line">textView.setText(<span class="string">&quot;自定义Toast&quot;</span>);</span><br><span class="line"></span><br><span class="line">AlertDialog.Builder dialog3=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，点击事件</span></span><br><span class="line">dialog3.setTitle(<span class="string">&quot;自定义&quot;</span>)</span><br><span class="line">.setView(view).create().show();</span><br></pre></td></tr></table></figure>

<h3 id="ProgressBar："><a href="#ProgressBar：" class="headerlink" title="ProgressBar："></a>ProgressBar：</h3><ul>
<li>xml 中：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/bar1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/bar2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.Material.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progress</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>java 中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//onCreate方法中：</span></span><br><span class="line">bar2=findViewById(R.id.bar2);</span><br><span class="line">System.out.println(bar2.getProgress());</span><br><span class="line"><span class="comment">//模拟进度加载</span></span><br><span class="line">handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="comment">// 类中：</span></span><br><span class="line">Handler handler=<span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        <span class="keyword">if</span> (bar2.getProgress()&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.postDelayed(runnable,<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(TestActivity.<span class="keyword">this</span>, <span class="string">&quot;完成&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Runnable runnable=<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取进度和设置进度</span></span><br><span class="line">        bar2.setProgress(bar2.getProgress()+<span class="number">3</span>);</span><br><span class="line">        handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="PopupWindow："><a href="#PopupWindow：" class="headerlink" title="PopupWindow："></a>PopupWindow：</h3><p>自定义一个弹出菜单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化一个布局，作为之后的菜单样式</span></span><br><span class="line">View view= LayoutInflater.from(FriendActivity.<span class="keyword">this</span>).inflate(R.layout.fun_popup,<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//初始化，参1为具体菜单样式的实例化对象，参23为菜单的宽高</span></span><br><span class="line">PopupWindow pop=<span class="keyword">new</span> PopupWindow(view, ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line"><span class="comment">//想PopupWindow点击外侧时消失需要设置一个背景，才能成功</span></span><br><span class="line">pop.setBackgroundDrawable(<span class="keyword">new</span> BitmapDrawable());</span><br><span class="line">pop.setFocusable(<span class="keyword">true</span>);<span class="comment">//获取焦点</span></span><br><span class="line">pop.setOutsideTouchable(<span class="keyword">true</span>);<span class="comment">//点击外侧消失</span></span><br><span class="line"><span class="comment">//设置位置，参1表示显示在哪个组件下，参23表示偏移值</span></span><br><span class="line">pop.showAsDropDown(item,<span class="number">0</span>,-<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<h3 id="AndroidStudio-使用-lombok："><a href="#AndroidStudio-使用-lombok：" class="headerlink" title="AndroidStudio 使用 lombok："></a>AndroidStudio 使用 lombok：</h3><p>在build.gradle中添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    annotationProcessor &#x27;org.projectlombok:lombok:1.18.12&#x27;</span><br><span class="line">    compileOnly &quot;org.projectlombok:lombok:1.18.12&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>Toast</tag>
        <tag>AlertDialog</tag>
        <tag>ProgressBar</tag>
        <tag>PopupWindow</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>java jdbc 操作数据库</title>
    <url>/2020/05/30/blog/java/JDBC/</url>
    <content><![CDATA[<h3 id="深入-JDBC-了解类的反射机制"><a href="#深入-JDBC-了解类的反射机制" class="headerlink" title="深入 JDBC 了解类的反射机制"></a><center>深入 JDBC 了解类的反射机制</center></h3><h3 id="JDBC-基本使用："><a href="#JDBC-基本使用：" class="headerlink" title="JDBC 基本使用："></a>JDBC 基本使用：</h3><blockquote>
<p>在此我们会使用官方的思维来注册驱动，在后面我们可以利用， <strong><em>类的反射</em></strong> 来实现更简单的驱动注册。</p>
</blockquote>
<p>JDBC 一次简单的调用大致分为 5 步：</p>
<ol>
<li>加载驱动：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Driver driver=<span class="keyword">new</span> com.mysql.cj.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(driver);</span><br></pre></td></tr></table></figure>

<p><code>Driver</code>： 驱动类，由 java 提供的接口。而它后面的 Driver 对象是由 SQL 厂商提供的实现类。由于它们的类名相同所有我们不能，再导入厂商的类包，只能用完整包名。<br><code>DriverManager</code>：驱动管理类，来加载驱动。</p>
<p>2.获取连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/stu?serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">String pass=<span class="string">&quot;991314&quot;</span>;</span><br><span class="line">connection=DriverManager.getConnection(url,user,pass);</span><br></pre></td></tr></table></figure>

<p>获取连接对象时需要 3 个参数，其中 url 在新版中后面需要时设置地区时间参数。否则会报数据库时区异常,建议设置为 <code>jdbc:mysql://127.0.0.1:3306/数据库名?characterEncoding=utf8&amp;serverTimezone=GMT%2B8</code> ，jdbc 5.1.47 以下不存在此问题。</p>
<ol start="3">
<li>获取数据库操作对象：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement=connection.createStatement();</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行操作：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">String sql=<span class="string">&quot;insert into student values (&#x27;longlong&#x27;,30)&quot;</span>;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="comment">//String sql=&quot;delete from student where name=&#x27;longlong&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line"><span class="comment">//String sql=&quot;update student set name=&#x27;hff&#x27; where name=&#x27;何芳芳&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//执行语句，返回被操作数据的条数</span></span><br><span class="line"><span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">System.out.println(count+<span class="string">&quot;条数据被影响&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>executeUpdate</code> 方法一般用于对表数据增删改操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">ResultSet resultSet=statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    <span class="comment">//列索引方式获取</span></span><br><span class="line">    String name=resultSet.getString(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//列名称方式获取</span></span><br><span class="line">    <span class="keyword">int</span> age=resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;age：&quot;</span>+age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>executeQuery</code> 方法一般用于查询数据库。它会将查询结果封装为一个 <code>ResultSet</code> 对象,通过该对象的 <code>next</code> (最开始指向空，运行一次指向下一条结果并返回true，最后结束返回false)和 <code>get类型(查询结果的列索引||列名)</code> 方法获取值(注意列索引从1开始)。</p>
<ol start="5">
<li>关闭资源：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>

<p>注意关闭的先后顺序(有查询语句时还要先关闭查询结果集)，先关闭操作对象，再关闭连接。<strong><em>后获取的先关闭</em></strong> ,这还不是最好的关闭方式应放在 <code>finally</code> 中进行关闭。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Driver driver=<span class="keyword">null</span>;<span class="comment">//驱动</span></span><br><span class="line">Connection connection=<span class="keyword">null</span>;<span class="comment">//连接</span></span><br><span class="line">Statement statement=<span class="keyword">null</span>;<span class="comment">//操作</span></span><br><span class="line">ResultSet resultSet=<span class="keyword">null</span>;<span class="comment">//查询结果集</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    driver = <span class="keyword">new</span> com.mysql.cj.jdbc.Driver();</span><br><span class="line">    DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/stu?characterEncoding=utf8&amp;serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">    String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String pass=<span class="string">&quot;991314&quot;</span>;</span><br><span class="line">    connection=DriverManager.getConnection(url,user,pass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取操作对象</span></span><br><span class="line">    statement=connection.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行操作</span></span><br><span class="line">    <span class="comment">//增删改语句</span></span><br><span class="line">    <span class="comment">//String sql=&quot;insert into student values (&#x27;longlong&#x27;,30)&quot;;</span></span><br><span class="line">    <span class="comment">//String sql=&quot;delete from student where name=&#x27;longlong&#x27;&quot;;</span></span><br><span class="line">    <span class="comment">//String sql=&quot;update student set name=&#x27;hff&#x27; where name=&#x27;何芳芳&#x27;&quot;;</span></span><br><span class="line">    <span class="comment">//返回被操作数据的条数</span></span><br><span class="line">    <span class="comment">//int count=statement.executeUpdate(sql);</span></span><br><span class="line">    <span class="comment">//System.out.println(count+&quot;条数据被影响&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询语句</span></span><br><span class="line">    String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">    resultSet=statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String name=resultSet.getString(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> age=resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;age：&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;<span class="comment">//关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用反射注册驱动："><a href="#利用反射注册驱动：" class="headerlink" title="利用反射注册驱动："></a>利用反射注册驱动：</h3><p>首先我们看一下 <code>com.mysql.cj.jdbc.Driver</code> 类中一块源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出它是一个静态语句块，并且此类一加载就完成了驱动的注册。由此我们可以利用类的反射机制完成注册驱动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//反射机制，加载驱动类</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 基础</title>
    <url>/2020/05/25/blog/interest/axios/</url>
    <content><![CDATA[<h1 id="Axios-简单入门"><a href="#Axios-简单入门" class="headerlink" title="Axios 简单入门"></a><center>Axios 简单入门<center/></h1><blockquote>
<h3 id="ajax-与-axios"><a href="#ajax-与-axios" class="headerlink" title="ajax 与 axios"></a>ajax 与 axios</h3></blockquote>
<p>下面是一段 javascript 原生 ajax 发送一个简单的请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ajax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    ajax.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;1.txt&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    ajax.send();</span><br><span class="line">    ajax.onreadystatechange=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> con=ajax.responseText;</span><br><span class="line">        alert(con);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>axios 的简单使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以看出 axios 对 ajax 进行了封装，比原生 ajax 使用更加简洁方便。注意 axios 需要在服务端使用，不合适本地请求。<br>axios 中需要传入一个对象，此对象有许多属性其中 <code>url</code> 是请求对象, <code>method</code> 为请求方式(get,post)不写时默认 get。这样就发送了请求，再调用 <code>then</code> 方法接受响应，它需要传入一个函数，函数需要一个参数。此参数就是接受响应消息的对象，建议取名为 <code>res</code> 。</p>
<p>除使用 url 添加传参 <code>url:&#39;1.txt?id=1&amp;name=haha&#39;</code> 外，axios 还能使用 <code>params</code> 属性(原理就是将参数拼接在 url 后)，将需要的参数插入它管理的对象中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    method:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        id:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        name:<span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>post 传参时除 <code>params</code> 外，还可以通过 <code>data</code> 属性它会将参数转为 json 对象传给服务器，需要服务器解析。无特殊要求建议使用 <code>params</code> 。</p>
<blockquote>
<h3 id="使用方法方式传参"><a href="#使用方法方式传参" class="headerlink" title="使用方法方式传参"></a>使用方法方式传参</h3></blockquote>
<ul>
<li><strong><em>get:</em></strong><br><code>.get</code> 表示 get 方式发送请求，参 1 为请求即 url，不使用 url 传参时可使用参 2 需要传入一个对象作为参数，对象中使用 <code>parmas</code> 属性方式封装请求的参数。 <code>.catch</code> 表示请求错误时方法，需要传入一个方法它接收一个参数就是错误信息建议命名为 <code>err</code> 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;1.txt&quot;</span>,&#123;</span><br><span class="line">        parmas:&#123;</span><br><span class="line">            name : <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">        &#125;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><em>post:</em></strong><br><code>.post</code> 以 post 方式发送请求，除可采用 get 同等方式传参以外还可使用字符串 <code>key=value</code> 方式传参。此也可外参 2 传入对象 <code>&#123;name:&#39;haha&#39;&#125;</code> 方式是以 <code>data</code> 属性传参的需要服务器解析。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;id=1&amp;name=haha&quot;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>all 并发请求(多请求)：</li>
</ul>
<p><code>.all</code> 中传入一个数组，数组的元素都是 <code>axios</code> 请求。<br>再通过 <code>then</code> 中方法的参数以数组的方式返回响应。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">    axios.get(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">    axios.get(<span class="string">&quot;servlet&quot;</span>)</span><br><span class="line">]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res[i].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>then</code> 通过 <code>axios.spread</code> 传入方法，以参数的方式返回响应。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">    axios.get(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">    axios.get(<span class="string">&quot;servlet&quot;</span>)</span><br><span class="line">]).then(</span><br><span class="line">    axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1.data);</span><br><span class="line">    <span class="built_in">console</span>.log(res2.data);</span><br><span class="line">    &#125;)</span><br><span class="line">).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>HTML</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器和文件上传下载</title>
    <url>/2020/05/21/blog/java/javaweb/filter/</url>
    <content><![CDATA[<h2 id="Filter-过滤器："><a href="#Filter-过滤器：" class="headerlink" title="Filter 过滤器："></a>Filter 过滤器：</h2><blockquote>
<p>对在客户端和服务器之间的中间层 <strong>接口</strong>，可对客户请求消息和服务器响应消息做拦截处理。并且 <strong><em>一个 servlet 文件可以添加多个过滤器，一个过滤器也可过滤多个 servlet 文件</em></strong> 都在 xml 文件中配置。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//关键方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest var1, ServletResponse var2, FilterChain var3)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中可以看出它与 servlet 类似，都有 init 初始化和 destroy 销毁的方法。但这两方法与 servlet 不同的是，它们前面加入了 <strong><em>default</em></strong> 关键字(java8 新特性)。可以看到它们后面有方法体，所以我们可以选择不重写此两方法，只重写过滤的关键方法 <strong><em>doFilter</em></strong> 。且此方法与 servlet 中 <strong><em>service</em></strong> 方法类似，可对请求和响应做操作。</p>
<ul>
<li>实例情景模拟：在浏览器中用<strong>post</strong>方式并以 name 为 key 传递一个<strong>中文</strong>的值访问 <code>/servlet</code> 映射如下。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web/servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sub&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>servlet 类中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//可就地设置编码</span></span><br><span class="line">        <span class="comment">//request.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line">        <span class="comment">//response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        <span class="comment">//未设置编码时下方请求和响应都出现乱码</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤器中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">/**在servlet中我们需要给请求和响应设置编码，</span></span><br><span class="line"><span class="comment">         * 当有多个servlet类时我们就可以用过滤器方式，</span></span><br><span class="line"><span class="comment">         * 减少复用，只用在xml中给这些类配置过滤器。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//过滤器会默认中断请求，需要请求继续传递下去需要使用 FilterChain</span></span><br><span class="line">        <span class="comment">//doFilter参数中自带filterChain，doFilter需要传入请求和响应对象</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml 中将 servlet 与过滤器关联：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="comment">&lt;!--映射，与servlet的映射类似--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>io.ruoxijun.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指明添加此过滤器映射的URL，过滤jsp写站点路径全名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--还可以继续为其它servlet添加此过滤器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/此url标签不限个数<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--也可为一个url配置多个过滤器映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filters<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Filter-生命周期："><a href="#Filter-生命周期：" class="headerlink" title="Filter 生命周期："></a>Filter 生命周期：</h4><blockquote>
<p>与 servlet 类似唯一不同是当 <strong>服务器启动</strong> 便利用反射加载类调用无参构造函数，还有一个前提是必须在 xml 中配置了 Filter。之后便于 servlet 类似： <code>init初始化 → doFilter(执行多次，到服务器关闭) → destory销毁</code><br>当一个 servlet 文件对应多个过滤器时，在 xml 中排在前的过滤器先执行。且注意过滤器是否有继续传递请求。</p>
</blockquote>
<h4 id="Filter-注解："><a href="#Filter-注解：" class="headerlink" title="Filter 注解："></a>Filter 注解：</h4><p>与 servlet 一样，Filter 也能使用注解：<br>在 Filter 类上方: <strong><em><code>@WebFilter(&quot;/servlet&quot;)</code></em></strong><br>它还能过滤 jsp： <strong><em><code>@WebFilter(&quot;/路径全名.jsp&quot;)</code></em></strong></p>
<h4 id="Filter-使用场景："><a href="#Filter-使用场景：" class="headerlink" title="Filter 使用场景："></a>Filter 使用场景：</h4><ol>
<li>同一处理中文乱码</li>
<li>屏蔽敏感词汇</li>
<li>控制资源访问权限</li>
</ol>
<h2 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h2><p>知识补充： <code>req.getServletContext().getRealPath(&quot;/file/1.txt&quot;);</code> 可拿到当前文件的路径，且传入参数会附加在该路径之后。返回字符串</p>
<p>上传时表单设置：</p>
<ol>
<li>input 的 <code>type</code> 设置为 <code>file</code></li>
<li>form 属性 <code>method</code> 需要设置为 <code>post</code> (get 不会传输文件，只会提交文件的 name)</li>
<li>form 属性 <code>enctype</code> 设置为 <code>multipart/form-data</code> (文件传输必须设置)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>servlet 中直接利用 <code>resp</code> 获取文件：<br>通过 <code>req.getInputStream()</code> 方法，接收到文件流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    BufferedReader buReader=<span class="keyword">new</span> BufferedReader(</span><br><span class="line">            <span class="keyword">new</span> InputStreamReader(req.getInputStream()));</span><br><span class="line">    String values=<span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter buWriter=<span class="keyword">new</span> BufferedWriter(</span><br><span class="line">            <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:/test/str.txt&quot;</span>)));</span><br><span class="line">    <span class="keyword">while</span> ((values=buReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(values);</span><br><span class="line">        buWriter.write(values);</span><br><span class="line">        buWriter.newLine();</span><br><span class="line">        buWriter.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><em>注意：</em></strong> 此流输出的文件并不是指包含文件本身，它流的<em>开头</em>和<em>末尾</em>都插入了，一些浏览器<em>信息</em>。不经过处理直接保存可能导致文件无法正常使用。</p>
<ul>
<li>使用 <code>fileupload</code> 获取上传文件：<br>使用 <code>fileupload</code> 需要导入 <code>commons-fileupload</code> 和 <code>commons-io</code> 的 jar 包。它将所有的请求都解析成了 <code>FileItem</code> 对象,以面像对象的方式完成文件的上传。如我们不用再考虑怎么处理浏览器头尾自带的信息，它的将文件和信息提取分离了出来。我们只需调用它提供的方法就能获取到我们需要的数据信息。<br><code>ServletFileUpload</code> 文件管理对象的 <code>parseRequest(HttpServletRequest)</code> 请求解析方法，会将 form 的每一个 input 都解析为一个 fileitem 对象,并组成 <code>List&lt;FileItem&gt;</code> 集合返回。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//文件管理对象</span></span><br><span class="line">    DiskFileItemFactory dfif=<span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    <span class="comment">//文件上传对象，需要传入一个文件管理对象</span></span><br><span class="line">    ServletFileUpload sfu=<span class="keyword">new</span> ServletFileUpload(dfif);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将请求解析为fileitem的集合</span></span><br><span class="line">        List&lt;FileItem&gt; fileItems=sfu.parseRequest(req);</span><br><span class="line">        <span class="keyword">for</span>(FileItem fileItem: fileItems)&#123;</span><br><span class="line">            <span class="comment">//判断是否是表单字段，否则就是文件</span></span><br><span class="line">            <span class="keyword">if</span>(fileItem.isFormField())&#123;</span><br><span class="line">                <span class="comment">//获取该input的name属性名</span></span><br><span class="line">                String name=fileItem.getFieldName();</span><br><span class="line">                <span class="comment">//获取该input的值</span></span><br><span class="line">                String value=fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//获取该input上传的文件名，非上传文件时该值为null</span></span><br><span class="line">                String fileName=fileItem.getName();</span><br><span class="line">                <span class="keyword">long</span> size=fileItem.getSize();<span class="comment">//文件大小</span></span><br><span class="line">                <span class="comment">//此流只存在文件数据，头尾不在有多余累赘</span></span><br><span class="line">                InputStream input=fileItem.getInputStream();</span><br><span class="line">                FileOutputStream output=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;e:/test/&quot;</span>+fileName);</span><br><span class="line">                <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((b=input.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    output.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                output.close();</span><br><span class="line">                input.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>servlet 中：</p>
<ol>
<li><code>resp.setContentType</code> 和 <code>resp.setHeader</code> 为文件下载必须设置方法。它们会掉用浏览器自带的下载程序。</li>
<li><code>resp.getOutputStream()</code> 获取到指向浏览器的输出流，输出文件。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//响应方式</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">    <span class="comment">//下载之后的文件名</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=ha.txt&quot;</span>);</span><br><span class="line">    OutputStream output = resp.getOutputStream();</span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\test\\1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((b=input.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        output.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javaweb</category>
      </categories>
      <tags>
        <tag>Javaweb</tag>
        <tag>Filter</tag>
        <tag>文件上传与下载</tag>
      </tags>
  </entry>
  <entry>
    <title>jsp 基础使用</title>
    <url>/2020/05/19/blog/java/javaweb/jsp/</url>
    <content><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a><center>JSP</center></h1><blockquote>
<ul>
<li><p>负责与用户的交互，将最终界面呈现给用户。是 HTML + js + Css + java 的混合文件。</p>
</li>
<li><p>JSP 文件最终转换为一个 java 文件，之后编译为 class 文件。java 中将页面整个 <strong><em><code>write</code></em></strong> 输出。本质上是一个 <strong><em><code>servlet</code></em></strong> 。</p>
</li>
<li><p>请求常见状态码：404 资源找不到，400 请求类型不匹配，500 java 程序异常</p>
</li>
</ul>
</blockquote>
<h3 id="JSP-编码问题："><a href="#JSP-编码问题：" class="headerlink" title="JSP 编码问题："></a>JSP 编码问题：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;</span><br><span class="line">&lt;%--这里的utf<span class="number">-8</span>是指服务器发送给客服端时的内容编码 --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%--这里的utf<span class="number">-8</span>是指 .jsp文件本身的内容编码 --%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSP-的-HTML-中嵌入-Java-程序："><a href="#JSP-的-HTML-中嵌入-Java-程序：" class="headerlink" title="JSP 的 HTML 中嵌入 Java 程序："></a>JSP 的 HTML 中嵌入 Java 程序：</h3><ol>
<li>JSP 脚本<br>注意：只能写 java 逻辑代码，不能定义方法<br><code>&lt;% java代码(不常用也不不建议) %&gt;</code></li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="comment">//这些代码本质上相当于就写在了servlet的service中</span></span><br><span class="line">    String str = <span class="string">&quot;java代码嵌入html&quot;</span>;</span><br><span class="line">    <span class="comment">//此页面被访问时java控制台输出</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%  <span class="comment">//还可使用内置对象out写入浏览器</span></span><br><span class="line">    out.write(str);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明（嵌入 java 方法）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!<span class="comment">//在jsp的HTML中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;嵌入方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只能定义方法不能使用</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%<span class="comment">//使用方法还是通过此不带感叹号的标签</span></span><br><span class="line">    System.out.println(test());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>3.JSP 表达式<br>把 java 对象直接输出在 HTML 中<br><code>&lt;%= java变量 %&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String str = <span class="string">&quot;java代码嵌入html&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--通过后面加等号直接输出java变量,</span><br><span class="line">    此处是JSP的HTML中的注释--%&gt;</span><br><span class="line">&lt;%=str%&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>java 代码与 HTML 的混合使用</li>
</ol>
<p>HTML 标签写在 java 语句块中，标签也会被代码控制。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>num<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;% for (int i = 0; i &lt; 5; i++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSP-内置对象："><a href="#JSP-内置对象：" class="headerlink" title="JSP 内置对象："></a>JSP 内置对象：</h3><blockquote>
<ul>
<li>request：表示一次请求，属于 HttpServletRequest 类</li>
<li>response：表示一次响应，HttpServletResponse</li>
<li>pageContext：页面上下文可获取页面信息，PageContext</li>
<li>session：表示一次回话，保存用户信息，HttpSession</li>
<li>application：web 应用全局对象，保存所有用户共享信息，ServletContext</li>
<li>config：当前 jsp 对应 servlet 的 ServletConfig 对象，获取当前 Servlet 的信息</li>
<li>out：向浏览器输出数据，JspWriter</li>
<li>page：当前 Jsp 对应的 Servlet 对象，pageContext</li>
<li>exception：表示 jsp 页面发生的异常，Exception</li>
</ul>
</blockquote>
<p>常用 request，response，session，application，pagecontext<br>下面这些对象使用的方法即是它们所属类的方法，在 servlet 中取得同类型对象可使用。</p>
<h4 id="request-常用方法"><a href="#request-常用方法" class="headerlink" title="request 常用方法"></a>request 常用方法</h4><ol>
<li><code>String getParameter(String key)</code><br>如在浏览器中访问并传值：<code>http://localhost:8080/?value=haha</code><br>此为 get 传值，url 后跟 <code>?</code> 传值使用 <code>key=value</code> 格式，多个值用 <code>&amp;</code> 隔开。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//内置对象使用与在servlet中使用一样</span></span><br><span class="line">    String value=request.getParameter(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--浏览器中输出：haha--%&gt;</span><br><span class="line">&lt;%=value%&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>void setAttribute(String key,Object value);</code> 通过键值对形式保存数据<br><code>Object getAttribute(String key);</code>通过 key 取出 value</li>
</ol>
<ul>
<li>两方法一般用于将客户端拿到的数据 set 存储起来，完成服务端内数据传输通过 get 获取。</li>
<li>页面跳转：<code>RequestDispatcher getRequestDispatcher(String path)</code>方法和该对象的<code>forward(request,response)</code>方法使用，此方法可用于登录</li>
</ul>
<ul>
<li>它可让浏览器访问到<strong>WEB-INF</strong>(客户端无法直接访问，只有服务端可以访问。直接访问会引起 404 错误，也可用<strong>映射</strong>访问)文件夹下的文件,此方法可用于用户登录</li>
</ul>
<p>在被访问的 jsp 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//将数据存储起来，并将请求转发给其它jsp</span></span><br><span class="line">    String value=request.getParameter(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;value&quot;</span>,value);</span><br><span class="line">    <span class="comment">//需要表明传输地址，还需要将此页面的请求和响应对象传入</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/values.jsp&quot;</span>)</span><br><span class="line">            .forward(request,response);</span><br><span class="line">    <span class="comment">//它会让浏览器自动跳转至接收的页面</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>在接收的 jsp 中(页面会跳转至此 jsp，但浏览器地址栏不会改变)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="comment">//获取数据并转型</span></span><br><span class="line">    String value=(String)request.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=value%&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>String[] values=request.getParameterValues(String key)</code></li>
</ol>
<p>当浏览器传值时有多个同名的 key，那么 <code>getParameter</code> 只取第一个，而此方法能将所有同名 key 的值组成一个数组返回。适用于接收复选框的值。</p>
<h4 id="response-常用方法"><a href="#response-常用方法" class="headerlink" title="response 常用方法"></a>response 常用方法</h4><p><code>void sendRedirect(String path)</code> 重定向：</p>
<ul>
<li>相等于浏览器直接发生请求访问，因此方法无法访问到<strong>WEB-INF</strong>下的文件</li>
<li>此方法可用于登录后的退出<br>如：<br><code>&lt;%response.sendRedirect(&quot;test.jsp&quot;);%&gt;</code></li>
</ul>
<h4 id="Session-常用方法"><a href="#Session-常用方法" class="headerlink" title="Session 常用方法"></a>Session 常用方法</h4><ul>
<li>属于同一次回话(一个浏览器或服务器的关闭标识一次会话结束)的请求都有一个相同的标识符，sessionID：**<code>String id=session.getId()</code>**。</li>
</ul>
<p><code>void setMaxInactiveInterval(int)</code>：设置 session 失效时间，单位为秒。<br><code>int getMaxInactiveInterval()</code>：获取当前 id 失效时间<br><code>void invalidate()</code>：设置 session 立即失效<br><code>void setAttribute(String key,Object value)</code>：通过键值对的形式来存储数据，key 相同的数据将被覆盖<br><code>Object getAttribute(String key)</code>：通过键获取对应的数据<br><code>void removeAttribute(String key)</code>：通过键删除对应的数据</p>
<p>在<strong>servlet</strong>中获取 session：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//HttpServletRequest中提供了获取session的方法</span></span><br><span class="line">        HttpSession session=req.getSession();</span><br><span class="line">        <span class="comment">//这样我们就获取到了session且可以正常使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HttpServletRequest是ServletRequest的子类，在参数非HttpServletRequest的方法中我们可以通过转型得到HttpSession（session）：<br><code>((HttpServletRequest)servletRequest).getSession();</code></p>
<h3 id="浏览器存储数据-Cookie："><a href="#浏览器存储数据-Cookie：" class="headerlink" title="浏览器存储数据 Cookie："></a>浏览器存储数据 Cookie：</h3><blockquote>
<ul>
<li>cookie 在浏览器是以键值对方式存放数据，同名 key 的值将被覆盖。每一对键值对用等号隔开 <strong>‘ = ‘</strong> ，每一组数据用分号 <strong>‘ ; ‘</strong> 隔开。</li>
<li>浏览器发送请求时会把现有的 Cookie 数据<strong>传递</strong>给服务器，服务器可以对 Cookie 做操作，响应时又自动<strong>返回</strong>Cookie，浏览器将本地 Cookie<strong>更新</strong>为服务器返回的 Cookie。</li>
</ul>
</blockquote>
<p>java 中 Cookie 是一个类，每一个 cookie 对象保存一对键值对。在 jsp 和 servlet 中都可使用 Cookie，HttpServletRequest 和 HttpServletResponse 分别提供了获取浏览器的 Cookie 和给 Cookie 添加新值的方法。<br><em>以 jsp 中为例：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//获取浏览器发来的cookie，返回cookie数组</span></span><br><span class="line">    Cookie[] cookies=request.getCookies();</span><br><span class="line">    <span class="comment">//获取每一个cookie对象的key和value</span></span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">    System.out.println(cookie.getName()</span><br><span class="line">            +<span class="string">&quot;=&quot;</span>+cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个新的cookie(一组键值对数据)</span></span><br><span class="line">    Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="comment">//添加到总Cookie中</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>设置 cookie 有效时间方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效时间，单位为秒</span></span><br><span class="line">cookie.setMaxAge(<span class="keyword">int</span>);<span class="comment">//默认-1浏览器关闭销毁，设为0表示删除</span></span><br><span class="line"><span class="comment">//获取cookie的有效时间</span></span><br><span class="line"><span class="keyword">int</span> cookie.getMaxAge();</span><br></pre></td></tr></table></figure>

<p>session 与 cookie 区别：<br>session|cookie<br>-|-<br>数据时 object|数据时 string<br>保存在服务器，会话结束时销毁|长期保存在浏览器<br>保存重要信息|不重要信息</p>
<h3 id="内置对象-域对象-作用域："><a href="#内置对象-域对象-作用域：" class="headerlink" title="内置对象(域对象)作用域："></a>内置对象(<em>域对象</em>)作用域：</h3><p>我们主要探讨 4 个内置对象的作用域。他们都有一些这两个存储数据的方法，根据它们作用域不同，数据存储的作用域也不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//储存数据</span></span><br><span class="line"><span class="keyword">void</span> 内置对象.setAttribute(String key,Object value);</span><br><span class="line"><span class="comment">//取出数据(取不存在的key返回null，不报错)</span></span><br><span class="line">Object 内置对象.getAttribute(String key);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内置对象</th>
<th>作用域</th>
</tr>
</thead>
<tbody><tr>
<td>pageContext</td>
<td>当前页面有效</td>
</tr>
<tr>
<td>request</td>
<td>一次请求内有效</td>
</tr>
<tr>
<td>session</td>
<td>一次会话内有效</td>
</tr>
<tr>
<td>application</td>
<td>整 web 应用(服务器)</td>
</tr>
</tbody></table>
<h3 id="EL-表达式："><a href="#EL-表达式：" class="headerlink" title="EL 表达式："></a>EL 表达式：</h3><p><strong><em>域对象</em></strong> 存储数据的便捷取值方法： <strong><code>$&#123;域对象存储数据的key&#125;</code></strong><br>只能在 <strong><em>jsp</em></strong> 中使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%  <span class="comment">//存储字符串</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    String value =(String) request.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=value%&gt;</span><br><span class="line">&lt;%--取值原理与上相同--%&gt;</span><br><span class="line">$&#123;key&#125;&lt;%--取得pageContext(作用域更小)--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--key相同，但存储对象不同时，直接取key，</span><br><span class="line">会从作用域底的开始查找，也可指定对象取值，</span><br><span class="line">可提高效率，指定四个域对象的取值方法如下：--%&gt;</span><br><span class="line">pageContext中：$&#123;pageScope.key&#125;</span><br><span class="line">request中：$&#123;requestScope.key&#125;</span><br><span class="line">session中：$&#123;sessionScope.key&#125;</span><br><span class="line">application中：$&#123;applicationScope.key&#125;</span><br></pre></td></tr></table></figure>

<p>存取<strong>对象</strong>时：</p>
<ul>
<li>对象类中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>jsp 中</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%  <span class="comment">//存储对象</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> User(<span class="string">&quot;name&quot;</span>,<span class="number">99</span>));</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出值为对象时--%&gt;</span><br><span class="line">$&#123;user&#125;&lt;%--调用该对象toString方法--%&gt;</span><br><span class="line">$&#123;user.name&#125;&lt;%--取出成成功原理：反射技术调用该getName方法--%&gt;</span><br><span class="line">$&#123;user[<span class="string">&quot;name&quot;</span>]&#125;&lt;%--写法二，效果同上--%&gt;</span><br><span class="line">&lt;%--取对象某一元素时此元素必须有get方法，否则报错--%&gt;</span><br><span class="line">$&#123;user.age=<span class="number">10</span>&#125;&lt;%--也能调用set方法(前提：该属性有set方法)--%&gt;</span><br></pre></td></tr></table></figure>

<p>关系运算：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%--EL中还能进行，关系运算(&amp;&amp;,||,&gt;&lt;==!=)--%&gt;</span><br><span class="line">$&#123;key1 &amp;&amp; key2&#125;</span><br><span class="line">$&#123;key1 <span class="keyword">and</span> key2&#125;&lt;%--效果同上(还有<span class="keyword">or</span>,not)--%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL:"></a>JSTL:</h3><blockquote>
<ul>
<li>需要借助 jar 外包 <code>jstl.jar</code> 和<code>standard.jar</code> 两个包。在 WEB-INF 文件夹中新建 lib 文件夹，将 jar 导入其中。</li>
</ul>
<ul>
<li>下载地址：<a href="https://static.runoob.com/download/jakarta-taglibs-standard-1.1.2.tar.gz">jakarta-taglibs-standard-1.1.2.zip</a>,解压将 lib 下的两个 jar 文件提取出来。</li>
</ul>
<ul>
<li>在需要使用的 jsp 中 HTML 标签上方导入核心库 <code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> ，其中 <strong>c</strong> 是之后在 jsp 中使用该库就需要使用 <strong>c</strong> 来调用。可以自定义但建议用 c 来表示</li>
</ul>
</blockquote>
<p>案例：后端给 jsp 传递一个集合，jsp 需要在页面中遍历出来里面的元素，并显示在页面上。</p>
<ul>
<li>java 文件中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>jsp 中：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%--导入jstl库--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--使用 c 调用<span class="keyword">forEach</span>标签遍历，items表示需要变量的集合。</span><br><span class="line"><span class="keyword">var</span>是集合中每一次元素取出来存放的载体，</span><br><span class="line">使用时还是需要用<span class="string">&#x27;$&#123;&#125;&#x27;</span>包裹<span class="keyword">var</span>中的变量。--%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">forEach</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;str&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;$&#123;str&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">forEach</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--其它属性：begin属性指定开始位置，end结束位置，</span><br><span class="line">step每次走几步，varStatus=<span class="string">&quot;sta&quot;</span></span><br><span class="line">$&#123;sta.index&#125; <span class="number">0</span>开始, $&#123;sta.index&#125; <span class="number">1</span> 开始--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>上面我们使用了 foreach 标签，它还用其它标签如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;%--set就是setAttribute，scope指定存储在哪一个对象中，默认page--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;value&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;%--上方法不能存储对象，但可以修改对象，不常用--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--out与$&#123;&#125;类似，但某些时候out默认值设置更智能--%&gt;</span><br><span class="line">&lt;%--value需要一个域对象的值，设置<span class="keyword">default</span>当域对象值不存在时使用该值--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;key&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;未定义&quot;</span>&gt;&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--删除域对象中的值，<span class="keyword">var</span>中直接写值的key。scope表示指定某个对象，默认page--%&gt;</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;key&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:remove&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;n1 &gt; n2&#125;&quot;</span>&gt;<span class="literal">true</span>显示，<span class="literal">false</span>不显示&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure>

<p>以上都是 <strong><em>核心标签库标签</em></strong> 。</p>
]]></content>
      <categories>
        <category>Javaweb</category>
      </categories>
      <tags>
        <tag>Javaweb</tag>
        <tag>jsp</tag>
        <tag>jstl</tag>
        <tag>Cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet</title>
    <url>/2020/05/18/blog/java/javaweb/servlet/</url>
    <content><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a><center>Servlet</center></h1><h3 id="web基本概念"><a href="#web基本概念" class="headerlink" title="web基本概念:"></a>web基本概念:</h3><ul>
<li>http：超文本传输协议，是一个简单的请求响应协议，它通常运行在TCP之上。（https：安全的）</li>
<li>请求方式：get，post，delete，put …</li>
<li>响应状态码：200请求响应成功，3xx请求重定向，4xx找不到资源，5xx服务器错误</li>
</ul>
<h3 id="servlet-接口："><a href="#servlet-接口：" class="headerlink" title="servlet 接口："></a>servlet 接口：</h3><blockquote>
<p>servlet 是负责服务器和客户端通信的接口需要我们自己写一个类实现它的方法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="comment">//获取servlet信息</span></span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//处理客户端请求并响应(ServletRequest请求对象，ServletResponse响应对象)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="comment">//返回字符串信息</span></span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//销毁(释放资源),关闭服务器时</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在此可插入本@WebServlet的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**因为浏览器访问servlet是通过反射的方式，</span></span><br><span class="line"><span class="comment">     * 且一般反射为空参构造函数，被浏览器访问此构造函数被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化了&quot;</span>);</span><br><span class="line">        <span class="comment">//获取此servlet类的类名</span></span><br><span class="line">        servletConfig.getServletName();</span><br><span class="line">        <span class="comment">//获取映射此文件时设置的默认值(只能在xml配置，代表不能使用注解)</span></span><br><span class="line">        String init = servletConfig.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(init);</span><br><span class="line">        <span class="comment">//拿到所有设置的值,返回Enumeration&lt;String&gt;集合</span></span><br><span class="line">        servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">//拿到servlet上下文(此web全局信息)，返回ServletContext</span></span><br><span class="line">        ServletContext context=servletConfig.getServletContext();</span><br><span class="line">        context.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取servlet信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端提交的数据可能会乱码，设置编码(一定要在读取数据前设置)</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取客户端信息，如客户端请求为：localhost:8080/servlet?id=2222</span></span><br><span class="line">        String value = servletRequest.getParameter(<span class="string">&quot;value&quot;</span>);<span class="comment">//返回id的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到了客户端的请求&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接给客户端返回消息会乱码还需要如下设置编码</span></span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//getwriter返回一个PrintWriter流，给客户端写入信息</span></span><br><span class="line">        servletResponse.getWriter().write(<span class="string">&quot;&lt;h1&gt;返回信息成功&quot;</span>+(num++)+<span class="string">&quot;&lt;h1/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回字符串信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//销毁(释放资源),关闭服务器时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器关闭了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问（请求）servlet："><a href="#访问（请求）servlet：" class="headerlink" title="访问（请求）servlet："></a>访问（请求）servlet：</h3><p>在客户端访问 servlet 文件(类.class),会通过 <strong>反射(原理)</strong> 机制建立客户端(浏览器)和服务端的通信。</p>
<ul>
<li><strong><em>映射</em></strong>（在 <strong>web.xml</strong> 中 web-app 下配置）：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="comment">&lt;!--servlet映射文件配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义servlet文件被映射名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet文件，需要写src下的完整路径名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>io.ruoxijun.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span><span class="comment">&lt;!--为此servlet设置默认值，非必要(可配置多个)--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ServletConfig可获取这里设置的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!--key--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!--value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!--URL映射配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置映射的URL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="comment">&lt;!--定义web全局的初始值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>loc<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此在浏览器下输入配置的网址后加上映射的<strong>URL：</strong> <code>/servlet</code> 即可发送请求至此 servlet，servlet 也在<strong>service 方法中</strong> 接受到了消息可处理并返回数据。<br>客户端可不停的给 servlet 发送消息直到服务器关闭。</p>
<ul>
<li><strong><em>注解</em></strong>（脱离 xml 繁琐配置，一句话搞定访问）</li>
</ul>
<p>每一个 servlet 需要被访问，我们就需要在<em>web.xml</em>中配置一次映射，当 servlet 类过多时就过于麻烦。使用产生了基于<em>注解</em>的映射。</p>
<p><code>@WebServlet(&quot;/servlet&quot;)</code></p>
<p>在对应 servlet 类的上方加上注解，@加上 WebServlet，参数为映射访问此文件时的 URL(必须有 <code>/</code> 否则报错)。与 xml 中配置的效果同。</p>
<h3 id="Servlet-生命周期："><a href="#Servlet-生命周期：" class="headerlink" title="Servlet 生命周期："></a>Servlet 生命周期：</h3><ol>
<li>客户端第一次访问服务端接受到请求时利用反射技术加载类，调用无参构造函数创建servlet</li>
<li>调用 init 方法完成初始化。(调用一次)</li>
<li>调用 service 方法完成业务逻辑操作。(会重复执行直到服务器关闭，或离开此页面)</li>
<li>服务器停止，调用 destory 方法释放资源。(调用一次)</li>
</ol>
<p>当浏览器访问 servlet 时，Tomcat 会查询 Servlet 的实例化对象是否存在，不存在通过反射机制创建。存在直接执行 service 方法</p>
<h3 id="HttpServlet（建议使用）"><a href="#HttpServlet（建议使用）" class="headerlink" title="HttpServlet（建议使用）:"></a>HttpServlet（建议使用）:</h3><blockquote>
<ul>
<li>servlet 中任何请求(get,post,put,delete)都由<strong>service</strong>方法处理，httpservlet 中细分了出来，常用的如 <code>get请求 → 由doGet方法处理</code>，<code>post请求 → 由doPost方法处理</code></li>
<li>httpservlet 中我们可以只重写需要的方法，但必须<strong>重写一种</strong>对于请求和响应的处理方法如：doGet,doPost。并且重写方法中不能出现 super 否则 405。</li>
<li><strong>GenericServlet</strong> 中完成了屏蔽 servlet 四个不常用的方法。他们的关系是 <strong><code>HttpServlet 继承 GenericServlet 实现 Servlet</code></strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span><span class="comment">//此类映射的URL</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//重写的一定要去除方法中的super阻止调用父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端提交的数据可能会乱码，设置编码(一定要在读取数据前设置)</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//处理get请求</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求类型</span></span><br><span class="line">        String get=req.getMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理post请求</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ServletContext："><a href="#ServletContext：" class="headerlink" title="ServletContext："></a>ServletContext：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">// servlet上下文，web应用的全局对象</span></span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">// 存入数据</span></span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="comment">// 取出数据(在其它servlet中同样可以取出，它们属于同一个web)</span></span><br><span class="line">    servletContext.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    servletContext.getRequestDispatcher(<span class="string">&quot;path&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javaweb</category>
      </categories>
      <tags>
        <tag>Javaweb</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 管理项目</title>
    <url>/2020/05/17/blog/java/maven/</url>
    <content><![CDATA[<h2 id="Maven-从管理项目到删库跑路"><a href="#Maven-从管理项目到删库跑路" class="headerlink" title=" Maven 从管理项目到删库跑路 "></a><center> <strong><em>Maven 从管理项目到删库跑路</em></strong> </center></h2><blockquote>
<p>Maven 突出的几个特点：</p>
<ul>
<li>有<strong>强制</strong>规定的<strong>指定文件</strong>存放指定文件，方便管理项目</li>
<li>jar 包的管理，使用 jar 包时我们不用再将整个 jar 包存放在项目中。maven 中有 jar 仓库，将需要的<strong>jar 包依赖</strong>(jar 的坐标)写入 maven 的配置内，它会帮我们找到需要的 jar 包</li>
</ul>
</blockquote>
<h3 id="1-Maven-的安装"><a href="#1-Maven-的安装" class="headerlink" title="1. Maven 的安装"></a>1. Maven 的安装</h3><hr>
<blockquote>
<p>我们也回忆一下 Java jdk 和 Tomcat 的安装。(下载不用多说，见官网： <a href="https://maven.apache.org/">https://maven.apache.org/</a>)<br>几个安装都有的前奏： <code>我的电脑右击 → 属性 → 高级系统设置 → 环境变量</code></p>
</blockquote>
<h4 id="安装后续："><a href="#安装后续：" class="headerlink" title="安装后续："></a>安装后续：</h4><p><strong><code>新建系统变量 → 变量名MAVEN_HOME，变量值Maven解压的路径，确定 → 找到Path，编辑输入：%刚刚定义的变量名%\bin</code></strong></p>
<p>打开 cmd 输入<code>mvn -v</code>查看是否成功。</p>
<blockquote>
<p>jdk 和 Tomcat 的安装与此差别不大，不过 jdk 变量名为：JAVA_HOME，Tomact 变量名为：CATALINA_HOME。</p>
</blockquote>
<h3 id="2-Maven-全局配置文件-settings-xml"><a href="#2-Maven-全局配置文件-settings-xml" class="headerlink" title="2. Maven 全局配置文件(settings.xml)"></a>2. Maven 全局配置文件(settings.xml)</h3><hr>
<h4 id="设置仓库位置："><a href="#设置仓库位置：" class="headerlink" title="设置仓库位置："></a>设置仓库位置：</h4><blockquote>
<p>以下配置都是在 Maven 安装文件夹下的 conf 文件夹下 settings.xml 文件中需要添加或修改的配置</p>
</blockquote>
<p>定义存放 jar 包的本地仓库(路径)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 建议先创建好该路径且路径以 repository 结尾</span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>自定义的仓库路径/repository<span class="tag">&lt;<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="设置阿里云中央仓库-镜像-："><a href="#设置阿里云中央仓库-镜像-：" class="headerlink" title="设置阿里云中央仓库(镜像)："></a>设置阿里云中央仓库(镜像)：</h4><p>原镜像下载极慢可以用无法使用来形容，替换为国内的阿里云镜像。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置全局编译-jdk-版本："><a href="#配置全局编译-jdk-版本：" class="headerlink" title="配置全局编译 jdk 版本："></a>配置全局编译 jdk 版本：</h4><p>在 <code>&lt;profiles&gt;&lt;/profiles&gt;</code> 标签中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明编译环境的 jdk 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Maven-项目结构与文件"><a href="#3-Maven-项目结构与文件" class="headerlink" title="3. Maven 项目结构与文件"></a>3. Maven 项目结构与文件</h3><hr>
<h4 id="项目标准目录结构："><a href="#项目标准目录结构：" class="headerlink" title="项目标准目录结构："></a>项目标准目录结构：</h4><ol>
<li>src/main/java：核心代码部分</li>
<li>src/main/resources：配置文件部分</li>
<li>src/test/java:测试代码部分</li>
<li>src/test/resources：测试配置文件</li>
<li>target：编译后自动生成存储 class 文件的文件夹</li>
<li>src/main/webapp：web(网页)有关文件(此部分是创建 web 项目才需要)</li>
</ol>
<blockquote>
<p>web项目webapp下必须有 <strong>WEB-INF</strong>目录，WEB-INF下必须有 <strong>web.xml</strong> 文件和classes(编译后)，其中classes中存放的是编译好的class<br>Tomcat规定的必须这样建立目录才会Tomcat认为是web项目</p>
</blockquote>
<h4 id="pom-xml-文件："><a href="#pom-xml-文件：" class="headerlink" title="pom.xml 文件："></a>pom.xml 文件：</h4><p><code>Maven 工程配置文件：依赖管理，项目信息、运行环境信息(jdk、Tomcat 信息等)</code></p>
<p>基本样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头文件标签，对xml文件的约束与标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                        https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 pom.xml 符合哪个版本的描述符。maven2和3 只能为 4.0.0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目信息(此项目坐标)： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>逆向域名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 创建项目的组织名称的逆向域名。一般对应 java 的包结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 单独项目的唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>当前项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 项目的特定版本 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目打包后的类型(默认jar，war：打包为web应用，pom：为父工程时) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖组：管理所有依赖总标签，且子项目直接继承此中依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖：添加某个依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 依赖的坐标(与项目信息类似) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可继续添加多个依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理：此中添加的依赖，子项目不能直接继承。</span></span><br><span class="line"><span class="comment">    且子项目添加同依赖时可以省去版本号标签，默认父类版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!-- 依赖组 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>构建设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对项目构建进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一些项目中包含xml配置文件或资源文件可能在</span></span><br><span class="line"><span class="comment">    打包时不能成功，需要在project中添加下配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Maven-常用命令与生命周期"><a href="#4-Maven-常用命令与生命周期" class="headerlink" title="4. Maven 常用命令与生命周期"></a>4. Maven 常用命令与生命周期</h3><hr>
<h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><blockquote>
<p>首先 cmd 进入 Maven 项目路径，在项目目录下使用如下指令</p>
</blockquote>
<ul>
<li><code>mvn compile</code>：对 java 文件进行编译，并在 src 外创建了一个 target 目录，将编译文件存放在了里面。</li>
<li><code>mvn test</code>：测试文件夹下和主 Java 文件夹下的 java 文件都编译</li>
<li><code>mvn package</code>：<strong>打包</strong>，将所有 java 和 test 编译，再打包成指定文件(通过项目下的<strong>pom.xml</strong>文件<strong>packaging 标签</strong>决定打包类型)都放在 target 文件夹下</li>
<li><code>mvn clean</code>：清理编译的文件，target 文件夹将被删除</li>
<li><code>mvn install</code>：安装，编译 + 打包 + 将打包文件移到到本地仓库</li>
</ul>
<h4 id="Maven-生命周期-简化周期-："><a href="#Maven-生命周期-简化周期-：" class="headerlink" title="Maven 生命周期(简化周期)："></a>Maven 生命周期(简化周期)：</h4><blockquote>
<p>默认生命周期：验证(validate) → 编译(compile) → 测试(test) → 打包(package) → 验证(verify) → 安装(install) → 发布(deploy)<br>清理生命周期：清除项目编译信息(clean)</p>
</blockquote>
<h3 id="5-IDEA-配置-Maven："><a href="#5-IDEA-配置-Maven：" class="headerlink" title="5. IDEA 配置 Maven："></a>5. IDEA 配置 Maven：</h3><hr>
<ol>
<li><code>file → settings</code> 方式表示本项目设置，当创建新项目时设置内容将重置。所以我们需要 <strong>配置新建项目</strong> 的设置如下图：</li>
</ol>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/new_pro_set.jpg" alt="新项目设置"></p>
<ol start="2">
<li>配置新建项目的 Maven 设置：</li>
</ol>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/idea_maven_set.jpg" alt="设置 Maven"></p>
<p>将 Maven → Runner 中下图选项勾选，否则容易出现导入的依赖在测试或运行时报依赖中的类不存在的错误，若还是出现此错误建议使用maven命令： <code>mvn idea:idea</code> 之后再运行。（目前已知idea2020.1常出现此错误）</p>
<p><img src="https://gitee.com/ruoxijun/images/raw/master/java/run.jpg" alt="测试或运行设置"></p>
<ol start="3">
<li>此后新建的 Maven 项目都配置好了，但此项目配置并未改变。只需在 <code>file → settings</code> 中按步骤 2 同等配置即可。</li>
<li>同上图中 <strong>Skip Tests</strong> （跳过测试）选项打钩，问题缘由我在整合mybatis和spring时调用插入数据方法， <strong>SQL语句被执行了两遍</strong> 这主要是运行时测试调用了一次主项目再会调用一次。</li>
</ol>
<h3 id="6-Maven-依赖详解"><a href="#6-Maven-依赖详解" class="headerlink" title="6. Maven 依赖详解"></a>6. Maven 依赖详解</h3><hr>
<h4 id="了解-classpath："><a href="#了解-classpath：" class="headerlink" title="了解 classpath："></a>了解 <code>classpath</code>：</h4><ul>
<li>简单的理解就是，项目编译好后形成的 <code>class</code> 文件所在的路径。</li>
<li>Maven 工程会将 <code>src/main/java</code> 和 <code>src/main/resources</code> 文件夹下的文件编译后全部打包在 <code>classpath</code> 中。</li>
</ul>
<h4 id="依赖范围-常用-："><a href="#依赖范围-常用-：" class="headerlink" title="依赖范围(常用)："></a>依赖范围(常用)：</h4><blockquote>
<p>Maven 中添加的依赖编译后也会打包进 <code>classpath</code> 中，而不同的阶段所需依赖不同。<br>此时我们可以给依赖添加范围限制，依赖中通过 <code>scope</code> 标签中添加限制指令方式规定依赖的范围。</p>
</blockquote>
<table>
<thead>
<tr>
<th>限制指令</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>未写 <code>scope</code> 标签时默认。编译，测试，运行都有效</td>
</tr>
<tr>
<td>test</td>
<td>测试时有效</td>
</tr>
<tr>
<td>provided</td>
<td>编译和测试有效</td>
</tr>
<tr>
<td>runtime</td>
<td>测试和运行有效</td>
</tr>
</tbody></table>
<p>如下 <code>junit</code> 依赖只有测试才需要用到，所以使用 <code>test</code> 对齐加以限制：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指明依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="依赖传递："><a href="#依赖传递：" class="headerlink" title="依赖传递："></a>依赖传递：</h4><ul>
<li>依赖传递使我们不需要关注添加的依赖是否依赖了其它依赖。Maven会自动将所关联的依赖以自动传递的方式传递进来。</li>
<li>最短路径优先：A依赖了B和D，B依赖了C和D，当A和B所依赖的D版本不同时，会选择A依赖的D作为最终依赖。</li>
<li>先声明优先：项目中依赖了A和B它们同时依赖了C，当两个C版本不同时，取决于我们先依赖A还是B，谁先声明就最终依赖谁的C。</li>
</ul>
<h3 id="IDEA-中-Maven-常见错误-待改正-："><a href="#IDEA-中-Maven-常见错误-待改正-：" class="headerlink" title="IDEA 中 Maven 常见错误(待改正)："></a>IDEA 中 Maven 常见错误(待改正)：</h3><hr>
<ol>
<li>本地运行错误(Javaweb)：</li>
</ol>
<p>在本地运行时 idea 中需要设置配置 Tomcat7 运行方式，在 <code>pom.xml</code> 中插入如下配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表明以方式Tomcat7启动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--其它可选项设置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span></span></span><br><span class="line"><span class="tag">                &gt;</span><span class="comment">&lt;!--端口--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span></span></span><br><span class="line"><span class="tag">                &gt;</span><span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/url<span class="tag">&lt;/<span class="name">path</span></span></span><br><span class="line"><span class="tag">                &gt;</span><span class="comment">&lt;!--访问应用路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后 maven 中输入 <code>mvn tomcat7:run</code> 运行。</p>
<ol start="2">
<li>Servlet 中@WebServlet(“XXXX”)注解无效(javaweb):</li>
</ol>
<p>打开 web.xml 检查 web-app 标签中的两个属性，①version 是否大于 3.0，②metadata-complete 是否为 false，或直接将 <code>web.xml</code> 中 web-app 头标签替换为如下设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">metadata-complete</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>maven 的程序测试运行必须检查是否有 <code>Junit</code> 包：<br>pom.xml 中：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.13&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>WebView 加载网页组件</title>
    <url>/2020/05/17/blog/android/webview/</url>
    <content><![CDATA[<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><blockquote>
<h4 id="WebView-加载网页的方式"><a href="#WebView-加载网页的方式" class="headerlink" title="WebView 加载网页的方式"></a>WebView 加载网页的方式</h4></blockquote>
<h5 id="加载网络-URL"><a href="#加载网络-URL" class="headerlink" title="加载网络 URL:"></a>加载网络 URL:</h5><p><code>webview.loadUrl(&quot;http//...&quot;);</code></p>
<h5 id="加载-assets-下的-HTML-文件："><a href="#加载-assets-下的-HTML-文件：" class="headerlink" title="加载 assets 下的 HTML 文件："></a>加载 assets 下的 HTML 文件：</h5><p><code>webview.loadUrl(&quot;file://android_asset/test.html&quot;);</code></p>
<h5 id="加载-HTML-代码："><a href="#加载-HTML-代码：" class="headerlink" title="加载 HTML 代码："></a>加载 HTML 代码：</h5><p><code>webview.loadData();</code> 或 <code>webview.loadDataWithBaseURL();//推荐使用</code></p>
<blockquote>
<h4 id="网页的前进后退"><a href="#网页的前进后退" class="headerlink" title="网页的前进后退"></a>网页的前进后退</h4></blockquote>
<h5 id="判断网页是否还有上一级是否还能返回："><a href="#判断网页是否还有上一级是否还能返回：" class="headerlink" title="判断网页是否还有上一级是否还能返回："></a>判断网页是否还有上一级是否还能返回：</h5><p><code>webview.canGoBack();</code></p>
<h5 id="返回上一级："><a href="#返回上一级：" class="headerlink" title="返回上一级："></a>返回上一级：</h5><p><code>webview.goBack();</code></p>
<h5 id="前进-同理-："><a href="#前进-同理-：" class="headerlink" title="前进(同理)："></a>前进(同理)：</h5><p><code>webview.canGoForward();//是否能前进</code><br><code>webview.goForward();//前进</code></p>
<h5 id="传参控制前进后退："><a href="#传参控制前进后退：" class="headerlink" title="传参控制前进后退："></a>传参控制前进后退：</h5><p><code>webview.canGoBackOrForward(int);//正数是否能前进正数步,负数后退</code><br><code>webview.goBackOrForward(int);//正数前进正数步，负数同理</code></p>
<hr>
<h3 id="WebView-网络-URL-使用"><a href="#WebView-网络-URL-使用" class="headerlink" title="WebView 网络 URL 使用"></a>WebView 网络 URL 使用</h3><ul>
<li><p>在 APP 中使用网络需要网络权限。先在 AndroidManifest.xml 文件中的 manifest 标签内添加下面这段代码：<br><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p>
</li>
<li><p>在 activity 布局中使用 webView 组件：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/webView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java 文件 activity 中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> WebView webView;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_stagger);</span><br><span class="line"></span><br><span class="line">    webView = findViewById(R.id.webView);</span><br><span class="line">    <span class="comment">//加载网页，默认不支持javascript，因此网页还是加载不出来</span></span><br><span class="line">    webView.loadUrl(<span class="string">&quot;https://ruoxijun.github.io/&quot;</span>);</span><br><span class="line">    <span class="comment">//一般将URL写在下面这些设置的最后面，url还可以是js代码会被执行</span></span><br><span class="line">    <span class="comment">//设置支持使用javascript此时能看见网页了。</span></span><br><span class="line">    webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">/**此时你在此页面点击一个连接它会使用浏览器打开，</span></span><br><span class="line"><span class="comment">        * 但我们希望它就在当前APP内打开。进行如下设置</span></span><br><span class="line"><span class="comment">        * 此设置需要一个 WebViewClient 做参数，</span></span><br><span class="line"><span class="comment">        * 用一个类继承它并重写一部分我们需要的方法。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    webView.setWebViewClient(<span class="keyword">new</span> MyWebClient());</span><br><span class="line">    <span class="comment">/**对网页的属性以及网页加载进度相关设置，</span></span><br><span class="line"><span class="comment">        * 它需要 WebViewClient 对象,我们同样用一个类继承它</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    webView.setWebChromeClient(<span class="keyword">new</span> MyChromeClient());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘(按钮)监听事件，keycode表示按下的键的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当按下返回键时 且 web存在上一级时(可后退)</span></span><br><span class="line">    <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp;webView.canGoBack())&#123;</span><br><span class="line">        webView.goBack();<span class="comment">//web后退一步</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//事件不再传递(不退出web页面)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web视图相关类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWebClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置当前页面中的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将当前页面的URL设置为此时用户请求的URL</span></span><br><span class="line">        view.loadUrl(request.getUrl().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面开始加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon);</span><br><span class="line">        Log.d(<span class="string">&quot;webview&quot;</span>,<span class="string">&quot;网页开始加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面加载结束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">        Log.d(<span class="string">&quot;webview&quot;</span>,<span class="string">&quot;网页加载结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web相关类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChromeClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span></span>&#123;</span><br><span class="line">    <span class="comment">//网页加载的进度(),newProgress值0-100,100时表示网页加载完毕</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onProgressChanged(view, newProgress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前网页的标题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onReceivedTitle(view, title);</span><br><span class="line">        setTitle(title);<span class="comment">//将当前Activity的标题设置为网页的标题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView</title>
    <url>/2020/05/15/blog/android/RecyclerView/</url>
    <content><![CDATA[<h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><blockquote>
<h4 id="做一个简单的-recycler"><a href="#做一个简单的-recycler" class="headerlink" title="做一个简单的 recycler"></a>做一个简单的 recycler</h4></blockquote>
<h5 id="1-添加-RecyclerView-的依赖项"><a href="#1-添加-RecyclerView-的依赖项" class="headerlink" title="1. 添加 RecyclerView 的依赖项"></a>1. 添加 RecyclerView 的依赖项</h5><p>我们需要先在 APP 的 <strong>build.gradle</strong> 文件中添加下面的代码，让配置文件将需要的库加载进来。<a href="https://developer.android.google.cn/jetpack/androidx/releases/recyclerview?hl=zh_cn">请参考此网页,以获取最新的配置代码</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        implementation <span class="string">&quot;androidx.recyclerview:recyclerview:1.1.0&quot;</span></span><br><span class="line">        implementation <span class="string">&quot;androidx.recyclerview:recyclerview-selection:1.1.0-rc01&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-在-xml-使用且在-activity-中获取并设置-recyclerview"><a href="#2-在-xml-使用且在-activity-中获取并设置-recyclerview" class="headerlink" title="2. 在 xml 使用且在 activity 中获取并设置 recyclerview"></a>2. 在 xml 使用且在 activity 中获取并设置 recyclerview</h5><ul>
<li>xml 中：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>activity 中：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取组件，常规步骤</span></span><br><span class="line">recyclerView = findViewById(R.id.recycler);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RecyclerView.LayoutManager:抽象类主要用于Item布局效果，自带的实现类有：</span></span><br><span class="line"><span class="comment"> * LinearLayoutManager、StaggeredGridLayoutManager、GridLayoutManager。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里是设置布局,我们先使用最简单的线性布局</span></span><br><span class="line">recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line"><span class="comment">//需要一个适配器</span></span><br><span class="line">recyclerView.setAdapter(<span class="keyword">new</span> LinearAdapter(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>

<p>此时我们做完这些是看不到效果的。我们还需要写一个适配器。</p>
<h4 id="3-适配器-RecyclerView-Adapter"><a href="#3-适配器-RecyclerView-Adapter" class="headerlink" title="3.适配器 RecyclerView.Adapter"></a>3.适配器 RecyclerView.Adapter</h4><p>开始之前我们看一下适配器部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> VH <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(VH holder, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码得知，我们有 3 个必须要实现的方法。且它有规定一个只接受 ViewHolder 子类的泛型，方法 1 返回该类，方法 2 需要该类的传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RecyclerView的适配器必须继承RecyclerView.Adapter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">LinearAdapter</span>.<span class="title">LinearHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**适配器构造方法：</span></span><br><span class="line"><span class="comment">     * 构造方法可以自己决定，一般传入需要用到的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearAdapter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**onCreateViewHolder创建ViewHolder，</span></span><br><span class="line"><span class="comment">     * 该方法会在RecyclerView需要展示一个item的时候回调。</span></span><br><span class="line"><span class="comment">     * 重写该方法时，应该使ViewHolder载入item view的布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinearAdapter.<span class="function">LinearHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//from(parent.getContext())可以不用构造方法传参</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinearHolder(LayoutInflater.from(context)</span><br><span class="line">                .inflate(R.layout.item,parent,<span class="keyword">false</span>));</span><br><span class="line">        <span class="comment">//inflate将布局实例化为了一个view传入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**onBindViewHolder</span></span><br><span class="line"><span class="comment">     * 给item设置数据，把数据绑定、填充到相应的item中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> LinearAdapter.LinearHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.textView.setText(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line">        holder.imageView.setImageResource(R.drawable.ic_launcher_background);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置item的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**ViewHolder没有必要再写一个java文件来实现它，</span></span><br><span class="line"><span class="comment">     * 直接使用内部类继承RecyclerView的内部类ViewHolder即可，</span></span><br><span class="line"><span class="comment">     * 上方方法调用时也更方便</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinearHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">        <span class="keyword">private</span> TextView textView;</span><br><span class="line">        <span class="comment">//这里通常写上需要改变的组件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LinearHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            <span class="comment">//这里itemview是item的布局文件，通过它获取组件</span></span><br><span class="line">            textView = itemView.findViewById(R.id.textView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一个简单的 RecyclerView 就完成了。</p>
<h4 id="4-addItemDecoration-添加分割线"><a href="#4-addItemDecoration-添加分割线" class="headerlink" title="4. addItemDecoration 添加分割线"></a>4. addItemDecoration 添加分割线</h4><blockquote>
<p>RecyclerView.ItemDecoration:抽象类，主要用于给 Item 之间添加分割线。官方没有实现类，所以如果要添加分割线，我们需要手动实现这个抽象类。这里使用的 <strong><em>getItemOffsets</em></strong> 方法添加，并不是真正的添加了分隔线而是利用给 item 之间 <strong>增加间隔</strong> ，让下面的 <strong>背景</strong> 漏出而产生的分割线。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> MyDecoration());</span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="comment">//此内部类写在类中并继承RecyclerView.ItemDecoration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">        <span class="comment">//在下出现1dp间隔(下划线)</span></span><br><span class="line">        outRect.bottom=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-事件"><a href="#5-事件" class="headerlink" title="5.事件"></a>5.事件</h4><ul>
<li>最简单的方法：在 onBindViewHolder 中，利用 holder 直接给组件添加事件即可。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> LinearAdapter.LinearHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    holder.imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(context, position+<span class="string">&quot;b被点击&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>事件回调方法：这样自由度更高，扩展性更高。<blockquote>
<ul>
<li>在适配器类中定义一个接口和该接口对象，在接口中定义事件方法</li>
<li>构造适配器对象时，可接受一个该接口对象。</li>
<li>且在 onBindViewHolder 中给组件设置事件时方法中可以是具体内容也可以利用该接口对象使用该方法。</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="以上具体代码汇总参考地址"><a href="#以上具体代码汇总参考地址" class="headerlink" title="以上具体代码汇总参考地址"></a><a href="http://note.youdao.com/noteshare?id=e46eb0aa308a609cffd6cabb5a98396e&sub=F07A2A91AF474B74A4D0F3A435019B9D">以上具体代码汇总参考地址</a></h3><h4 id="进阶与扩展"><a href="#进阶与扩展" class="headerlink" title="进阶与扩展"></a>进阶与扩展</h4><ul>
<li>设置水平列表：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//之前我们设置的布局，默认垂直</span></span><br><span class="line">LinearLayoutManager layout = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//设置为水平方向</span></span><br><span class="line">layout.setOrientation(RecyclerView.HORIZONTAL);</span><br><span class="line">recyclerHor.setLayoutManager(layout);</span><br></pre></td></tr></table></figure>

<ul>
<li>网格布局：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取网格布局管理器，参1上下文参数，参2表示一行有几列</span></span><br><span class="line">GridLayoutManager grid=<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>);</span><br><span class="line">recyclerGrid.setLayoutManager(grid);</span><br><span class="line"><span class="comment">//recyclerGrid.setLayoutManager(new GridLayoutManager(this,4););//效果同上</span></span><br><span class="line">recyclerGrid.setAdapter(<span class="keyword">new</span> GridAdapter());</span><br></pre></td></tr></table></figure>

<ul>
<li>瀑布流布局：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取瀑布流网格布局，参2是方向还可以是水平</span></span><br><span class="line">StaggeredGridLayoutManager stagger=<span class="keyword">new</span></span><br><span class="line">        StaggeredGridLayoutManager(<span class="number">2</span>,StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">recyclerStagger.setLayoutManager(stagger);</span><br></pre></td></tr></table></figure>

<ul>
<li>item 的增删改与移动：(传入的参数都是指定的位置 position)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加RecyclerView中的item组件</span></span><br><span class="line">list.add(list.size()+<span class="string">&quot;新&quot;</span>);</span><br><span class="line"><span class="comment">//在指定位置添加item，并通知此item(单个)刷新(推荐使用)</span></span><br><span class="line">recyclerAdapter.notifyItemInserted(list.size()-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//recyclerAdapter.notifyDataSetChanged();//全部刷新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除RecyclerView中的item组件</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line">list.remove(i);</span><br><span class="line">recyclerAdapter.notifyItemRemoved(i);<span class="comment">//移除某item并刷新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更改RecyclerView组件中的item</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line">list.set(i,i+<span class="string">&quot;改&quot;</span>);</span><br><span class="line">recyclerAdapter.notifyItemChanged(i);<span class="comment">//更改某item</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移动RecyclerView组件中的item</span></span><br><span class="line"><span class="keyword">int</span> start = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line"><span class="keyword">int</span> end = <span class="keyword">new</span> Random().nextInt(list.size());</span><br><span class="line"><span class="comment">//将start位置上的item移动到end位置去，end上和之后的组件后移</span></span><br><span class="line">recyclerAdapter.notifyItemMoved(start,end);</span><br></pre></td></tr></table></figure>

<ul>
<li>根据需要不同的view使用不同的布局<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置视图值(重写该方法，根据需要返回不同的值)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (position%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (viewType==<span class="number">0</span>)<span class="comment">//根据不同的样式值设置不同的布局样式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.item,parent,<span class="keyword">false</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ImgViewHolder(LayoutInflater.from(parent.getContext())</span><br><span class="line">            .inflate(R.layout.item_stagger,parent,<span class="keyword">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getItemViewType(position)==<span class="number">0</span>) &#123;<span class="comment">//利用上方改写的方法，根据坐标获取样式值</span></span><br><span class="line">        ((ViewHolder) holder).textView.setText(<span class="string">&quot;Demo &quot;</span> + position);</span><br><span class="line">        ((ViewHolder) holder).imageView.setImageResource(R.drawable.ic_launcher_background);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置两个不同的Holder(创建两个item.xml布局文件)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.textView);</span><br><span class="line">        imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImgViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="RecyclerView和ScrollView协同使用："><a href="#RecyclerView和ScrollView协同使用：" class="headerlink" title="RecyclerView和ScrollView协同使用："></a>RecyclerView和ScrollView协同使用：</h3><ul>
<li>RecyclerView会自动获取焦点，导致打开页面时RecyclerView之上的控件被RecyclerView挤出屏幕外。在RecyclerView的外部布局中加入如下配置，表示viewgroup会覆盖子类控件而直接获得焦点。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:descendantFocusability=&quot;blocksDescendants&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>RecyclerView和ScrollView 一起用，滑动会不流畅，因为两个都有滑动事件，设置下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>RecyclerView和ScrollView 一起用，偶尔出现数据条目显示不全这是RecyclerView获取布局高度不准确导致，建议使用相等布局将其包裹：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
        <tag>ScrollView</tag>
      </tags>
  </entry>
  <entry>
    <title>List 集合</title>
    <url>/2020/05/15/blog/java/collection/list/</url>
    <content><![CDATA[<h3 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h3><blockquote>
<p>List 接口 (有序,带索引,元素可重复)，继承了 Collection 接口继承了它的方法外，它还定义了 list 集合的特性和独有方法，它的元素是 <strong><em>有序带索引且可重复</em></strong> 的，通过索引可以精确操作集合元素。所有对索引操作的方法都存在 <strong><em>角标越界</em></strong> 的错误风险。</p>
</blockquote>
<h4 id="List-重载和特有方法一览："><a href="#List-重载和特有方法一览：" class="headerlink" title="List 重载和特有方法一览："></a>List 重载和特有方法一览：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>效果</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>add(int,object)</td>
<td>指定插入</td>
<td>void</td>
</tr>
<tr>
<td>set(int,object)</td>
<td>修改元素</td>
<td>Object(泛型对象)</td>
</tr>
<tr>
<td>get(int)</td>
<td>获取元素</td>
<td>Object(泛型对象)</td>
</tr>
<tr>
<td>indexOf(object)</td>
<td>查找获取该元素位置</td>
<td>int</td>
</tr>
<tr>
<td>remove(int)</td>
<td>删除元素</td>
<td>被删除元素</td>
</tr>
<tr>
<td>subList(int,int)</td>
<td>取部分集合，取头不取尾</td>
<td>List</td>
</tr>
</tbody></table>
<h4 id="List-已实现类和特性："><a href="#List-已实现类和特性：" class="headerlink" title="List 已实现类和特性："></a>List 已实现类和特性：</h4><ul>
<li>Vector: 是长度可变的数组结构，增删改查都慢，同步(不建议使用)</li>
<li>ArrayList: 是长度可变的数组结构，查询速度快,增删较慢,且是不同步的</li>
<li>LinkedList: 是链表结构(指针)，增删快，查询较慢，不同步</li>
</ul>
<h4 id="List-的基本使用："><a href="#List-的基本使用：" class="headerlink" title="List 的基本使用："></a>List 的基本使用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"><span class="comment">//指定位置插入(角标0开始)</span></span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"><span class="comment">//修改(角标0开始)</span></span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">&quot;obj0&quot;</span>);</span><br><span class="line"><span class="comment">//获取指定位置上的元素</span></span><br><span class="line">System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//查找某元素在集合第一次出现的位置，未查找到返回-1</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">&quot;obj2&quot;</span>));</span><br><span class="line"><span class="comment">//查找某元素在集合最后次出现的位置，未查找到返回-1</span></span><br><span class="line">System.out.println(list.lastIndexOf(<span class="string">&quot;obj0&quot;</span>));</span><br><span class="line"><span class="comment">//移除指定位置上的元素</span></span><br><span class="line">list.remove(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"><span class="comment">//取部分集合，参1开始坐标，参2长度(包含头不包含尾)</span></span><br><span class="line">List list2=list.subList(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list2);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">[obj0, obj2]</span><br><span class="line">[obj0, obj2, obj3]</span><br></pre></td></tr></table></figure>

<h4 id="在循环中修改元素："><a href="#在循环中修改元素：" class="headerlink" title="在循环中修改元素："></a>在循环中修改元素：</h4><ul>
<li>在 for 循环中对 list <code>remove</code> 操作时需注意元素的移动，和 size 的变化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    System.out.println(i+<span class="string">&quot;:&quot;</span>+list.get(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (list.get(i).equals(<span class="string">&quot;obj2&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//移除元素后，后元素前移。</span></span><br><span class="line">        list.remove(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">        <span class="comment">//角标需后移一位</span></span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>foreach 循环中不能使用 <code>add</code> 和 <code>remove</code> 方法，否则报错。原因请参考此文章： <a href="https://blog.csdn.net/wxxiangge/article/details/89874178?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">foreach 循环中不能用 list.remove() list.add()方法的原因分析</a></li>
</ul>
<ul>
<li>利用 ListIterator 动态修改元素(官方推荐)：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取到当前list的迭代器，并判断是否存在下一个元素</span></span><br><span class="line"><span class="keyword">for</span> (ListIterator li=list.listIterator();li.hasNext();)&#123;</span><br><span class="line">    <span class="comment">//next返回当前元素返回，指针并指向下一元素</span></span><br><span class="line">    <span class="keyword">if</span>(li.next().equals(<span class="string">&quot;obj0&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//改变当前next返回的元素</span></span><br><span class="line">        li.set(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">        <span class="comment">//移除当前next返回的元素</span></span><br><span class="line">        li.remove();</span><br><span class="line">        <span class="comment">//在当前next返回的元素，之后添加元素</span></span><br><span class="line">        li.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意此 <strong>ListIterator</strong> 迭代器为为 list <strong>独有</strong>。</p>
<h4 id="LinkedList："><a href="#LinkedList：" class="headerlink" title="LinkedList："></a>LinkedList：</h4><p>此类的方法是实现模拟 <strong>堆栈</strong> 或 <strong>队列</strong> 的最好选择</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list=<span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">//在头部添加元素</span></span><br><span class="line">list.addFirst(<span class="string">&quot;add0&quot;</span>);</span><br><span class="line"><span class="comment">//在尾部添加元素</span></span><br><span class="line">list.addLast(<span class="string">&quot;add1&quot;</span>);</span><br><span class="line"><span class="comment">//获取头部上的元素</span></span><br><span class="line">list.getFirst();</span><br><span class="line"><span class="comment">//获取尾部上的元素</span></span><br><span class="line">list.getLast();</span><br><span class="line"><span class="comment">//移除头部上的元素并返回</span></span><br><span class="line">list.removeFirst();</span><br><span class="line"><span class="comment">//移除尾部元素并返回</span></span><br><span class="line">list.removeLast();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>arraylist</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection 集合基类</title>
    <url>/2020/05/14/blog/java/collection/collection/</url>
    <content><![CDATA[<h3 id="初识集合-Collection"><a href="#初识集合-Collection" class="headerlink" title="初识集合 Collection"></a>初识集合 Collection</h3><p>在开始之前我们先看一下<strong>集合的结构图解</strong><br><img src="https://gitee.com/ruoxijun/images/raw/master/java/list.jpg" alt="集合结构图,图片来自网络"></p>
<blockquote>
<p>Collection 集合的顶层接口，定义了集合的特性和方法。<br>集合存储的都是对象，集合类都在 java.util 包中。</p>
</blockquote>
<h4 id="Collection-基本方法一览："><a href="#Collection-基本方法一览：" class="headerlink" title="Collection 基本方法一览："></a>Collection 基本方法一览：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>效果</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>add(Object)</td>
<td>添加(对象)方法</td>
<td>Boolean</td>
</tr>
<tr>
<td>remove(Object)</td>
<td>删除方法</td>
<td>Boolean</td>
</tr>
<tr>
<td>contains(Object)</td>
<td>是否包含某元素</td>
<td>Boolean</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>集合是否为空</td>
<td>Boolean</td>
</tr>
<tr>
<td>size()</td>
<td>集合中元素个数</td>
<td>int</td>
</tr>
<tr>
<td>clear()</td>
<td>清除集合中所有元素</td>
<td>void</td>
</tr>
</tbody></table>
<p><strong>所有集合都有 toString()</strong> 方法，可直接使用打印方法输出在控制台上。</p>
<h4 id="使用实例："><a href="#使用实例：" class="headerlink" title="使用实例："></a>使用实例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个collection对象，ArrayList是它的一个子类(此时不用太多了解)</span></span><br><span class="line">Collection con = <span class="keyword">new</span>  ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add添加元素，不能添加基本类型元素，只能添加它们的包装类</span></span><br><span class="line">con.add(<span class="string">&quot;object1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;object3&quot;</span>);</span><br><span class="line">System.out.println(con);<span class="comment">//打印结果：[object1, object2, object3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//remove删除元素，成功返回true否则false</span></span><br><span class="line"><span class="keyword">boolean</span> rm=con.remove(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">System.out.println(rm+<span class="string">&quot; - &quot;</span>+con);<span class="comment">//打印结果：true - [object1, object3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contains判断集合是否包含某元素</span></span><br><span class="line"><span class="keyword">boolean</span> exist=con.contains(<span class="string">&quot;object1&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> exist2=con.contains(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">System.out.println(exist+<span class="string">&quot; - &quot;</span>+exist2);<span class="comment">//打印结果：true - false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//isEmpty判断当前集合为空(没有元素)返回true，反之false</span></span><br><span class="line"><span class="keyword">boolean</span> empty=con.isEmpty();</span><br><span class="line">System.out.println(empty);<span class="comment">//打印结果：false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear清空当前集合元素</span></span><br><span class="line">con.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//size返回元素集合个数</span></span><br><span class="line"><span class="keyword">int</span> count=con.size();</span><br><span class="line"><span class="comment">//因为我们在上面已经把集合清空，所以打印结果为：0</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上实例只是为了演示 collection 中的方法，ArrayList 是 collection 的子类，则 <code>Collection con = new ArrayList()</code> 是多态中的向上转型，此时我们只能使用 collection 中的方法，ArrayList 中的方法无法使用，所有现在不用关心 ArrayList 后期会详细讲解。</p>
</blockquote>
<h4 id="Collection-带-All-方法一览："><a href="#Collection-带-All-方法一览：" class="headerlink" title="Collection 带 All 方法一览："></a>Collection 带 All 方法一览：</h4><table>
<thead>
<tr>
<th>方法</th>
<th>效果</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>addAll(Collection)</td>
<td>将某集合的元素全部添加到此集合中</td>
<td>boolean</td>
</tr>
<tr>
<td>containsAll(Collection)</td>
<td>此集合中是否包含另一集合中的所有元素</td>
<td>boolean</td>
</tr>
<tr>
<td>removeAll(Collection)</td>
<td>移除此集合中与另一集合相同的元素</td>
<td>boolean</td>
</tr>
<tr>
<td>retainAll(Collection)</td>
<td>此集合只保留与另一集合相同的元素</td>
<td>boolean</td>
</tr>
</tbody></table>
<h4 id="All-方法使用实例："><a href="#All-方法使用实例：" class="headerlink" title="All 方法使用实例："></a>All 方法使用实例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection con=<span class="keyword">new</span>  ArrayList();</span><br><span class="line">con.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection con2=<span class="keyword">new</span> ArrayList();</span><br><span class="line">con2.add(<span class="string">&quot;obj4&quot;</span>);</span><br><span class="line">con2.add(<span class="string">&quot;obj5&quot;</span>);</span><br><span class="line">con2.add(<span class="string">&quot;obj6&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将con2中元素全部向con添加一遍</span></span><br><span class="line">con.addAll(con2);</span><br><span class="line">System.out.println(con);</span><br><span class="line"><span class="comment">//打印结果：[obj1, obj2, obj3, obj4, obj5, obj6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断con中是否包含con2中所有元素</span></span><br><span class="line"><span class="keyword">boolean</span> contain=con.containsAll(con2);</span><br><span class="line">System.out.println(contain);<span class="comment">//打印结果：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仅保留con中与con2相同的元素</span></span><br><span class="line">con.retainAll(con2);</span><br><span class="line">System.out.println(con);<span class="comment">//打印结果：[obj4, obj5, obj6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除con中与con2相同的元素</span></span><br><span class="line">con.removeAll(con2);</span><br><span class="line">System.out.println(con+<span class="string">&quot; - &quot;</span>+con2);<span class="comment">//打印结果：[] - [obj4, obj5, obj6]</span></span><br></pre></td></tr></table></figure>

<h3 id="集合迭代器-Iterator"><a href="#集合迭代器-Iterator" class="headerlink" title="集合迭代器(Iterator)"></a>集合迭代器(Iterator)</h3><blockquote>
<p>Iterator 接口每一个集合都有实现此接口，通过它可以做到无视集合的数据结构，只判断有无元素而取出元素。它可以对任何集合做迭代通过 <strong><em>集合.iterator()</em></strong> 拿到迭代器对象，所有集合适用。</p>
<blockquote>
<p>主要方法：</p>
<ul>
<li>next 迭代元素。返回当前指向的元素，并且每次使用后指向下一个元素。当最后一个元素被迭代后再使用将报错</li>
<li>hasNext() 判断集合中还有无可迭代元素</li>
</ul>
</blockquote>
</blockquote>
<h4 id="常用迭代方法实例："><a href="#常用迭代方法实例：" class="headerlink" title="常用迭代方法实例："></a>常用迭代方法实例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection con=<span class="keyword">new</span>  ArrayList();</span><br><span class="line">con.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"><span class="comment">//获取迭代器对象</span></span><br><span class="line"><span class="keyword">for</span>(Iterator it=con.iterator();it.hasNext();)&#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合的一些细节"><a href="#集合的一些细节" class="headerlink" title="集合的一些细节"></a>集合的一些细节</h3><blockquote>
<ol>
<li>集合中储存的是对象的引用地址，并非对象本身</li>
<li>集合本不能存储基本数值类型，但 jdk1.5 以后存储基本数据类型时，内部将自动装箱处理：add(Integer.valueOf(1))</li>
<li>存储时为 object 类型那么取出时也为 object 类型，想使用该对象方法需要向下转型(也可以通过泛型方式，去除此过程)</li>
<li>一般集合中判断元素对象是否相等是调用了 equals 方法，而 object 的 equals 方法是默认比较<strong>地址是否相等</strong>。如需使用到会比较对象是否相等(重复)的方法，请<strong>重写 equals 方法</strong></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>集合</tag>
        <tag>Collection</tag>
        <tag>迭代器</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令基础</title>
    <url>/2020/05/14/blog/interest/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<h2 id="Linux命令基本格式"><a href="#Linux命令基本格式" class="headerlink" title="Linux命令基本格式"></a>Linux命令基本格式</h2></blockquote>
<ul>
<li><strong><em>命令格式</em></strong>：命令 [-选项] [参数]</li>
<li>多个选项可以写在一起只用一个 <strong><em>‘ - ‘</em></strong></li>
<li>Linux中选项前加单杠（-）是为简写，双杠（–）为全写，效果一致</li>
<li><code>ctrl+c</code>：可退出进入的某种状态</li>
</ul>
<hr>
<blockquote>
<h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2></blockquote>
<h4 id="查询命令："><a href="#查询命令：" class="headerlink" title="查询命令："></a><em>查询命令：</em></h4><ul>
<li><strong>ls</strong>：<strong>直接使用</strong>时表示列出当<em>前目录下的所有非隐藏文件</em></li>
<li>ls 目录名：ls后跟上路径，表示<strong>指定路径查询</strong></li>
<li><strong>ls -a</strong>:加上 <strong>-a选项</strong>(–all) 列出当<em>前目录下的所有文件</em>包括<strong>隐藏文件</strong></li>
<li><strong>ls -l</strong>：**-l**(可加上h人性化显示信息)<strong>选项</strong>表示同时列出文件详细信息</li>
<li><strong>pwd</strong>：查看<strong>当前绝对路径</strong></li>
<li><strong>clear</strong>：<strong>清空</strong>命令行</li>
</ul>
<hr>
<h4 id="到达指定目录命令："><a href="#到达指定目录命令：" class="headerlink" title="到达指定目录命令："></a><em>到达指定目录命令：</em></h4><ul>
<li><strong>cd</strong> 目录名：切换到指定目录</li>
<li>**cd ..**：返回上一级目录</li>
</ul>
<hr>
<h4 id="目录-文件夹-处理命令："><a href="#目录-文件夹-处理命令：" class="headerlink" title="目录(文件夹)处理命令："></a><em>目录(文件夹)处理命令：</em></h4><ul>
<li><strong>mkdir</strong> 目录名：根据目录名在<strong>当指定目录下创建一个文件夹</strong>，如果<strong>只写一个文件夹名</strong>则表示在当前目录下创建一个文件夹</li>
<li><strong>mkdir -p</strong> 目录名：根据目录名在<strong>指定目录下创建新的多级目录</strong></li>
<li><strong>rmdir</strong> 目录名：<strong>删除</strong>指定<strong>空目录</strong></li>
<li><strong>cp</strong> 原文件或目录 目标目录：<strong>复制文件</strong>到指定目录，在目标目录后跟上名称可以复制时同时改名。</li>
<li><strong>cp -r</strong> 原目录 目标：加上 <strong>-r</strong>选项表示<strong>复制目录</strong></li>
<li><strong>cp -p</strong> 原目录 目标：**-p<strong>保留文件</strong>原属性**复制</li>
<li><strong>mv</strong> 原文件或目录 目标目录：<strong>剪切</strong>(移动)文件同时可改名，操作与复制命令(cp)类似。</li>
</ul>
<hr>
<h4 id="文件处理命令："><a href="#文件处理命令：" class="headerlink" title="文件处理命令："></a><em>文件处理命令：</em></h4><ul>
<li><strong>rm -f</strong> 文件或目录：<strong>删除</strong>文件，*-f*表示强制删除，可以不加但删除前会询问输入<strong>y</strong>确认</li>
<li><strong>rm -rf</strong>  文件或目录：**-r**删除目录(文件夹和文件夹内所有文件)</li>
<li><strong>touch</strong> 文件名(空格隔开创建多个)：在<strong>当前目录下创建</strong>一个空文件，也可改为目录名在指定目录下创建文件</li>
<li><strong>cat</strong> 目录名：<strong>查看文件内容</strong>，写成 <strong><em>tac会逆序显示内容</em></strong></li>
<li><strong>cat -n</strong> 目录名：显示内容时同时<strong>显示行号</strong></li>
<li><strong>less</strong> 目录名：分页显示文件内容，可用上下箭头一行一行翻页，PgUp|PgDn|空格翻页。还可输入 <strong>‘/‘</strong> 后跟上想搜索的内容回车搜索输入 <strong>‘n’</strong> 查找下一个，最后按 <strong>‘q’</strong> 退出阅读</li>
<li><strong>head -n 行数 目录名</strong>：指定显示前几行内容</li>
<li><strong>tail -n 行数 目录名</strong>：显示后面几行</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 语法学习</title>
    <url>/2020/05/14/blog/interest/MarkDown%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<h2 id="1-字体-包裹的符号都是可以嵌套使用的-："><a href="#1-字体-包裹的符号都是可以嵌套使用的-：" class="headerlink" title="1. 字体(包裹的符号都是可以嵌套使用的)："></a>1. <strong>字体</strong>(包裹的符号都是可以嵌套使用的)：</h2></blockquote>
<h4 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*斜体* || _斜体_</span><br><span class="line">**加粗** </span><br><span class="line">***加粗斜体***</span><br><span class="line">~~中划线~~ </span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="line">分割线(需要独占一行)：</span><br><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下："><a href="#显示结果如下：" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p><em>斜体</em> || <em>斜体</em><br><strong>加粗</strong><br><strong><em>加粗斜体</em></strong><br><del>中划线</del><br><u>下划线</u><br>分割线(需要独占一行)：</p>
<hr>
<hr>
<blockquote>
<h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2. 标题："></a>2. 标题：</h2></blockquote>
<h4 id="写法：-1"><a href="#写法：-1" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 标题一</span><br><span class="line">## 标题二</span><br><span class="line">### 标题三(最多六级标题)</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-1"><a href="#显示结果如下：-1" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三-最多六级标题"><a href="#标题三-最多六级标题" class="headerlink" title="标题三(最多六级标题)"></a>标题三(最多六级标题)</h3><blockquote>
<h2 id="3-超链接："><a href="#3-超链接：" class="headerlink" title="3. 超链接："></a>3. 超链接：</h2></blockquote>
<h4 id="写法：-2"><a href="#写法：-2" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[显示文字](目标链接)</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-2"><a href="#显示结果如下：-2" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p><a href="%E7%9B%AE%E6%A0%87%E9%93%BE%E6%8E%A5">显示文字</a></p>
<blockquote>
<h2 id="4-列表-星号前每多两个空格级数增一-："><a href="#4-列表-星号前每多两个空格级数增一-：" class="headerlink" title="4. 列表(星号前每多两个空格级数增一)："></a>4. 列表(星号前每多两个空格级数增一)：</h2></blockquote>
<h4 id="写法：-3"><a href="#写法：-3" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 一级无序列表(-,+号也同效果)</span><br><span class="line">  * 二级无序列表</span><br><span class="line">    * 三级无序列表</span><br><span class="line">    <span class="number">1.</span> 有序列表</span><br><span class="line">- [ ] 任务列表</span><br><span class="line">- [x] 选中列表 </span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-3"><a href="#显示结果如下：-3" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><ul>
<li>一级无序列表(-,+号也同效果)<ul>
<li>二级无序列表<ul>
<li>三级无序列表</li>
</ul>
<ol>
<li>有序列表</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 任务列表</li>
<li><input checked="" disabled="" type="checkbox"> 选中列表 </li>
</ul>
<blockquote>
<h2 id="5-引用："><a href="#5-引用：" class="headerlink" title="5. 引用："></a>5. 引用：</h2></blockquote>
<h4 id="写法：-4"><a href="#写法：-4" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用 (级数无限制)</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-4"><a href="#显示结果如下：-4" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用 (级数无限制)</p>
</blockquote>
</blockquote>
<blockquote>
<h2 id="6-插入图片："><a href="#6-插入图片：" class="headerlink" title="6. 插入图片："></a>6. 插入图片：</h2></blockquote>
<h4 id="写法：-5"><a href="#写法：-5" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![文字说明](图片链接||路径)</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-5"><a href="#显示结果如下：-5" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p><img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%7C%7C%E8%B7%AF%E5%BE%84" alt="文字说明"></p>
<blockquote>
<h2 id="7-标注："><a href="#7-标注：" class="headerlink" title="7. 标注："></a>7. 标注：</h2></blockquote>
<h4 id="写法：-6"><a href="#写法：-6" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">标注[^<span class="number">1</span>]</span><br><span class="line">[^<span class="number">1</span>]:注释语句(会在文章末尾显示)</span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-6"><a href="#显示结果如下：-6" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p>标注[^1]<br>[^1]:注释语句(会在文章末尾显示)</p>
<blockquote>
<h2 id="8-表格-上必须空一行，-和-来区分头和文本对齐方式-："><a href="#8-表格-上必须空一行，-和-来区分头和文本对齐方式-：" class="headerlink" title="8. 表格(上必须空一行，-和:来区分头和文本对齐方式)："></a>8. 表格(上必须空一行，-和:来区分头和文本对齐方式)：</h2></blockquote>
<h4 id="写法：-7"><a href="#写法：-7" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">| <span class="number">0</span>,<span class="number">1</span>        |  <span class="number">0</span>,<span class="number">2</span>  |  <span class="number">0</span>,<span class="number">3</span> |</span><br><span class="line">| :--------- | :---: | ---: |</span><br><span class="line">| 靠左(默认) | 居中  | 靠右 |</span><br><span class="line"><span class="comment">//&#x27;-&#x27;多少与样式无关</span></span><br></pre></td></tr></table></figure>

<h4 id="显示结果如下：-7"><a href="#显示结果如下：-7" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><table>
<thead>
<tr>
<th align="left">0,1</th>
<th align="center">0,2</th>
<th align="right">0,3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">靠左(默认)</td>
<td align="center">居中</td>
<td align="right">靠右</td>
</tr>
</tbody></table>
<blockquote>
<h2 id="9-代码块："><a href="#9-代码块：" class="headerlink" title="9. 代码块："></a>9. 代码块：</h2></blockquote>
<h4 id="写法：-8"><a href="#写法：-8" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```在表明语言</span><br><span class="line"><span class="comment">// 代码块，存放代码</span></span><br></pre></td></tr></table></figure>
<pre><code>`只有一句的代码`</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 显示结果如下：</span><br><span class="line">​&#96;&#96;&#96;在表明语言</span><br><span class="line">&#x2F;&#x2F; 代码块，存放代码</span><br></pre></td></tr></table></figure>
<p><code>只有一句的代码</code></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
